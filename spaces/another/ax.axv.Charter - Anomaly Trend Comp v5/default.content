<AnalyticsExplorerView description="" name="Charter - Anomaly Trend Comp v5" is_init="false">
  <ModelInfo validated="false" nextPageId="3">
    <GlobalDSRSetting enabled="false"/>
    <GlobalProperties>
      <Property name="Property1" label="Property1" type="string" value="" constraints="" runtimeControl="true"/>
    </GlobalProperties>
    <GlobalThemeSetting>
      <SelectedTheme theme="{&quot;id&quot;:null,&quot;name&quot;:&quot;Vitria Default Theme&quot;,&quot;label&quot;:&quot;Vitria Default Theme&quot;}"/>
      <TileOpacity opacity="0.8"/>
      <TileFontColor color="#000000"/>
      <NoTileSpacing value="true"/>
    </GlobalThemeSetting>
    <I18NTab>
      <name value="default"/>
    </I18NTab>
    <TabNavSetting visible="false"/>
    <DWRSetting disable="false"/>
    <Page id="1" name="Default" title="Default" desc="" tabNavVisible="true" panelposition="right" panelstatus="closed" className="">
      <HelpContent><![CDATA[]]></HelpContent>
      <PageProperties/>
      <Layout type="10" numRow="1" numCol="1" count="1" templateType="21" screenHeight="1080" renderType="null" positions="[{&quot;data_col&quot;:1,&quot;data_row&quot;:1,&quot;data_sizex&quot;:120,&quot;data_sizey&quot;:72,&quot;id&quot;:0,&quot;title&quot;:&quot;Anomaly Details&quot;}]" unitSize="{&quot;x&quot;:13.033333333333333,&quot;y&quot;:11.402777777777779}" viewRows="72" viewCols="120"/>
      <Tile name="Chart" title="Anomaly Details" desc="" hideEmptyTile="false" previewSize="15" type="Independent" style="small" sampleData="false" className="section-trend" parentSelect="false" advancedConfig="false" advancedDisable="true" allowFullscreen="false">
        <DataSource category="#ClientSideResource" id="axflow:localstore:node:23" name="axflow:localstore:node:23" label="Trend Data" type="#ScriptDataStore">
          <Param name="where" label="Where Clause" value="" binding="" type="string"/>
          <Param name="sort" label="Sort Order" value="" binding="" type="string"/>
          <Field name="_group_" label="Group" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_epoch_" label="Epoch Time" type="number" isDimension="false" isMeasure="false"/>
          <Field name="_time_" label="GMT" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_value1_" label="Metric Value" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_baseline1_" label="Metric Baseline" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_uom1_" label="Metric UoM" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_value2_" label="Calls Value" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_baseline2_" label="Calls Baseline" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_uom2_" label="Calls UoM" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_diffval1_" label="+/- Metric over Baseline" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_diffval2_" label="+/- Calls over Baseline" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_diffpct1_" label="% +/- Metric over Baseline" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_diffpct2_" label="% +/- Calls over Baseline" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_anomalyFlag_" label="Anomaly Flag" type="string" isDimension="false" isMeasure="false"/>
          <Field name="_anomalyValue_" label="Anomaly Marker" type="number" isDimension="false" isMeasure="false"/>
          <Field name="_iconState" label="State" type="string" isDimension="false" isMeasure="false"/>
        </DataSource>
        <LabelStyle><![CDATA[{"display":"none"}]]></LabelStyle>
        <TileThemeSetting><![CDATA[{"_tileOpacity":"1"}]]></TileThemeSetting>
        <DataViewer name="dbp.Renderer" label="Dashboard Module" optional="false" minimode="false">
          <Property name="generalProperties" value="{&quot;_model&quot;:&quot;/app/dbp/user/via_common/dbpm/VIA - TimeSeriesChart/timeSeriesChart&quot;,&quot;model&quot;:&quot;{\r\n\t\&quot;title\&quot;:          \&quot;\&quot;,\r\n\t\&quot;leftAxisTitle\&quot;:  \&quot;Metric Measure / Baseline\&quot;,\r\n\t\&quot;rightAxisTitle\&quot;: \&quot;Calls / Call Baseline\&quot;,\r\n\t\&quot;leftAxisRangeMode\&quot;:    \&quot;nonnegative\&quot;,\r\n\t\&quot;rightAxisRangeMode\&quot;:    \&quot;nonnegative\&quot;,\r\n\t\&quot;showlegend\&quot;:     false,\r\n\t\&quot;format\&quot;:         \&quot;%m/%d %H:%M\&quot;, \r\n\t\&quot;showcursor\&quot;:     true, \r\n    \&quot;marginTop\&quot;:      -3,\r\n\t\&quot;marginBottom\&quot;:   -5,\r\n\t\&quot;marginLeft\&quot;:     50,\r\n\t\&quot;marginRight\&quot;:    30,\r\n\t\&quot;tickAngle\&quot;:      0,\r\n\t\&quot;dimension\&quot;:      {\r\n\t\t\t\t\t\t\&quot;title\&quot;: \&quot;\&quot;, \r\n\t\t\t\t\t\t\&quot;type\&quot;: \&quot;date\&quot;,\r\n\t\t\t\t\t\t\&quot;dataType\&quot;: \&quot;epoch\&quot;,\r\n\t\t\t\t\t\t\&quot;fieldName\&quot;: \&quot;_epoch_\&quot;\r\n\t\t\t\t\t  },\r\n\t\t\t\t\t  \r\n\t\&quot;series\&quot;:         [\r\n\t    \r\n\t                    { \&quot;label\&quot;: \&quot;Anomaly: Warmup\&quot;,   \&quot;fieldName\&quot;: \&quot;_chrisValueWU_\&quot;,    \&quot;type\&quot;: \&quot;scatter\&quot;, \&quot;symbol\&quot;: \&quot;triangle-up\&quot;, \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;#f28383\&quot;, \&quot;fillColor\&quot;: \&quot;#f28383\&quot;,   \&quot;width\&quot;: 10,  \&quot;axis\&quot;: \&quot;right\&quot;, \&quot;opacity\&quot;: 1 },\r\n\t                    { \&quot;label\&quot;: \&quot;Anomaly: Cooldown\&quot;,   \&quot;fieldName\&quot;: \&quot;_chrisValueCD_\&quot;,    \&quot;type\&quot;: \&quot;scatter\&quot;, \&quot;symbol\&quot;: \&quot;triangle-down\&quot;, \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;#89C4E1\&quot;, \&quot;fillColor\&quot;: \&quot;#89C4E1\&quot;,   \&quot;width\&quot;: 10,  \&quot;axis\&quot;: \&quot;right\&quot;, \&quot;opacity\&quot;: 1 },\r\n\t                    { \&quot;label\&quot;: \&quot;Anomaly: Low\&quot;,   \&quot;fieldName\&quot;: \&quot;_chrisValueL_\&quot;,    \&quot;type\&quot;: \&quot;scatter\&quot;, \&quot;symbol\&quot;: \&quot;circle\&quot;, \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;#ffd200\&quot;, \&quot;fillColor\&quot;: \&quot;#ffd200\&quot;,   \&quot;width\&quot;: 8,  \&quot;axis\&quot;: \&quot;right\&quot;, \&quot;opacity\&quot;: 1 },\r\n\t                    { \&quot;label\&quot;: \&quot;Anomaly: Medium\&quot;, \&quot;fieldName\&quot;: \&quot;_chrisValueM_\&quot;,    \&quot;type\&quot;: \&quot;scatter\&quot;, \&quot;symbol\&quot;: \&quot;circle\&quot;, \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;#F5A623\&quot;, \&quot;fillColor\&quot;: \&quot;#F5A623\&quot;,   \&quot;width\&quot;: 8,  \&quot;axis\&quot;: \&quot;right\&quot;, \&quot;opacity\&quot;: 1 },\r\n\t                    { \&quot;label\&quot;: \&quot;Anomaly: High\&quot;,    \&quot;fieldName\&quot;: \&quot;_chrisValueH_\&quot;,    \&quot;type\&quot;: \&quot;scatter\&quot;, \&quot;symbol\&quot;: \&quot;circle\&quot;, \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;#D0021B\&quot;, \&quot;fillColor\&quot;: \&quot;#D0021B\&quot;,   \&quot;width\&quot;: 8,  \&quot;axis\&quot;: \&quot;right\&quot;, \&quot;opacity\&quot;: 1 },\r\n\t                    \r\n\t                    \r\n\t                    { \&quot;label\&quot;: \&quot;Calls\&quot;,             \&quot;fieldName\&quot;: \&quot;_value2_\&quot;,    \&quot;type\&quot;: \&quot;area\&quot;, \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;rgba(114,179,210, 0.40)\&quot;, \&quot;fillColor\&quot;: \&quot;rgba(114,179,210, 0.40)\&quot;,   \&quot;width\&quot;: 0,  \&quot;axis\&quot;: \&quot;right\&quot;, \&quot;opacity\&quot;: 1 },\r\n\t\t\t\t\t\t{ \&quot;label\&quot;: \&quot;Metric Measure\&quot;,    \&quot;fieldName\&quot;: \&quot;_value1_\&quot;,    \&quot;type\&quot;: \&quot;bar\&quot;,  \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;rgba(18,150,215, 0.50)\&quot;, \&quot;fillColor\&quot;: \&quot;rgba(18,150,215, 0.50)\&quot;, \&quot;width\&quot;: 0,    \&quot;axis\&quot;: \&quot;left\&quot;,  \&quot;opacity\&quot;: 1 },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{ \&quot;label\&quot;: \&quot;Metric Baseline\&quot;,   \&quot;fieldName\&quot;: \&quot;_baseline1_\&quot;, \&quot;type\&quot;: \&quot;line\&quot;, \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;#148ac4\&quot;, \&quot;fillColor\&quot;: \&quot;#148ac4\&quot;,   \&quot;width\&quot;: 2,  \&quot;axis\&quot;: \&quot;left\&quot;,  \&quot;opacity\&quot;: 1 },\r\n                        { \&quot;label\&quot;: \&quot;Call Baseline\&quot;,     \&quot;fieldName\&quot;: \&quot;_baseline2_\&quot;, \&quot;type\&quot;: \&quot;line\&quot;, \&quot;visible\&quot;: true, \&quot;color\&quot;:\&quot;#72B3D2\&quot;, \&quot;fillColor\&quot;: \&quot;#72B3D2\&quot;,     \&quot;width\&quot;:1,  \&quot;axis\&quot;: \&quot;right\&quot;, \&quot;opacity\&quot;: 1 }\r\n\t\t\t\t\t]\r\n\r\n}&quot;}"/>
          <Ports/>
        </DataViewer>
      </Tile>
    </Page>
    <DataFlow showFooter="true">
      <Item id="node:1" type="PortIn" label="Port IN 0" _undefined_title="" originHeight="100" width="130" height="337" x="46" y="280">
        <dynOut id="dout:0" type="any" label="Score Factor" propagate="always" _isArray="true"/>
        <dynOut id="dout:1" type="any" label="High Threshold" propagate="always" _isArray="true"/>
        <dynOut id="dout:2" type="any" label="Medium Threshold" propagate="always" _isArray="true"/>
        <dynOut id="dout:3" type="any" label="Low Threshold" propagate="always" _isArray="true"/>
        <dynOut id="dout:4" type="any" label="" propagate="always" _isArray="true"/>
        <dynOut id="dout:5" type="any" label="Config" propagate="always" _isArray="true"/>
        <dynOut id="dout:6" type="string" label="Lang" propagate="always" _isArray="true"/>
        <dynOut id="dout:7" type="any[]" label="Filters" propagate="always" _isArray="true"/>
        <dynOut id="dout:8" type="any[]" label="Selection" propagate="always" _isArray="true"/>
        <dynOut id="dout:9" type="any" label="annotations" propagate="always" _isArray="true"/>
      </Item>
      <Item id="node:4" type="Tile" label="Chart" _undefined_title="" _undefined_originHeight="" width="130" height="160" x="1170" y="480"/>
      <Item id="node:7" type="UserScript" label="Script 2" _undefined_title="" originHeight="117" width="186" height="337" x="320" y="750">
        <dynIn id="din:0" type="event[]" label="Selected" evaluate="always" _isArray="true"/>
        <dynIn id="din:1" type="any" label="Config" evaluate="always" _isArray="true"/>
        <dynIn id="din:2" type="string" label="Lang" evaluate="always" _isArray="true"/>
        <dynIn id="din:3" type="any[]" label="Filters" evaluate="always" _isArray="true"/>
        <dynOut id="dout:0" type="event[]" label="Anomaly Data" propagate="always" _isArray="true"/>
        <dynOut id="dout:1" type="event[]" label="Trend Data" propagate="always" _isArray="true"/>
        <dynOut id="dout:2" type="any" label="Trend Notify" propagate="always" _isArray="true"/>
        <dynOut id="dout:3" type="string" label="incidentID" propagate="always" _isArray="true"/>
        <dynOut id="dout:4" type="number" label="startEpoch" propagate="always" _isArray="true"/>
        <dynOut id="dout:5" type="number" label="endEpoch" propagate="always" _isArray="true"/>
        <dynOut id="dout:6" type="string" label="service" propagate="always" _isArray="true"/>
        <dynOut id="dout:7" type="string" label="subService" propagate="always" _isArray="true"/>
        <dynOut id="dout:8" type="string" label="dimVals" propagate="always" _isArray="true"/>
        <dynOut id="dout:9" type="any" label="Computed Score Factor" propagate="always" _isArray="true"/>
        <dynOut id="dout:10" type="boolean" label="isOutage" propagate="always" _isArray="true"/>
        <dynOut id="dout:11" type="event[]" label="Incident Data" propagate="always" _isArray="true"/>
      </Item>
      <Item id="node:21" type="PortOut" label="Port OUT 0" _undefined_title="" originHeight="177" width="130" height="217" x="992" y="160">
        <dynIn id="din:0" type="any[]" label="TrendData" evaluate="always" _isArray="true"/>
        <dynIn id="din:1" type="number" label="RangeStart" evaluate="always" _isArray="true"/>
        <dynIn id="din:2" type="number" label="RangeEnd" evaluate="always" _isArray="true"/>
      </Item>
      <Item id="node:23" type="LocalStore" label="Trend Data" _undefined_title="" _undefined_originHeight="" width="130" height="177" x="700" y="240"/>
      <Item id="node:29" type="UserScript" label="Script 8" _undefined_title="" originHeight="117" width="160" height="217" x="960" y="529">
        <dynIn id="din:0" type="any[]" label="incidentData" evaluate="always" _isArray="true"/>
        <dynIn id="din:1" type="any[]" label="TrendData" evaluate="always" _isArray="true"/>
        <dynIn id="din:2" type="any[]" label="outageData" evaluate="always" _isArray="true"/>
        <dynIn id="din:3" type="any" label="highLow" evaluate="always" _isArray="true"/>
        <dynIn id="din:4" type="any" label="highLow_2" evaluate="always" _isArray="true"/>
        <dynIn id="din:5" type="any[]" label="annotations" evaluate="always" _isArray="true"/>
        <dynOut id="dout:0" type="any" label="notification" propagate="always" _isArray="true"/>
      </Item>
      <Item id="node:41" type="UserScript" label="Script 12" _undefined_title="" originHeight="117" width="140" height="217" x="680" y="1030">
        <dynIn id="din:0" type="number" label="stEpoch" evaluate="always" _isArray="true"/>
        <dynIn id="din:1" type="number" label="edEpoch" evaluate="always" _isArray="true"/>
        <dynIn id="din:2" type="string" label="service" evaluate="always" _isArray="true"/>
        <dynIn id="din:3" type="string" label="subService" evaluate="always" _isArray="true"/>
        <dynIn id="din:4" type="string" label="incidentId" evaluate="always" _isArray="true"/>
        <dynIn id="din:5" type="any[]" label="incidentData" evaluate="always" _isArray="true"/>
        <dynIn id="din:6" type="any[]" label="trendData" evaluate="always" _isArray="true"/>
        <dynOut id="dout:0" type="any[]" label="outageData" propagate="always" _isArray="true"/>
        <dynOut id="dout:1" type="any" label="highLow" propagate="always" _isArray="true"/>
        <dynOut id="dout:2" type="any" label="highLow_2" propagate="always" _isArray="true"/>
      </Item>
      <Item id="node:43" type="UserScript" label="Script 13" _undefined_title="" originHeight="117" width="130" height="117" x="312" y="480">
        <dynIn id="din:0" type="any" label="notifyIn" evaluate="always" _isArray="true"/>
        <dynOut id="dout:0" type="any" label="annotations" propagate="always" _isArray="true"/>
      </Item>
      <Link srcId="node:1" srcPort="dout:9" tgtId="node:43" tgtPort="din:0"/>
      <Link srcId="node:7" srcPort="dout:1" tgtId="node:29" tgtPort="din:1"/>
      <Link srcId="node:7" srcPort="dout:1" tgtId="node:23" tgtPort="in:0"/>
      <Link srcId="node:7" srcPort="dout:3" tgtId="node:41" tgtPort="din:4"/>
      <Link srcId="node:7" srcPort="dout:7" tgtId="node:41" tgtPort="din:3"/>
      <Link srcId="node:7" srcPort="dout:6" tgtId="node:41" tgtPort="din:2"/>
      <Link srcId="node:7" srcPort="dout:5" tgtId="node:41" tgtPort="din:1"/>
      <Link srcId="node:7" srcPort="dout:4" tgtId="node:41" tgtPort="din:0"/>
      <Link srcId="node:1" srcPort="dout:8" tgtId="node:7" tgtPort="din:0"/>
      <Link srcId="node:1" srcPort="dout:7" tgtId="node:7" tgtPort="din:3"/>
      <Link srcId="node:1" srcPort="dout:6" tgtId="node:7" tgtPort="din:2"/>
      <Link srcId="node:1" srcPort="dout:5" tgtId="node:7" tgtPort="din:1"/>
      <Link srcId="node:7" srcPort="dout:2" tgtId="node:4" tgtPort="in:0"/>
      <Link srcId="node:23" srcPort="out:0" tgtId="node:21" tgtPort="din:0"/>
      <Link srcId="node:29" srcPort="dout:0" tgtId="node:4" tgtPort="in:0"/>
      <Link srcId="node:7" srcPort="dout:1" tgtId="node:41" tgtPort="din:6"/>
      <Link srcId="node:41" srcPort="dout:0" tgtId="node:29" tgtPort="din:2"/>
      <Link srcId="node:41" srcPort="dout:1" tgtId="node:29" tgtPort="din:3"/>
      <Link srcId="node:41" srcPort="dout:2" tgtId="node:29" tgtPort="din:4"/>
      <Link srcId="node:7" srcPort="dout:11" tgtId="node:29" tgtPort="din:0"/>
      <Link srcId="node:7" srcPort="dout:11" tgtId="node:41" tgtPort="din:5"/>
      <Link srcId="node:43" srcPort="dout:0" tgtId="node:29" tgtPort="din:5"/>
      <Input key="node:1/cfg:outPorts/default" value="[{&quot;portId&quot;:&quot;dout:0&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;Score Factor&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:1&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;High Threshold&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:2&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;Medium Threshold&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:3&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;Low Threshold&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:4&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:5&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;Config&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:6&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;Lang&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:7&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;Filters&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:8&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;Selection&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:9&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;annotations&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:4/cfg:tile/default" value="[{&quot;id&quot;:&quot;ROOT#1#Chart&quot;,&quot;path&quot;:[&quot;Default&quot;],&quot;name&quot;:&quot;Chart&quot;}]"/>
      <Input key="node:4/in:0/evaluate" value="&quot;always&quot;"/>
      <Input key="node:7/cfg:inPorts/default" value="[{&quot;portId&quot;:&quot;din:0&quot;,&quot;portType&quot;:&quot;event[]&quot;,&quot;portLabel&quot;:&quot;Selected&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:1&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;Config&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;ignore&quot;},{&quot;portId&quot;:&quot;din:2&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;Lang&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;ignore&quot;},{&quot;portId&quot;:&quot;din:3&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;Filters&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;ignore&quot;}]"/>
      <Input key="node:7/cfg:outPorts/default" value="[{&quot;portId&quot;:&quot;dout:0&quot;,&quot;portType&quot;:&quot;event[]&quot;,&quot;portLabel&quot;:&quot;Anomaly Data&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:1&quot;,&quot;portType&quot;:&quot;event[]&quot;,&quot;portLabel&quot;:&quot;Trend Data&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:2&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;Trend Notify&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:3&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;incidentID&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:4&quot;,&quot;portType&quot;:&quot;number&quot;,&quot;portLabel&quot;:&quot;startEpoch&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:5&quot;,&quot;portType&quot;:&quot;number&quot;,&quot;portLabel&quot;:&quot;endEpoch&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:6&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;service&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:7&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;subService&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:8&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;dimVals&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:9&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;Computed Score Factor&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:10&quot;,&quot;portType&quot;:&quot;boolean&quot;,&quot;portLabel&quot;:&quot;isOutage&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:11&quot;,&quot;portType&quot;:&quot;event[]&quot;,&quot;portLabel&quot;:&quot;Incident Data&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:7/cfg:schema/default" value="&quot;var fields0 = \&quot;ts,dim_values,aggr_time,dow,metric_uom,computed_metric,computed_zscore,baseline_count,baseline_median,baseline_stddev,baseline_avg,baseline_min,baseline_max,dow_zscore,dow_count,dow_median,dow_stddev,dow_avg,dow_min,dow_max,dow_pwk_zscore,dow_pwk_count,dow_pwk_median,dow_pwk_stddev,dow_pwk_avg,dow_pwk_min,dow_pwk_max,service,percentile_actual_05,percentile_actual_95,percentile_actual_50,percentile_actual_98,percentile_actual_02,zscore,normalized_zscore,anomaly,_anomaly_value_,_feedback_\&quot;.split(\&quot;,\&quot;);\r\nfor (var i=0; i&lt;fields0.length; i++) {\r\n    fields0[i] = {\r\n        name  : fields0[i],\r\n        label : fields0[i],\r\n        type  : \&quot;string\&quot;\r\n    };\r\n}\r\nsetOutputSchema(\&quot;dout:0\&quot;, fields0);\r\n\r\nsetOutputSchema(\&quot;dout:1\&quot;, [{\r\n    name  : \&quot;_group_\&quot;,\r\n    label : \&quot;Group\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_epoch_\&quot;,\r\n    label : \&quot;Epoch Time\&quot;,\r\n    type  : \&quot;number\&quot;\r\n}, {\r\n    name  : \&quot;_time_\&quot;,\r\n    label : \&quot;GMT\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_value1_\&quot;,\r\n    label : \&quot;Metric Value\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_baseline1_\&quot;,\r\n    label : \&quot;Metric Baseline\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_uom1_\&quot;,\r\n    label : \&quot;Metric UoM\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_value2_\&quot;,\r\n    label : \&quot;Calls Value\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_baseline2_\&quot;,\r\n    label : \&quot;Calls Baseline\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_uom2_\&quot;,\r\n    label : \&quot;Calls UoM\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_diffval1_\&quot;,\r\n    label : \&quot;+/- Metric over Baseline\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_diffval2_\&quot;,\r\n    label : \&quot;+/- Calls over Baseline\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_diffpct1_\&quot;,\r\n    label : \&quot;% +/- Metric over Baseline\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_diffpct2_\&quot;,\r\n    label : \&quot;% +/- Calls over Baseline\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_anomalyFlag_\&quot;,\r\n    label : \&quot;Anomaly Flag\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}, {\r\n    name  : \&quot;_anomalyValue_\&quot;,\r\n    label : \&quot;Anomaly Marker\&quot;,\r\n    type  : \&quot;number\&quot;\r\n}, {\r\n    name  : \&quot;_iconState\&quot;,\r\n    label : \&quot;State\&quot;,\r\n    type  : \&quot;string\&quot;\r\n}]);\r\n\r\nvar fields11 = [\&quot;id\&quot;,\&quot;start_tm\&quot;,\&quot;end_tm\&quot;,\&quot;event_tm\&quot;,\&quot;max_severity\&quot;,\&quot;service,metric\&quot;];\r\nfor( var i=0; i &lt; fields11.length; i++ ){\r\n    fields11[i] = {\r\n        name:   fields11[i],\r\n        label:  fields11[i],\r\n        type:   \&quot;string\&quot;\r\n    };\r\n}\r\nsetOutputSchema( \&quot;dout:11\&quot;, fields11 );\r\n\r\n\r\n&quot;"/>
      <Input key="node:7/cfg:model/default" value="&quot;var CommonPlugin = Plugin(\&quot;Common\&quot;);\nvar CharterPlugin = Plugin(\&quot;Charter\&quot;);\nvar IncidentPlugin = Plugin(\&quot;Incident\&quot;);\n\n\nfunction hasCustomerCallsOnly(result)\n{\n    for (var i=0; i&lt;result.length; i++) {\n        if (result[i][\&quot;_value1_\&quot;] != null) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction getAdjustedFilters(filters, selected, leadingAdjustment, trailingAdjustment)\n{\n    filters = lang.clone(filters);\n    for (var i=0; i&lt;filters.length; i++) {\n        var filter = filters[i];\n        if (filter.name == \&quot;data.predefined\&quot;) {\n            filter.value = \&quot;adhoc\&quot;;\n        }\n        else if (filter.name == \&quot;data.timeRange\&quot;) {\n            var startEpoch = Number(selected[\&quot;start_epoch\&quot;]);\n            var endEpoch = Number(selected[\&quot;end_epoch\&quot;]);\n            if (endEpoch == 0) {\n                endEpoch = Math.round( new Date().getTime() / 1000 );\n            }\n            filter.value = \&quot;absolute:\&quot; + (startEpoch - leadingAdjustment) + \&quot;/\&quot; + (endEpoch + trailingAdjustment);\n        }\n    }\n    return filters;\n}\n\n\nfunction getIncidentDetail(config, language, selected, callback)\n{\n    CommonPlugin.pbShowProgressBar(\&quot;getIncidentDetail\&quot;, \&quot;Loading incident detail...\&quot;);   \n    IncidentPlugin.getIncidentDetail(selected, function(response) {\n        if (response.status == \&quot;OK\&quot;) {\n            var result = {};\n            for (var i=0; i&lt;response.value.length; i++) {\n                var record = response.value[i];\n                result[record[\&quot;event_epoch\&quot;]] = record[\&quot;incident\&quot;] +\&quot;||\&quot;+  record[\&quot;metric\&quot;] +\&quot;||\&quot;+  record[\&quot;score\&quot;] +\&quot;||\&quot;+  record[\&quot;level\&quot;] +\&quot;||\&quot;+  record[\&quot;state\&quot;];\n            }\n            callback(result);\n        }\n        else {\n            callback(null);\n        }\n        CommonPlugin.pbHideProgressBar(\&quot;getIncidentDetail\&quot;);   \n    });\n}\n\n\nfunction processTrendData(config, language, selected, result, callback)\n{\n    var anomDispVal = getMaxValueOnSecondaryAxis(result) * 1.5;\n    var startEpoch  = selected[\&quot;start_epoch\&quot;];\n    var endEpoch    = selected[\&quot;end_epoch\&quot;];\n    var metric      = selected[\&quot;metric\&quot;];\n\n    if (endEpoch == 0) {\n        endEpoch = Math.round( new Date().getTime() / 1000 );\n    }\n    \n    for( var r=0, len=result.length; r &lt; len; r++ ){\n        result[r][\&quot;_dim_val_\&quot;] = metric;   \n    }\n\n    if (config == null) config = {};\n    var callsOnly = hasCustomerCallsOnly(result);\n    var notifyEvt = {\n        series: {\n            \&quot;_value2_\&quot; : {\n                type: callsOnly ? \&quot;bar\&quot; : \&quot;area\&quot;,\n            }\n        },\n        leftAxisTitle  : (config[\&quot;primary-metric-label\&quot;] || \&quot;Metric\&quot;) + \&quot; / \&quot; + (config[\&quot;primary-baseline-label\&quot;] || \&quot;Metric Baseline\&quot;),\n        rightAxisTitle : (config[\&quot;secondary-metric-label\&quot;] || \&quot;Calls\&quot;) + \&quot; / \&quot; + (config[\&quot;secondary-baseline-label\&quot;] || \&quot;Call Baseline\&quot;),\n    };\n    setOutput(\&quot;dout:2\&quot;, notifyEvt);\n\n    getIncidentDetail(config, language, selected, function(detail) {\n        if (detail != null) {\n            for (var i=0, n=result.length; i&lt;n; i++) {\n                var record = result[i];\n                var obj = detail[record[\&quot;_epoch_\&quot;]];\n                var _score      = null;\n                var _incident   = null;\n                var _metric     = null;\n                var _level      = null;\n                var _state      = null;\n                var _isMatch    = false;\n                // var _iconState  = \&quot;\&quot;;\n                \n                if( obj &amp;&amp; obj != null &amp;&amp; obj.indexOf(\&quot;||\&quot;) &gt; 0 ){\n                    _incident   = obj.split(\&quot;||\&quot;)[0];\n                    _metric     = obj.split(\&quot;||\&quot;)[1];\n                    _score      = obj.split(\&quot;||\&quot;)[2];\n                    _level      = obj.split(\&quot;||\&quot;)[3];\n                    _state      = obj.split(\&quot;||\&quot;)[4];\n                    _isMatch    = true;\n                    //  _iconState  = \&quot;anomaly\&quot;;\n                }\n                \n                record[\&quot;_anomalyFlag_\&quot;]     = _isMatch;\n                record[\&quot;_isAnomaly_\&quot;]       = _isMatch;\n                \n                if( _incident != null ){\n                    record[\&quot;_incident_\&quot;]    = _incident;\n                } else {\n                    record[\&quot;_incident_\&quot;]    = \&quot;\&quot;;   \n                }\n                \n                if (_score != null) {\n                    record[\&quot;_chrisScore_\&quot;]  = _score;\n                }\n                else {\n                    record[\&quot;_chrisScore_\&quot;]  = 0;\n                }\n                \n                if( _level != null &amp;&amp; _level != \&quot;\&quot; &amp;&amp; _state.toLowerCase() != \&quot;warmup\&quot; &amp;&amp; _state.toLowerCase() != \&quot;cooldown\&quot;  ){\n                    record[\&quot;_chrislevel_\&quot;]          = _level.toLowerCase();\n                    record[\&quot;_level_\&quot;]               = _level;\n                    record[\&quot;_anomalyValue_\&quot;]        = anomDispVal;\n                    switch( _level.toLowerCase() ){\n                        case \&quot;high\&quot;:\n                            record[\&quot;_chrisValueH_\&quot;] = anomDispVal;\n                            break;\n                        case \&quot;medium\&quot;:\n                            record[\&quot;_chrisValueM_\&quot;] = anomDispVal;\n                            break;\n                        case \&quot;low\&quot;:\n                            record[\&quot;_chrisValueL_\&quot;] = anomDispVal;\n                            break;\n                    }\n                \n                } else if ( ( _level == null || _level )  == \&quot;\&quot; &amp;&amp; _state.toLowerCase() == \&quot;active\&quot; ){\n                    \n                    record[\&quot;_chrisValueH_\&quot;] = null;\n                    record[\&quot;_chrisValueM_\&quot;] = null;\n                    record[\&quot;_chrisValueL_\&quot;] = anomDispVal;\n                    record[\&quot;_chrisValueWU_\&quot;] = null;\n                    record[\&quot;_chrisValueCD_\&quot;] = null;\n                    \n                } else {\n                    record[\&quot;_chrisLevel_\&quot;]   = \&quot;\&quot;;\n                    if(  _state &amp;&amp; _state != null ){\n                        if ( _state.toLowerCase() == \&quot;warmup\&quot; ){\n                            \n                            record[\&quot;_chrisValueH_\&quot;] = null;\n                            record[\&quot;_chrisValueM_\&quot;] = null;\n                            record[\&quot;_chrisValueL_\&quot;] = null;\n                            record[\&quot;_chrisValueWU_\&quot;] = anomDispVal;\n                            record[\&quot;_chrisValueCD_\&quot;] = null;\n                            \n                        } else if ( _state.toLowerCase() == \&quot;cooldown\&quot; ){\n                            \n                            record[\&quot;_chrisValueH_\&quot;] = null;\n                            record[\&quot;_chrisValueM_\&quot;] = null;\n                            record[\&quot;_chrisValueL_\&quot;] = null;\n                            record[\&quot;_chrisValueWU_\&quot;] = null;\n                            record[\&quot;_chrisValueCD_\&quot;] = anomDispVal;\n                            \n                        }\n                    }\n                    //_iconState = \&quot;cooldown\&quot;;\n                }\n                //record[\&quot;_iconState_\&quot;] = _iconState;\n            }\n        }\n        callback(null, result);\n    });\n}\n\n\nfunction getTrendData(config, language, filters, selected, callback)\n{\n    var LEADING = 1*60*60;\n    var TRAILING = 1*60*60;\n    filters = getAdjustedFilters(filters, selected, LEADING, TRAILING);\n    CommonPlugin.pbShowProgressBar(\&quot;getTrendAnalysis\&quot;, \&quot;Loading trend data...\&quot;);   \n    IncidentPlugin.getTrendAnalysis(selected, filters, function(response) {\n        if (response.status == \&quot;OK\&quot;) {\n            processTrendData(config, language, selected, response.value, callback);\n        }\n        CommonPlugin.pbHideProgressBar(\&quot;getTrendAnalysis\&quot;);   \n    });\n}\n\n\nfunction getIncidentAnomalies(filters, selected, callback){\n\n    if( selected &amp;&amp; selected != null ){\n        var startEpoch = selected[&apos;start_epoch&apos;];\n        var endEpoch = selected[&apos;end_epoch&apos;];\n        CommonPlugin.pbShowProgressBar(\&quot;getIncidentAnomalies\&quot;, \&quot;Loading incident anomalies...\&quot;);   \n        IncidentPlugin.getIncidentAnomalies( filters, startEpoch, endEpoch, function(response){\n            if (response.status == \&quot;OK\&quot; &amp;&amp; response.value != null) {\n                var result = response.value;\n                callback(result);\n            }\n            else {\n                console.error(\&quot;getIncidentAnomalies error: \&quot; + response.error);\n                callback([]);\n            }\n            CommonPlugin.pbHideProgressBar(\&quot;getIncidentAnomalies\&quot;);\n        });  \n        \n    }\n    \n}\n\n\nfunction getIncidentData(incidentId, filters, callback)\n{\n    if( incidentId != null &amp;&amp; incidentId != \&quot;\&quot; ){\n        CommonPlugin.pbShowProgressBar(\&quot;getAnomalyIncidentsByID\&quot;, \&quot;Loading selected incident data...\&quot;);   \n        IncidentPlugin.getAnomalyIncidentsByID(filters, incidentId, function(response){\n            if (response.status == \&quot;OK\&quot;) {\n                callback(response.value);\n            } else {\n                console.error(\&quot;getIncidentData error: \&quot; + response.error);\n                callback([]);   \n            }\n            CommonPlugin.pbHideProgressBar(\&quot;getAnomalyIncidentsByID\&quot;);\n        });\n    } else {\n        callback([]);   \n    }\n}\n\n\nfunction getMaxValueOnSecondaryAxis(result)\n{\n    var max2 = 1;\n    for (var i=0, len=result.length; i&lt;len; i++) {\n        var record = result[i];\n        if (max2 &lt; record._value2_) {\n            max2 = record._value2_;\n        }\n        if (max2 &lt; record._baseline2_) {\n            max2 = record._baseline2_;\n        }\n    }\n    if( max2 &lt; 1 ) max2 = 1;\n    return max2;\n}\n\n\nfunction processResult(result)\n{\n    //if (result.timeIntervalAndFormat == null || result.trendData == null ) return;\n    if (result.trendData == null ) return;\n\n    var max2 = getMaxValueOnSecondaryAxis(result.trendData) * 1.5;\n    for (var i=0, len=result.trendData.length; i&lt;len; i++) {\n        var record          = result.trendData[i];\n        var isMatch         = false;\n        var anomalyValue    = null;\n        var level           = null;\n        var incident        = \&quot;---\&quot;;\n        var metric          = record[\&quot;_dim_val_\&quot;];\n        var score           = null;\n        var anomalyState    = \&quot;\&quot;;\n        var _iconState      = \&quot;---\&quot;;\n       \n        for( var ia=0, alen=result.incidentAnomalies.length; ia &lt; alen; ia++ ){\n            var incAnom = result.incidentAnomalies[ia]; \n            if( parseInt( incAnom[\&quot;event_tm\&quot;] ) == parseInt( record[\&quot;_epoch_\&quot;] ) ){\n                isMatch         = true;\n                anomalyValue    = max2;\n                level           = incAnom[\&quot;max_severity\&quot;].toLowerCase();\n                incident        = incAnom[\&quot;id\&quot;];\n                score           = incAnom[\&quot;score\&quot;];\n                anomalyState    = incAnom[\&quot;state\&quot;].toLowerCase();\n            }\n        }\n        \n        record[\&quot;_anomalyFlag_\&quot;]     = isMatch;\n        record[\&quot;_isAnomaly_\&quot;]       = isMatch;\n        record[\&quot;_anomalyValue_\&quot;]    = anomalyValue;\n        record[\&quot;_level_\&quot;]           = level;\n        record[\&quot;_chrisLevel_\&quot;]      = level;\n        \n        if( incident != \&quot;---\&quot; ){\n             _iconState = anomalyState;\n            if( anomalyState == \&quot;active\&quot; ){\n                _iconState = \&quot;anomaly\&quot;;\n            }\n        }\n        \n        if( level &amp;&amp; level != null  ){\n            switch( level.toLowerCase() ){\n                case \&quot;high\&quot;:\n                    record[\&quot;_chrisValueH_\&quot;] = max2;\n                    record[\&quot;_chrisValueM_\&quot;] = null;\n                    record[\&quot;_chrisValueL_\&quot;] = null;\n                    break;\n                case \&quot;medium\&quot;:\n                    record[\&quot;_chrisValueH_\&quot;] = null;\n                    record[\&quot;_chrisValueM_\&quot;] = max2;\n                    record[\&quot;_chrisValueL_\&quot;] = null;\n                    break;\n                case \&quot;low\&quot;:\n                    record[\&quot;_chrisValueH_\&quot;] = null;\n                    record[\&quot;_chrisValueM_\&quot;] = null;\n                    record[\&quot;_chrisValueL_\&quot;] = max2;\n                    break;\n            }\n            \n           record[\&quot;_chrisValueWU_\&quot;] = null;\n           record[\&quot;_chrisValueCD_\&quot;] = null;\n            \n        }\n        \n        if ( anomalyState == \&quot;warmup\&quot; ){\n            record[\&quot;_chrisValueH_\&quot;] = null;\n            record[\&quot;_chrisValueM_\&quot;] = null;\n            record[\&quot;_chrisValueL_\&quot;] = null;\n            record[\&quot;_chrisValueWU_\&quot;] = max2;\n            record[\&quot;_chrisValueCD_\&quot;] = null;\n            \n        } else if ( anomalyState == \&quot;cooldown\&quot; ){\n            record[\&quot;_chrisValueH_\&quot;] = null;\n            record[\&quot;_chrisValueM_\&quot;] = null;\n            record[\&quot;_chrisValueL_\&quot;] = null;\n            record[\&quot;_chrisValueWU_\&quot;] = null;\n           record[\&quot;_chrisValueCD_\&quot;] = max2;\n        }\n        \n        record[\&quot;_iconState_\&quot;] = _iconState;\n\n        if( score &amp;&amp; score != null ){\n            record[\&quot;_chrisScore_\&quot;] = score;   \n        }\n        \n        record[\&quot;_incident_\&quot;]        = incident;\n        record[\&quot;_metric_\&quot;]          = metric;\n        \n\n    }\n    setOutput(\&quot;dout:0\&quot;, result.anomalyDetailData);\n    setOutput(\&quot;dout:1\&quot;, result.trendData);\n    setOutput(\&quot;dout:11\&quot;, result.incidentData);\n}\n\nsetOutput(\&quot;dout:0\&quot;, []);\nsetOutput(\&quot;dout:1\&quot;, []);\n\nif (port == \&quot;din:0\&quot;) {\n    var selection = getInput(\&quot;din:0\&quot;);\n    if ( selection != null &amp;&amp; selection.length == 1  ) {\n        var config = getInput(\&quot;din:1\&quot;);\n        var language = getInput(\&quot;din:2\&quot;);\n        var filters = getInput(\&quot;din:3\&quot;);\n        var result = {\n            timeIntervalAndFormat   : null,\n            trendData               : [],\n            anomalyDetailData       : [],\n            incidentAnomalies       : [],\n            incidentData            : [],\n        };\n        var incidentId= \&quot;\&quot;;\n        if( selection[0][\&quot;id\&quot;] &amp;&amp; selection[0][\&quot;id\&quot;] != null &amp;&amp; selection[0][\&quot;id\&quot;] != \&quot;\&quot; ){\n            incidentId = selection[0][\&quot;id\&quot;].toString();\n        } \n\n        getTrendData(config, language, filters, selection[0], function(timeIntervalAndFormat, trendData) {\n            //result.timeIntervalAndFormat = timeIntervalAndFormat;\n            result.trendData = trendData;\n            if( !selection[0][\&quot;id\&quot;] || selection[0][\&quot;id\&quot;] == null || selection[0][\&quot;id\&quot;] == \&quot;\&quot; ){\n                getIncidentAnomalies(filters, selection[0], function(incidentAnomalyData){\n                    result.incidentAnomalies = incidentAnomalyData;\n                    processResult(result);\n                    \n                });\n            }\n            else {\n                if (incidentId != null) {\n                    var tmp = filters.slice(0);\n                    tmp.push({\n                        name  : \&quot;$.cacheConfig\&quot;,\n                        value : {\n                            key1 : incidentId,\n                            key2 : \&quot;AnomalyIncidentsByID:#\&quot;,\n                            type : selection[0][\&quot;end_epoch\&quot;] &gt; 0 ? \&quot;persistent\&quot; : \&quot;transient\&quot;,\n                        }\n                    });\n                    getIncidentData(incidentId, tmp, function(incidentData) {\n                        result.incidentData = incidentData;\n                        processResult(result);\n                    });\n                }\n                else {\n                    processResult(result);\n                }\n            }\n        });\n        \n        setOutput(\&quot;dout:3\&quot;, incidentId);  \n\n        if ( selection[0][\&quot;start_epoch\&quot;] &amp;&amp; selection[0][\&quot;start_epoch\&quot;] &gt; 0 ) {\n            \n            var start       = selection[0][\&quot;start_epoch\&quot;];\n            \n            var end         = 0;\n            if ( selection[0][\&quot;end_epoch\&quot;] &amp;&amp; selection[0][\&quot;end_epoch\&quot;] &gt; 0 ) {\n                end         = selection[0][\&quot;end_epoch\&quot;] + 600;\n            } else {\n                end         = new Date().getTime() / 1000;\n            }\n            \n            var dimVals     = selection[0][\&quot;dim_values\&quot;];\n            var service     = null;\n            var subService  = null;\n            \n            for( var i=0, len = filters.length; i &lt; len; i++ ){\n                switch( filters[i][\&quot;name\&quot;] ){\n                    case \&quot;data.svc\&quot;:\n                        service = filters[i][\&quot;value\&quot;];\n                        break;\n                    case \&quot;data.comp\&quot;:\n                        subService = filters[i][\&quot;value\&quot;];\n                        break;\n                }\n            }\n            \n            if( selection[0][\&quot;service\&quot;] &amp;&amp; selection[0][\&quot;service\&quot;] != null &amp;&amp; selection[0][\&quot;service\&quot;] != \&quot;\&quot; ){\n                service     = selection[0][\&quot;service\&quot;];\n            }\n            \n            if( selection[0][\&quot;sub_service\&quot;] &amp;&amp; selection[0][\&quot;sub_service\&quot;] != null &amp;&amp; selection[0][\&quot;sub_service\&quot;] != \&quot;\&quot; ){\n                subService  = selection[0][\&quot;sub_service\&quot;]\n            }\n            \n            if( \n                ( start     &amp;&amp; start &gt; 0 ) &amp;&amp; \n                ( end       &amp;&amp; end &gt; 0 ) &amp;&amp;\n                ( dimVals   &amp;&amp; dimVals != null &amp;&amp; dimVals != \&quot;\&quot; ) &amp;&amp;\n                ( service   &amp;&amp; service != null &amp;&amp; service != \&quot;\&quot; ) // &amp;&amp;\n                //( dimVals   &amp;&amp; dimVals != null &amp;&amp; dimVals != \&quot;\&quot; )\n            ) {\n                \n                setOutput(\&quot;dout:4\&quot;, ( start - 3600 ) );\n                setOutput(\&quot;dout:5\&quot;, end );\n                setOutput(\&quot;dout:6\&quot;, service);\n                setOutput(\&quot;dout:7\&quot;, subService);\n                setOutput(\&quot;dout:8\&quot;, dimVals);\n                \n            }\n            \n            setOutput(\&quot;dout:9\&quot;, selection[0][\&quot;score_factor\&quot;]);\n            if( selection[0][\&quot;type\&quot;] ) {\n                var isOutage = ( selection[0][\&quot;type\&quot;].toLowerCase() == \&quot;outage\&quot; ) || false;\n                    setOutput( \&quot;dout:10\&quot;, isOutage );\n            } else {\n                setOutput( \&quot;dout:10\&quot;, false );\n            }\n\n        }\n    }\n}\n\n\n&quot;"/>
      <Input key="node:21/cfg:inPorts/default" value="[{&quot;portId&quot;:&quot;din:0&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;TrendData&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:1&quot;,&quot;portType&quot;:&quot;number&quot;,&quot;portLabel&quot;:&quot;RangeStart&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:2&quot;,&quot;portType&quot;:&quot;number&quot;,&quot;portLabel&quot;:&quot;RangeEnd&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:23/in:1/evaluate" value="&quot;always&quot;"/>
      <Input key="node:29/cfg:inPorts/default" value="[{&quot;portId&quot;:&quot;din:0&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;incidentData&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:1&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;TrendData&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:2&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;outageData&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:3&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;highLow&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:4&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;highLow_2&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:5&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;annotations&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:29/cfg:outPorts/default" value="[{&quot;portId&quot;:&quot;dout:0&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;notification&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:29/cfg:model/default" value="&quot;if( port != null ) {\n\n    var incidentData        = getInput(\&quot;din:0\&quot;);\n    var trendData           = getInput(\&quot;din:1\&quot;);\n    var outageData          = getInput(\&quot;din:2\&quot;);\n    var highLow             = getInput(\&quot;din:3\&quot;) || [0,0];\n    var highLow_2           = getInput(\&quot;din:4\&quot;) || [0,1];\n    var data = [];\n    \n    if( outageData != null &amp;&amp; outageData.length &gt; 0 ){\n        for( var od=0; od &lt; outageData.length; od++ ){\n            data.push( outageData[od] );   \n        }\n    }\n    \n    if( incidentData != null &amp;&amp; incidentData.length &gt; 0 ){\n        for( var d=0; d &lt; incidentData.length; d++ ){\n            data.push( incidentData[d] );   \n        }    \n    } \n    \n    if( ( trendData != null &amp;&amp; trendData.length &gt; 0 ) &amp;&amp; ( data != null &amp;&amp; data.length &gt; 0 ) ){\n        \n        trendData.sort(function(a,b) {\n            if (a[\&quot;_epoch_\&quot;] &gt; b[\&quot;_epoch_\&quot;]) return 1;\n            else if (a[\&quot;_epoch_\&quot;] &lt; b[\&quot;_epoch_\&quot;]) return -1;\n            return 0;\n        });\n\n        var rangeMode   = ( highLow[0] &gt;= 0 ) ? \&quot;nonnegative\&quot; : \&quot;normal\&quot;;\n        var rangeMode_2 = ( highLow_2[0] &gt;= 0 ) ? \&quot;nonnegative\&quot; : \&quot;normal\&quot;;\n        \n        var axisRange   = [ highLow[0], highLow[1]*1.05];  \n        \n        highLow_L       = getMetricRange( trendData, \&quot;_chrisValueH_\&quot; );\n        highLow_M       = getMetricRange( trendData, \&quot;_chrisValueM_\&quot; );\n        highLow_H       = getMetricRange( trendData, \&quot;_chrisValueL_\&quot; );\n        highLow_WU      = getMetricRange( trendData, \&quot;_chrisValueWU_\&quot; );\n        highLow_CD      = getMetricRange( trendData, \&quot;_chrisValueCD_\&quot; );\n        \n        if( highLow_L[1] &gt; highLow_2[1] ) highLow_2[1] = highLow_L[1];\n        if( highLow_M[1] &gt; highLow_2[1] ) highLow_2[1] = highLow_M[1];\n        if( highLow_H[1] &gt; highLow_2[1] ) highLow_2[1] = highLow_H[1];\n        if( highLow_WU[1] &gt; highLow_2[1] ) highLow_2[1] = highLow_WU[1];\n        if( highLow_CD[1] &gt; highLow_2[1] ) highLow_2[1] = highLow_CD[1];\n        \n        var axisRange_2 = [ highLow_2[0], highLow_2[1]];\n        \n        var changeConfig    = {\n                \t               leftAxisRange:           axisRange,\n                \t               leftAxisRangeMode:       rangeMode,\n                \t               rightAxisRange:          axisRange_2,\n                \t               rightAxisRangeMode:      rangeMode_2,\n                \t               annotations:             getInput(&apos;din:5&apos;) || []\n                \t\t      } \n        \n        \n        var firstEpoch  = 0;\n        var lastEpoch   = 0;\n        \n        for ( var ee=0, len = trendData.length; ee &lt; len; ee++ ){\n            \n            if( firstEpoch == 0 || trendData[ee][\&quot;_epoch_\&quot;] &lt; firstEpoch ){\n                firstEpoch = trendData[ee][\&quot;_epoch_\&quot;];   \n            }\n            \n            if( trendData[ee][\&quot;_epoch_\&quot;] &gt; lastEpoch ){\n                lastEpoch = trendData[ee][\&quot;_epoch_\&quot;];    \n            }\n        }\n                \n        for( var i = 0, d_len = data.length; i &lt; d_len; i++ ){\n            var obj             = data[i];\n            var id              = obj[\&quot;id\&quot;];\n            var start           = parseInt( data[i][\&quot;start_tm\&quot;] ) - 150;\n            var end             = parseInt( obj[\&quot;end_tm\&quot;] ) + 150;\n            var event           = obj[\&quot;event_tm\&quot;];\n            var level           = obj[\&quot;max_severity\&quot;];\n            var metric          = obj[\&quot;metric\&quot;];\n            var color           = \&quot;#818688\&quot;;\n            var fill            = \&quot;rgba(213,214,214,0.25)\&quot;;\n            var border          = \&quot;solid\&quot;;\n            var borderWidth     = 2;\n            var value           = 0.90;\n\n           if( end &lt;= 150 ){\n                if( parseInt( lastEpoch ) &gt; 0 ){\n                    end = parseInt(lastEpoch) + 150; \n                } else {\n                    end = ( Math.round( new Date().getTime() / 1000 ) + 150 )\n                }\n           }\n           \n            if( end &gt; parseInt( lastEpoch ) ){\n                end = parseInt(lastEpoch) + 150; \n            }\n            \n            if( level &amp;&amp; level != null ){\n                if( level.toLowerCase() == \&quot;high\&quot; ){\n                    color       = \&quot;#EC4E4E\&quot;;\n                    fill        = \&quot;rgba(236,78,78,0)\&quot;;\n                    border      = \&quot;solid\&quot;;\n                    borderWidth = 0;\n                    value       = 1;\n                    \n                } else if( level.toLowerCase() == \&quot;medium\&quot; ){\n                    color       = \&quot;#FFA500\&quot;;\n                    fill        = \&quot;rgba(255,181,162,0)\&quot;;\n                    border      = \&quot;solid\&quot;;\n                    borderWidth = 0;\n                    value       = 1;\n                    \n                } else if( level.toLowerCase() == \&quot;low\&quot; ){\n                    color       = \&quot;#FFC966\&quot;;\n                    fill        = \&quot;rgba(255,255,191,0)\&quot;;\n                    border      = \&quot;solid\&quot;;\n                    borderWidth = 0;\n                    value       = 1;\n                    \n                } else if( level.toLowerCase() == \&quot;outage\&quot; ){\n                    color       = \&quot;#7D0110\&quot;;\n                    fill        = \&quot;rgba(255,127,0,0)\&quot;;\n                    border      = \&quot;solid\&quot;;\n                    borderWidth = 1;\n                    value       = .99;\n                }\n                \n            } \n\n            if( metric != null &amp;&amp; metric == \&quot;*|Customer Call Volume\&quot;){\n                color       = \&quot;#818688\&quot;;\n                fill        = \&quot;rgba(213,214,214,0)\&quot;;\n                border      = \&quot;dot\&quot;;\n                borderWidth = 0;\n                value       = 0.88;\n            }\n                \n            if( start &lt; lastEpoch &amp;&amp; end &lt;= lastEpoch + 300 &amp;&amp; level != \&quot;\&quot; )  \t\t          \n                changeConfig.annotations.push({ \n                        \&quot;type\&quot;: \&quot;rectangle\&quot;, \n                        \&quot;label\&quot;: \&quot;Incident: \&quot; + id, \n                        \&quot;axis\&quot;: \&quot;bottom\&quot;, \n                        \&quot;value\&quot;: value, \n                        \&quot;range\&quot;: [(start * 1000), (end * 1000)], \n                        \&quot;color\&quot;: color, \n                        \&quot;fillColor\&quot;: fill, \n                        \&quot;width\&quot;: borderWidth, \n                        \&quot;lineStyle\&quot;: border\n                        });\n        }\n    }\n    \n    \n    if( trendData != null &amp;&amp; trendData.length &gt; 0 ){\n        setOutput( \&quot;dout:0\&quot;, changeConfig );\n    }\n    \n}\n\nfunction getMetricRange( iData, iField ){\n    var iLow    = 0;\n    var iHigh   = 1;\n    \n    for( var c=0, clen=iData.length; c&lt;clen; c++ ){\n        var val = iData[c][iField];\n        if( val &lt; iLow ){\n            iLow = val;   \n        }\n        \n        if( val &gt; iHigh ){\n            iHigh = val;\n        }\n        \n    }\n    \n    return [ iLow , ( iHigh * 1.15 ) ];\n}&quot;"/>
      <Input key="node:41/cfg:inPorts/default" value="[{&quot;portId&quot;:&quot;din:0&quot;,&quot;portType&quot;:&quot;number&quot;,&quot;portLabel&quot;:&quot;stEpoch&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:1&quot;,&quot;portType&quot;:&quot;number&quot;,&quot;portLabel&quot;:&quot;edEpoch&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:2&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;service&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:3&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;subService&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:4&quot;,&quot;portType&quot;:&quot;string&quot;,&quot;portLabel&quot;:&quot;incidentId&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:5&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;incidentData&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;din:6&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;trendData&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:41/cfg:model/default" value="&quot;var IncidentPlugin = Plugin(\&quot;Incident\&quot;);\r\n\r\n    var stEpoch     = getInput(\&quot;din:0\&quot;) || \&quot;\&quot;;\r\n    var edEpoch     = getInput(\&quot;din:1\&quot;) || \&quot;\&quot;;\r\n    var service     = getInput(\&quot;din:2\&quot;) || \&quot;\&quot;;\r\n    var subService  = getInput(\&quot;din:3\&quot;) || \&quot;\&quot;;\r\n    var incidentId  = getInput(\&quot;din:4\&quot;) || null;\r\n    var incidents   = getInput(\&quot;din:5\&quot;) || [];\r\n    var trendData   = getInput(\&quot;din:6\&quot;) || [];\r\n    var highLow     = [0,0];\r\n    var highLow_2   = [0,0];\r\n\r\n// UPDATE only on din:5\r\nif( triggeredPorts.indexOf(\&quot;din:5\&quot;) != -1 ){\r\n//if( port != null ){\r\n    \r\n    setOutput( \&quot;dout:0\&quot;, [] );\r\n    if( incidentId == null || incidentId == \&quot;\&quot; || incidents == null || incidents.length == 0 ) { \r\n        return;\r\n    }\r\n    \r\n    highLow = getMetricRange( trendData, \&quot;_value1_\&quot; );\r\n    setOutput( \&quot;dout:1\&quot;, highLow );\r\n    \r\n    highLow_2 = getMetricRange( trendData, \&quot;_value2_\&quot; );\r\n    setOutput( \&quot;dout:2\&quot;, highLow_2 );\r\n    \r\n    \r\n    if( stEpoch == \&quot;\&quot; ) return;\r\n        stEpoch = stEpoch - 3600;\r\n    if( edEpoch == \&quot;\&quot; ){\r\n        edEpoch = new Date().getTime();   \r\n    } else {\r\n        edEpoch = edEpoch + 3600;\r\n    }\r\n    \r\n    var filters = [\r\n        {\r\n            \&quot;name\&quot;: \&quot;data.comp\&quot;,\r\n            \&quot;type\&quot;: \&quot;enumeration\&quot;,\r\n            \&quot;value\&quot;: subService\r\n        },\r\n        {\r\n            \&quot;name\&quot;: \&quot;data.svc\&quot;,\r\n            \&quot;type\&quot;: \&quot;enumeration\&quot;,\r\n            \&quot;value\&quot;: service\r\n        },\r\n        {\r\n            \&quot;name\&quot;: \&quot;data.timeRange\&quot;,\r\n            \&quot;type\&quot;: \&quot;popup:timeinterval\&quot;,\r\n            \&quot;value\&quot;: \&quot;absolute:\&quot; + stEpoch + \&quot;/\&quot; + edEpoch,\r\n            \&quot;timezoneOffset\&quot;: \&quot;\&quot;\r\n        },\r\n        {\r\n            \&quot;name\&quot;: \&quot;$.cacheConfig\&quot;,\r\n            \&quot;value\&quot;: {\r\n                key1 : incidentId,\r\n                key2 : \&quot;IncidentNotifications:#\&quot;,\r\n                type : incidents[0][\&quot;end_tm\&quot;] &gt; 0 ? \&quot;persistent\&quot; : \&quot;transient\&quot;,\r\n            }\r\n        }\r\n    ];\r\n     IncidentPlugin.getIncidentNotifications(filters, incidentId, function(response) {\r\n        if (response.status == \&quot;OK\&quot;) {\r\n            var result = response.value;\r\n            result.sort(function (x, y) {\r\n                return x[&apos;event_tm&apos;] - y[&apos;event_tm&apos;];\r\n            });\r\n           parseOutage(result);\r\n        }\r\n    });\r\n}\r\n\r\nfunction parseOutage( data ){\r\n    \r\n    if( data == null || data.length == 0 ){\r\n        setOutput( \&quot;dout:0\&quot;, [] );   \r\n        return;\r\n    }\r\n    \r\n    var start   = 0;\r\n    var end     = 0;\r\n    var lastEvt = 0;\r\n    \r\n    for ( var dc=0; dc &lt; data.length; dc++ ){\r\n        var dObj = data[dc];\r\n        \r\n        //if( dObj[\&quot;target_name\&quot;].toLowerCase() != \&quot;email\&quot; ){\r\n        if( dObj[\&quot;target_interface\&quot;].toLowerCase() == \&quot;snmp\&quot; ){\r\n            \r\n            //var eventTm = Math.round( new Date( dObj[\&quot;audit_ts\&quot;] ).getTime() / 1000 );\r\n            var eventTm = dObj[&apos;event_tm&apos;];\r\n            var inciEnd = parseInt( incidents[0][\&quot;end_tm\&quot;] );\r\n            \r\n            if( start == 0 || start &gt; eventTm ){\r\n                start = eventTm;  \r\n            } \r\n            \r\n            \r\n            if( edEpoch != \&quot;\&quot; &amp;&amp; ( parseInt( edEpoch ) - 600 ) &gt; 0 &amp;&amp; ( parseInt( edEpoch ) - 600 ) &lt; inciEnd ){\r\n                end = parseInt( edEpoch ) - 3600;\r\n            } \r\n            \r\n            if( end == 0 || end &lt; inciEnd ){\r\n                end = inciEnd;   \r\n            }\r\n            \r\n            if( end == 0 ){\r\n                end = eventTm;   \r\n            }\r\n            \r\n            if( start == end ){\r\n                start = start - 50;\r\n                end = end + 50;\r\n            }\r\n            \r\n            lastEvt = eventTm;\r\n\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    dataOut =   [\r\n                    {\r\n                        \&quot;max_severity\&quot;:     \&quot;Outage\&quot;,\r\n                        \&quot;start_tm\&quot;:         start,\r\n                        \&quot;id\&quot;:               incidentId,\r\n                        \&quot;end_tm\&quot;:           end,\r\n                        \&quot;event_tm\&quot;:         lastEvt\r\n                    }\r\n                ] ;\r\n                \r\n    if( start &gt; 0 &amp;&amp; end &gt; 0 &amp;&amp; end &gt;= start ){\r\n        setOutput( \&quot;dout:0\&quot;, dataOut );\r\n    }\r\n}\r\n\r\nfunction getMetricRange( iData, iField ){\r\n    var iLow    = 0;\r\n    var iHigh   = 1;\r\n    \r\n    for( var c=0, clen=iData.length; c&lt;clen; c++ ){\r\n        var val = iData[c][iField];\r\n        if( val &lt; iLow ){\r\n            iLow = val;   \r\n        }\r\n        \r\n        if( val &gt; iHigh ){\r\n            iHigh = val;\r\n        }\r\n        \r\n    }\r\n    \r\n    return [ iLow , ( iHigh * 1.15 ) ];\r\n}&quot;"/>
      <Input key="node:41/cfg:outPorts/default" value="[{&quot;portId&quot;:&quot;dout:0&quot;,&quot;portType&quot;:&quot;any[]&quot;,&quot;portLabel&quot;:&quot;outageData&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:1&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;highLow&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;},{&quot;portId&quot;:&quot;dout:2&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;highLow_2&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:43/cfg:inPorts/default" value="[{&quot;portId&quot;:&quot;din:0&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;notifyIn&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:43/cfg:outPorts/default" value="[{&quot;portId&quot;:&quot;dout:0&quot;,&quot;portType&quot;:&quot;any&quot;,&quot;portLabel&quot;:&quot;annotations&quot;,&quot;portValue&quot;:&quot;&quot;,&quot;portTrigger&quot;:&quot;always&quot;}]"/>
      <Input key="node:43/cfg:model/default" value="&quot;if( port == &apos;din:0&apos; ){\n    \n    var notifyObj = getInput( \&quot;din:0\&quot; );   \n    if( notifyObj[&apos;type&apos;] &amp;&amp; notifyObj[&apos;type&apos;] == &apos;annotation&apos; ){\n        \n        if( notifyObj[&apos;changeConfig&apos;]){\n            var chgConf = notifyObj[&apos;changeConfig&apos;];\n            var annotations = chgConf[&apos;annotations&apos;] || [];\n            \n            setOutput( &apos;dout:0&apos;, annotations );   \n        }\n    \n    }\n    \n}&quot;"/>
      <Schema id="node:7/din:0">
        <JSON value="{&quot;name&quot;:&quot;dim_values&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;dim_values&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;startedepoch&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;startedepoch&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;endedepoch&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;endedepoch&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;started&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;started&quot;,&quot;type&quot;:&quot;date&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;ended&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;ended&quot;,&quot;type&quot;:&quot;date&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;service&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;service&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;anomalies&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;anomalies&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;score&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;score&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;maxscore&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;maxscore&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
      </Schema>
      <Schema id="node:7/dout:0">
        <JSON value="{&quot;name&quot;:&quot;ts&quot;,&quot;label&quot;:&quot;ts&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dim_values&quot;,&quot;label&quot;:&quot;dim_values&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;aggr_time&quot;,&quot;label&quot;:&quot;aggr_time&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow&quot;,&quot;label&quot;:&quot;dow&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;metric_uom&quot;,&quot;label&quot;:&quot;metric_uom&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;computed_metric&quot;,&quot;label&quot;:&quot;computed_metric&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;computed_zscore&quot;,&quot;label&quot;:&quot;computed_zscore&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;baseline_count&quot;,&quot;label&quot;:&quot;baseline_count&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;baseline_median&quot;,&quot;label&quot;:&quot;baseline_median&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;baseline_stddev&quot;,&quot;label&quot;:&quot;baseline_stddev&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;baseline_avg&quot;,&quot;label&quot;:&quot;baseline_avg&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;baseline_min&quot;,&quot;label&quot;:&quot;baseline_min&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;baseline_max&quot;,&quot;label&quot;:&quot;baseline_max&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_zscore&quot;,&quot;label&quot;:&quot;dow_zscore&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_count&quot;,&quot;label&quot;:&quot;dow_count&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_median&quot;,&quot;label&quot;:&quot;dow_median&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_stddev&quot;,&quot;label&quot;:&quot;dow_stddev&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_avg&quot;,&quot;label&quot;:&quot;dow_avg&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_min&quot;,&quot;label&quot;:&quot;dow_min&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_max&quot;,&quot;label&quot;:&quot;dow_max&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_pwk_zscore&quot;,&quot;label&quot;:&quot;dow_pwk_zscore&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_pwk_count&quot;,&quot;label&quot;:&quot;dow_pwk_count&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_pwk_median&quot;,&quot;label&quot;:&quot;dow_pwk_median&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_pwk_stddev&quot;,&quot;label&quot;:&quot;dow_pwk_stddev&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_pwk_avg&quot;,&quot;label&quot;:&quot;dow_pwk_avg&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_pwk_min&quot;,&quot;label&quot;:&quot;dow_pwk_min&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;dow_pwk_max&quot;,&quot;label&quot;:&quot;dow_pwk_max&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;service&quot;,&quot;label&quot;:&quot;service&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;percentile_actual_05&quot;,&quot;label&quot;:&quot;percentile_actual_05&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;percentile_actual_95&quot;,&quot;label&quot;:&quot;percentile_actual_95&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;percentile_actual_50&quot;,&quot;label&quot;:&quot;percentile_actual_50&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;percentile_actual_98&quot;,&quot;label&quot;:&quot;percentile_actual_98&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;percentile_actual_02&quot;,&quot;label&quot;:&quot;percentile_actual_02&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;zscore&quot;,&quot;label&quot;:&quot;zscore&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;normalized_zscore&quot;,&quot;label&quot;:&quot;normalized_zscore&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;anomaly&quot;,&quot;label&quot;:&quot;anomaly&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomaly_value_&quot;,&quot;label&quot;:&quot;_anomaly_value_&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_feedback_&quot;,&quot;label&quot;:&quot;_feedback_&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:7/din:3">
        <JSON value="{&quot;name&quot;:&quot;name&quot;,&quot;label&quot;:&quot;Name&quot;,&quot;type&quot;:&quot;string&quot;,&quot;_isDimension&quot;:true,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;type&quot;,&quot;label&quot;:&quot;Type&quot;,&quot;type&quot;:&quot;string&quot;,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;value&quot;,&quot;label&quot;:&quot;Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:true}"/>
      </Schema>
      <Schema id="node:7/dout:1">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:4/out:0">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
      </Schema>
      <Schema id="node:4/out:1">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
      </Schema>
      <Schema id="node:4/out:2">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
      </Schema>
      <Schema id="node:4/out:3">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;path&quot;:null,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;,&quot;originalType&quot;:null,&quot;_isDimension&quot;:false,&quot;_isMeasure&quot;:false}"/>
      </Schema>
      <Schema id="node:23/out:0">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:23/in:0">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:21/din:0">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:29/din:0">
        <JSON value="{&quot;name&quot;:&quot;id&quot;,&quot;label&quot;:&quot;id&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;start_tm&quot;,&quot;label&quot;:&quot;start_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;end_tm&quot;,&quot;label&quot;:&quot;end_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;event_tm&quot;,&quot;label&quot;:&quot;event_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;max_severity&quot;,&quot;label&quot;:&quot;max_severity&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;service,metric&quot;,&quot;label&quot;:&quot;service,metric&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:41/din:6">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:41/din:5">
        <JSON value="{&quot;name&quot;:&quot;id&quot;,&quot;label&quot;:&quot;id&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;start_tm&quot;,&quot;label&quot;:&quot;start_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;end_tm&quot;,&quot;label&quot;:&quot;end_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;event_tm&quot;,&quot;label&quot;:&quot;event_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;max_severity&quot;,&quot;label&quot;:&quot;max_severity&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;service,metric&quot;,&quot;label&quot;:&quot;service,metric&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:29/din:1">
        <JSON value="{&quot;name&quot;:&quot;_group_&quot;,&quot;label&quot;:&quot;Group&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_epoch_&quot;,&quot;label&quot;:&quot;Epoch Time&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_time_&quot;,&quot;label&quot;:&quot;GMT&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value1_&quot;,&quot;label&quot;:&quot;Metric Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline1_&quot;,&quot;label&quot;:&quot;Metric Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom1_&quot;,&quot;label&quot;:&quot;Metric UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_value2_&quot;,&quot;label&quot;:&quot;Calls Value&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_baseline2_&quot;,&quot;label&quot;:&quot;Calls Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_uom2_&quot;,&quot;label&quot;:&quot;Calls UoM&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval1_&quot;,&quot;label&quot;:&quot;+/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffval2_&quot;,&quot;label&quot;:&quot;+/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct1_&quot;,&quot;label&quot;:&quot;% +/- Metric over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_diffpct2_&quot;,&quot;label&quot;:&quot;% +/- Calls over Baseline&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyFlag_&quot;,&quot;label&quot;:&quot;Anomaly Flag&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_anomalyValue_&quot;,&quot;label&quot;:&quot;Anomaly Marker&quot;,&quot;type&quot;:&quot;number&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;_iconState&quot;,&quot;label&quot;:&quot;State&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:29/din:2">
        <JSON value="{&quot;name&quot;:&quot;id&quot;,&quot;label&quot;:&quot;id&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;start_tm&quot;,&quot;label&quot;:&quot;start_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;end_tm&quot;,&quot;label&quot;:&quot;end_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;event_tm&quot;,&quot;label&quot;:&quot;event_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;max_severity&quot;,&quot;label&quot;:&quot;max_severity&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;service,metric&quot;,&quot;label&quot;:&quot;service,metric&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <Schema id="node:7/dout:11">
        <JSON value="{&quot;name&quot;:&quot;id&quot;,&quot;label&quot;:&quot;id&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;start_tm&quot;,&quot;label&quot;:&quot;start_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;end_tm&quot;,&quot;label&quot;:&quot;end_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;event_tm&quot;,&quot;label&quot;:&quot;event_tm&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;max_severity&quot;,&quot;label&quot;:&quot;max_severity&quot;,&quot;type&quot;:&quot;string&quot;}"/>
        <JSON value="{&quot;name&quot;:&quot;service,metric&quot;,&quot;label&quot;:&quot;service,metric&quot;,&quot;type&quot;:&quot;string&quot;}"/>
      </Schema>
      <DynInput id="node:7">
        <Port id="din:0" type="event[]" label="Selected" evaluate="always" _isArray="true"/>
        <Port id="din:1" type="any" label="Config" evaluate="always" _isArray="true"/>
        <Port id="din:2" type="string" label="Lang" evaluate="always" _isArray="true"/>
        <Port id="din:3" type="any[]" label="Filters" evaluate="always" _isArray="true"/>
      </DynInput>
      <DynInput id="node:21">
        <Port id="din:0" type="any[]" label="TrendData" evaluate="always"/>
        <Port id="din:1" type="number" label="RangeStart" evaluate="always"/>
        <Port id="din:2" type="number" label="RangeEnd" evaluate="always"/>
      </DynInput>
      <DynInput id="node:29">
        <Port id="din:0" type="any[]" label="incidentData" evaluate="always" _isArray="true"/>
        <Port id="din:1" type="any[]" label="TrendData" evaluate="always" _isArray="true"/>
        <Port id="din:2" type="any[]" label="outageData" evaluate="always" _isArray="true"/>
        <Port id="din:3" type="any" label="highLow" evaluate="always" _isArray="true"/>
        <Port id="din:4" type="any" label="highLow_2" evaluate="always" _isArray="true"/>
        <Port id="din:5" type="any[]" label="annotations" evaluate="always" _isArray="true"/>
      </DynInput>
      <DynInput id="node:41">
        <Port id="din:0" type="number" label="stEpoch" evaluate="always" _isArray="true"/>
        <Port id="din:1" type="number" label="edEpoch" evaluate="always" _isArray="true"/>
        <Port id="din:2" type="string" label="service" evaluate="always" _isArray="true"/>
        <Port id="din:3" type="string" label="subService" evaluate="always" _isArray="true"/>
        <Port id="din:4" type="string" label="incidentId" evaluate="always" _isArray="true"/>
        <Port id="din:5" type="any[]" label="incidentData" evaluate="always" _isArray="true"/>
        <Port id="din:6" type="any[]" label="trendData" evaluate="always" _isArray="true"/>
      </DynInput>
      <DynInput id="node:43">
        <Port id="din:0" type="any" label="notifyIn" evaluate="always"/>
      </DynInput>
      <DynOutput id="node:1">
        <Port id="dout:0" type="any" label="Score Factor" propagate="always"/>
        <Port id="dout:1" type="any" label="High Threshold" propagate="always"/>
        <Port id="dout:2" type="any" label="Medium Threshold" propagate="always"/>
        <Port id="dout:3" type="any" label="Low Threshold" propagate="always"/>
        <Port id="dout:4" type="any" label="" propagate="always"/>
        <Port id="dout:5" type="any" label="Config" propagate="always"/>
        <Port id="dout:6" type="string" label="Lang" propagate="always"/>
        <Port id="dout:7" type="any[]" label="Filters" propagate="always"/>
        <Port id="dout:8" type="any[]" label="Selection" propagate="always"/>
        <Port id="dout:9" type="any" label="annotations" propagate="always"/>
      </DynOutput>
      <DynOutput id="node:7">
        <Port id="dout:0" type="event[]" label="Anomaly Data" propagate="always"/>
        <Port id="dout:1" type="event[]" label="Trend Data" propagate="always"/>
        <Port id="dout:2" type="any" label="Trend Notify" propagate="always"/>
        <Port id="dout:3" type="string" label="incidentID" propagate="always"/>
        <Port id="dout:4" type="number" label="startEpoch" propagate="always"/>
        <Port id="dout:5" type="number" label="endEpoch" propagate="always"/>
        <Port id="dout:6" type="string" label="service" propagate="always"/>
        <Port id="dout:7" type="string" label="subService" propagate="always"/>
        <Port id="dout:8" type="string" label="dimVals" propagate="always"/>
        <Port id="dout:9" type="any" label="Computed Score Factor" propagate="always"/>
        <Port id="dout:10" type="boolean" label="isOutage" propagate="always"/>
        <Port id="dout:11" type="event[]" label="Incident Data" propagate="always"/>
      </DynOutput>
      <DynOutput id="node:29">
        <Port id="dout:0" type="any" label="notification" propagate="always" _isArray="true"/>
      </DynOutput>
      <DynOutput id="node:41">
        <Port id="dout:0" type="any[]" label="outageData" propagate="always" _isArray="true"/>
        <Port id="dout:1" type="any" label="highLow" propagate="always" _isArray="true"/>
        <Port id="dout:2" type="any" label="highLow_2" propagate="always" _isArray="true"/>
      </DynOutput>
      <DynOutput id="node:43">
        <Port id="dout:0" type="any" label="annotations" propagate="always"/>
      </DynOutput>
      <Version id="node:1" version="1"/>
      <Version id="node:4" version="1"/>
      <Version id="node:7" version="2"/>
      <Version id="node:21" version="1"/>
      <Version id="node:23" version="2"/>
      <Version id="node:29" version="2"/>
      <Version id="node:41" version="2"/>
      <Version id="node:43" version="2"/>
      <Version type="Aggregate" version="1"/>
      <Version type="Columns" version="1"/>
      <Version type="DynPivot" version="1"/>
      <Version type="Filter" version="1"/>
      <Version type="Footer" version="1"/>
      <Version type="GeoJsonOverlay" version="1"/>
      <Version type="RestQuery" version="1"/>
      <Version type="Group" version="1"/>
      <Version type="Header" version="1"/>
      <Version type="GeoHeatMapOverlay" version="1"/>
      <Version type="Join" version="1"/>
      <Version type="LocalStore" version="2"/>
      <Version type="MenuBar" version="1"/>
      <Version type="ModelMeta" version="1"/>
      <Version type="ToolbarOverlay" version="3"/>
      <Version type="WidgetOverlay" version="1"/>
      <Version type="Pivot" version="1"/>
      <Version type="Widget" version="1"/>
      <Version type="PortIn" version="1"/>
      <Version type="PortOut" version="1"/>
      <Version type="GlobalProperty" version="3"/>
      <Version type="PutData" version="1"/>
      <Version type="ResourceMeta" version="1"/>
      <Version type="Rows" version="1"/>
      <Version type="UserScript" version="2"/>
      <Version type="Sort" version="1"/>
      <Version type="SQL" version="2"/>
      <Version type="SQLConnect" version="1"/>
      <Version type="DwrMessage" version="1"/>
      <Version type="GeoEditableOverlay" version="1"/>
      <Version type="GeoOverlay" version="2"/>
      <Version type="TextAnnotations" version="1"/>
      <Version type="Tile" version="1"/>
      <Version type="Union" version="1"/>
      <Version type="ScriptVariable" version="1"/>
    </DataFlow>
    <DashboardPlugins>
      <DashboardPlugin uri="/app/dbp/user/via_common/dbpm/VIA - Common" alias="Common"/>
      <DashboardPlugin uri="/app/dbp/space/Charter Digital Operations/dbpm/Charter - Incident Analysis Service v8" alias="Incident"/>
      <DashboardPlugin uri="/app/dbp/space/Charter Digital Operations/dbpm/Charter - Plugin v11" alias="Charter"/>
      <DashboardPlugin uri="/app/dbp/user/viaops_admin/dbpm/VIAOps - Trend Plugin" alias="TrendHelper"/>
      <DashboardPlugin uri="/app/dbp/user/via_common/dbpm/VIA - TimeSeriesChart" alias=""/>
    </DashboardPlugins>
  </ModelInfo>
</AnalyticsExplorerView>
