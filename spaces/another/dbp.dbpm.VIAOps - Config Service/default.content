<DashboardPluginModel is_init="false" name="VIAOps - Config Service" description="">
  <ModelInfo validated="true">
    <Properties/>
    <Widgets>
      <Widget name="ComputedDefaultsWidget" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[
        // MUST implement resize, setModel() and getModel() if to be used in edit mode
        
        resize : function() {
        },
        
        getModel : function() {
            return this.model;
        },
        
        setModel : function(values) {
            //alert("setModel()");
        },

        _onChangeComputedDefaults : function(evt) {
            var self = this;
            var record = evt.cell.row.data;
            if (evt.cell.column.field == "_include_") {
                record[evt.cell.column.field] = evt.value == true || evt.value == "on";
            }
            else {
                if (isNaN(evt.value)) {
                    evt.returnValue = false;
                    
                    // clear value
                    record[evt.cell.column.field] = "";
                    window.setTimeout(function() {
                        self._computedDefaultsWidget.store.put(record);
                    }, 20);
                }
                else {
                    // update value
                    record[evt.cell.column.field] = evt.value;
                }
            }
        },
]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[
    function createComputedDefaultsGrid(parentNode, onChange, data, callback)
    {
        AppUtil.removeAllChildrenOf(parentNode);
        
        require(["dijit/form/CheckBox", "dijit/form/NumberTextBox",  "dijit/form/Select"], function(CheckBox, NumberTextBox, Select) {
            var div = domConstruct.create("div", {});
            parentNode.appendChild(div);
            
            var columns = [{
                field : "_include_",
                label : " ",
                style : "font-family:monospace;cursor:pointer;width:30px;text-align:center;",
                sortable : false,
                autoSave : true,
                editor : CheckBox,
            }, {
                field : "metricId",
                label : "Metric ID",
                style : "font-family:monospace;",
                sortable : false,
            }, {
                field : "incidentHighThreshold",
                label : "High",
                style : "font-family:monospace;cursor:pointer;width:100px;",
                sortable : false,
                editor : NumberTextBox,
                editOn : "dblclick",
                autoSave : true,
            }, {
                field : "incidentMediumThreshold",
                label : "Medium",
                style : "font-family:monospace;cursor:pointer;width:100px;",
                sortable : false,
                editor : NumberTextBox,
                editOn : "dblclick",
                autoSave : true,
            }, {
                field : "incidentLowThreshold",
                label : "Low",
                style : "font-family:monospace;cursor:pointer;width:100px;",
                sortable : false,
                editor : NumberTextBox,
                editOn : "dblclick",
                autoSave : true,
            }, {
                field : "incidentWarmupThreshold",
                label : "Warmup",
                style : "font-family:monospace;cursor:pointer;width:100px;",
                sortable : false,
                editor : NumberTextBox,
                editOn : "dblclick",
                autoSave : true,
            }];
            var store = GridUtil.createGridStore("metricId", data);
            var grid = GridUtil.createGridWidget("ComputedDefaultsGrid", div, true, null, columns, store,
                                                 null, null, "none", null, null);
            if (onChange != null) {
                grid.on("dgrid-datachange", onChange);
            }
            callback({
                store : store,
                grid  : grid,
            });
        });
    }

]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            for (var i=0; i<this.model.length; i++) {
                this.model[i]["_include_"] = true;
            }

            var self = this;
            createComputedDefaultsGrid(self._gridDiv, lang.hitch(self, "_onChangeComputedDefaults"), self.model, function(widget) {
                self._computedDefaultsWidget = widget;
            });
            ]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[
            if (this.editorConfig == null) {
                this.editorConfig = config.viewerConfig;
                delete config.viewerConfig;
            }
]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;" class="via-scroller">
    <style>
    .dgrid-header .dgrid-cell {
        pointer-events : none;
    }
    .dgrid-scroller .ComputedDefaultsGrid-metric_id {
        background-color : rgb(237,237,237) !important;
    }
    </style>
    <div style="width:100%;height:100px;background-color:#f2f2f2f2;padding:10px;line-height:20px;">
        <div>Computed incident configurations.</div>
        <div>&bull; To change default value, double-click on the corresponding &quot;Threshold&quot; column of the corresponding row.</div>
        <div>&bull; Set to override value.</div>
        <div>&bull; Set value to <b>empty</b> to ignore specific threshold value.</div>
        <div>&bull; Uncheck the row to ignore computed values for that metric.</div>
    </div>
    <div data-dojo-attach-point="_gridDiv" style="width:100%;height:calc(100% - 120px);background-color:white;">
    </div>
</div>

]]>
        </HtmlText>
      </Widget>
      <Widget name="CorrelationTimesWidget" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[
        // MUST implement resize, setModel() and getModel() if to be used in edit mode
        
        resize : function() {
        },
        
        getModel : function() {
            return null;
        },
        
        setModel : function(values) {
            //alert("setModel()");
        },

        _onChangeCorrelationTime : function(evt) {
            var self = this;
            var record = evt.cell.row.data;
            if (isNaN(evt.value)) {
                evt.returnValue = false;
                
                record["correlation_time"] = "";
                window.setTimeout(function() {
                    self._correlationTimeWidget.store.put(record);
                }, 20);
                // clear correlation time
                //alert("clear correlation time for " + record["correlation_name"]);
            }
            else {
                // update correlation time
                //alert("update correlation time for " + record["correlation_name"] + " to " + evt.value);
                record["correlation_time"] = evt.value;
            }
            self.editorConfig.setCorrelationTime(record, function(response) {
                if (response.status == "OK" && response.value == true) {
                    self.changed = true;
                }
            });
        },
]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[
    function createCorrelationTimeGrid(parentNode, onChange, data, callback)
    {
        AppUtil.removeAllChildrenOf(parentNode);
        
        require(["dijit/form/CheckBox", "dijit/form/NumberTextBox",  "dijit/form/Select"], function(CheckBox, NumberTextBox, Select) {
            var div = domConstruct.create("div", {});
            parentNode.appendChild(div);
            
            var columns = [{
                field : "correlation_name",
                label : "Correlation Rule",
                style : "font-family:monospace;",
                sortable : false,
            }, {
                field : "correlation_time",
                label : "Correlation Time",
                style : "font-family:monospace;cursor:pointer;width:150px;",
                sortable : false,
                editor : NumberTextBox,
                editOn : "dblclick",
                autoSave : true,
            }];
            var store = GridUtil.createGridStore("correlation_name", data);
            var grid = GridUtil.createGridWidget("CorrelationTimeGrid", div, true, null, columns, store,
                                                 null, null, "none", null, null);
            if (onChange != null) {
                grid.on("dgrid-datachange", onChange);
            }
            callback({
                store : store,
                grid  : grid,
            });
        });
    }

]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            var self = this;
            self._defaultCorrelationTime = null;
            self._correlationTimes = [];
            self.editorConfig.getConfigProperty(null, false, function(response) {
                var properties = [];
                if (response.status == "OK") {
                    response.value.forEach(function(property) {
                        switch (property.name) {
                            case "default_correlation_time":
                                self._defaultCorrelationTime = property.value;
                                break;
                        }
                    });
                }
                var DEFINED_CORRELATION_TIMES_ONLY = true;
                self.editorConfig.getCorrelationTimes(function(response) {
                    if (response.status == "OK") {
                        if (DEFINED_CORRELATION_TIMES_ONLY) {
                            response.value.forEach(function(record) {
                                self._correlationTimes.push({
                                    correlation_name  : record["correlation_name"],
                                    correlation_label : record["correlation_name"],
                                    correlation_time  : record["correlation_time"] || "",
                                    service_name      : record["service_name"],
                                    sub_service_name  : record["sub_service_name"],
                                });
                            });
                            self._correlationTimes.sort(function(a,b) {
                                return a.correlation_label.localeCompare(b.correlation_label);
                            });
                            createCorrelationTimeGrid(self._gridDiv, lang.hitch(self, "_onChangeCorrelationTime"), self._correlationTimes, function(widget) {
                                self._correlationTimeWidget = widget;
                            });
                        }
                        else {
                            var userDefinedCorrelationTimes = {};
                            response.value.forEach(function(record) {
                                userDefinedCorrelationTimes[record["correlation_name"]] = record["correlation_time"];
                            });
                            self.editorConfig.getCorrelationRules(function(response) {
                                if (response.status == "OK") {
                                    response.value.forEach(function(correlation) {
                                        var correlation_time = userDefinedCorrelationTimes[correlation.correlation_name];
                                        if (correlation_time != null) {
                                            correlation.correlation_time = correlation_time;
                                        }
                                        else {
                                            correlation.correlation_time = "";
                                        }
                                        self._correlationTimes.push(correlation);
                                    });
                                }
                                self._correlationTimes.sort(function(a,b) {
                                    return a.correlation_label.localeCompare(b.correlation_label);
                                });
                                createCorrelationTimeGrid(self._gridDiv, lang.hitch(self, "_onChangeCorrelationTime"), self._correlationTimes, function(widget) {
                                    self._correlationTimeWidget = widget;
                                });
                            });
                        }
                    }
                });
            });
]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[
            if (this.editorConfig == null) {
                this.editorConfig = config.viewerConfig;
                delete config.viewerConfig;
            }
]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;" class="via-scroller">
    <style>
    .dgrid-header .dgrid-cell {
        pointer-events : none;
    }
    .dgrid-scroller .CorrelationTimeGrid-correlation-name {
        background-color : rgb(237,237,237) !important;
    }
    </style>
    <div style="width:100%;height:80px;background-color:#f2f2f2f2;padding:10px;line-height:20px;">
        <div>Default correlation time for specific correlation rule is set here.</div>
        <div>&bull; To change default value, double-click on the &quot;Correlation Time&quot; column of the corresponding row.</div>
        <div>&bull; Set to override value.</div>
        <div>&bull; Set value to <b>empty</b> to revert to using default value</div>
    </div>
    <div data-dojo-attach-point="_gridDiv" style="width:100%;height:calc(100% - 100px);background-color:white;">
        <div style="height:calc(50% - 20px);"></div>
        <div style="width:calc(100% - 40px);margin-left:20px;">Retrieving incident group correlation times...</div>
        <div data-dojo-type="dijit/ProgressBar" style="width:calc(100% - 40px);margin-left:20px;" data-dojo-props="indeterminate:true"></div>
    </div>
</div>

]]>
        </HtmlText>
      </Widget>
      <Widget name="IncidentGroupConfigWidget" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[
        // MUST implement resize, setModel() and getModel() if to be used in edit mode
        
        resize : function() {
        },
        
        getModel : function() {
            return {
                group_rule_name     : this._groupRuleName.get("value"),
                max_lookback        : this._maxLookback.get("value"),
                expire_after        : this._expireAfter.get("value"),
                start_group         : this._startGroup,
                correlation_rules   : this._correlationRules,
                correlation_changed : this._correlationSignature != getCorrelationSignature(this._startGroup, this._correlationRules),
            };
        },
        
        setModel : function(values) {
            //alert("setModel()");
        },

        _onChangeGroupRuleName : function(value) {
        },

        _onChangeMaxLookback : function(value) {
        },

        _onChangeExpireAfter : function(value) {
        },

        _onChangeCorrelationRules : function(item) {
            if (item != null) {
                this._correlationRules = item.value;
            }
            var startGroupOptions = [];
            var startGroupValid = false;
            var self = this;
            this._correlationRules.forEach(function(correlationName) {
                var correlation = self._correlationRuleMap[correlationName];
                startGroupOptions.push({
                    value : correlation["correlation_name"],
                    label : correlation["correlation_label"],
                });
                if (self._startGroup != null && self._startGroup == correlation["correlation_name"]) {
                    startGroupValid = true;
                }
            });
            this._startGroupSelect.removeOption(this._startGroupSelect.getOptions());
            this._startGroupSelect.addOption(startGroupOptions);
            if (!startGroupValid) {
                if (startGroupOptions.length > 0) {
                    this._startGroup = startGroupOptions[0]["value"];
                }
                else {
                    this._startGroup = null;
                }
            }
            if (this._startGroup != null) {
                this._startGroupSelect.set("value", this._startGroup, false);
            }
        },

        _onChangeStartGroup : function(value) {
            this._startGroup = value;
        },
]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[
    function getCorrelationSignature(startGroup, correlationRules)
    {
        var signature = {
            startGroup : startGroup,
            correlationRules : correlationRules.slice(0).sort(),
        };
        return JSON.stringify(signature);
    }
]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            var self = this;

            // work-around for bug in datagrid what somehow deserialize attributes that are array of 1
            // to just the contained object
            if (this.model && !Array.isArray(this.model.correlation_rules)) {
                this.model.correlation_rules = [this.model.correlation_rules];
            }
            
            this._correlationSignature = null;
            this._correlationRules = [];
            if (this.model != null) {
                this._startGroup = this.model.__start_group_name__;
                this._groupRuleName.set("value", this.model.group_rule_name, false);
                this._maxLookback.set("value", this.model.max_lookback, false);
                this._expireAfter.set("value", this.model.expire_after, false);
                this.model.correlation_rules.forEach(function(correlation) {
                    self._correlationRules.push(correlation.__name__);
                });
                this._correlationSignature = getCorrelationSignature(this._startGroup, this._correlationRules);
            }

            self._correlationRuleMap = {};
            self.editorConfig.getConfigProperty(null, false, function(response) {
                var properties = [];
                if (response.status == "OK") {
                    response.value.forEach(function(property) {
                        switch (property.name) {
                            case "default_max_loopback":
                                self._maxLoopbackDefault.innerHTML = "(default is " + property.value + " sec)";
                                break;
                            case "default_group_expiration_time":
                                self._expireAfterDefault.innerHTML = "(default is " + property.value + " sec)";
                                break;
                        }
                    });
                }
                self.editorConfig.getCorrelationRules(function(response) {
                    var correlationRules = [];
                    if (response.status == "OK") {
                        response.value.forEach(function(correlation) {
                            self._correlationRuleMap[correlation["correlation_name"]] = correlation;
                            correlationRules.push({
                                value : correlation["correlation_name"],
                                label : correlation["correlation_label"],
                            });
                        });
                    }
                    correlationRules.sort(function(a,b) {
                        return a.label.localeCompare(b.label);
                    });
                    AppUtil.removeAllChildrenOf(self._correlationRulesTD);
                    self._correlationRulesSelect = FormUtil.createMultiSelect("correlationRulesSelect", self._correlationRulesTD, correlationRules, self._correlationRules,
                                                                              "width:100%;", null, lang.hitch(self, "_onChangeCorrelationRules"));
                    self._onChangeCorrelationRules(null);
                });
            });
]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">
    <table cellspacing="5" style="width:100%;">
        <style>
        </style>
        <tr>
            <td style="white-space:nowrap;padding-right:5px;">Group Rule Name:</td>
            <td style="width:100%;height:22px;">
                <input type="text"
                       style="width:calc(100% - 0px);font-family:monospace;"
                       placeholder="Defaults to (Start Group) on Save if left empty"
                       spellcheck="false"
                       data-dojo-type="dijit/form/TextBox"
                       data-dojo-props="trim:true"
                       data-dojo-attach-point="_groupRuleName"
                       data-dojo-attach-event="change:_onChangeGroupRuleName"/>
            </td>
        </tr>
        <tr>
            <td style="white-space:nowrap;padding-right:5px;">Max Lookback (sec):</td>
            <td style="height:22px;">
                <input type="text"
                       style="width:100px;font-family:monospace;"
                       data-dojo-type="dijit/form/NumberTextBox"
                       data-dojo-props="trim:true"
                       data-dojo-attach-point="_maxLookback"
                       data-dojo-attach-event="change:_onChangeMaxLookback"/>
                <span data-dojo-attach-point="_maxLoopbackDefault" style="font-style:italic;color:gray;"></span>
            </td>
        </tr>
        <tr>
            <td style="white-space:nowrap;padding-right:5px;">Expires After (sec):</td>
            <td style="height:22px;">
                <input type="text"
                       style="width:100px;font-family:monospace;"
                       data-dojo-type="dijit/form/NumberTextBox"
                       data-dojo-props="trim:true"
                       data-dojo-attach-point="_expireAfter"
                       data-dojo-attach-event="change:_onChangeExpireAfter"/>
                <span data-dojo-attach-point="_expireAfterDefault" style="font-style:italic;color:gray;"></span>
            </td>
        </tr>
        <tr>
            <td style="white-space:nowrap;padding-right:5px;">Correlation Rules:</td>
            <td data-dojo-attach-point='_correlationRulesTD' style="height:22px;">
                <div data-dojo-type="dijit/ProgressBar" style="width:100%;" data-dojo-props="indeterminate:true"></div>
            </td>
        </tr>
        <tr>
            <td style="white-space:nowrap;padding-right:5px;">Start Group:</td>
            <td style="height:22px;">
                <select data-dojo-type="dijit/form/Select"
                        data-dojo-attach-point='_startGroupSelect'
                        data-dojo-attach-event="change:_onChangeStartGroup"
                        style="width:100%;">
                </select>
            </td>
        </tr>
    </table>

</div>

]]>
        </HtmlText>
      </Widget>
      <Widget name="MetricConfigWidget" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#postCreate">
          <![CDATA[
            var self = this;
            self._initMetricIDs(function() {
                self._initMetricList("Loading metrics...", function() {
                    // done
                });
            });

            this._btnAdd.set("disabled", true);
            this._btnRemove.set("disabled", true);
            this._btnAddAll.set("disabled", true);
            this._btnRemoveAll.set("disabled", true);

            this._preLeftRowId = null;
            this._preRightRowId = null;
            this._leftClickTime = 0;
            this._rightClickTime = 0;

            this._updateDimKeysSelect([]);
            this._updateDimValuesSelect([]);
            this._dimKeysSelect.set("disabled", true);
            this._setDimValuesSelect("disabled", true);

            this._syncCheck.checked = this._sync;]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[
        DOUBLE_CLICK_TIMEOUT : 500,
        OPTION_SELECT : [{
            value : "#",
            label : "- select -",
        }],

        // MUST implement resize, setModel() and getModel() if to be used in edit mode
        
        resize : function() {
        },
        
        setModel : function(values) {
            //alert("setModel()");
        },
        
        getModel : function() {
            this._model = [];
            if (this._rightGrid != null) {
                for (var i=0; i<this._rightGrid.grid.collection.data.length; i++) {
                    var item = this._rightGrid.grid.collection.data[i];
                    var toks = item.value.split("|");
                    var obj = {
                        svc    : toks[0],
                        comp   : toks[1],
                        app    : toks[2],
                        metric : toks[3],
                    };
                    obj["anomalyWindow"] = this._windowSize;
                    if (this._options["enableAlgorithm"] == true) {
                        obj["algorithm"] = this._algorithm;
                    }
                    if (this._options["enableThresholdPolicy"] == true) {
                        obj["thresholdPolicy"] = this._thresholdPolicy;
                    }
                    if (obj["algorithm"] == "declared" && obj["thresholdPolicy"] != null) {
                        obj["thresholdPolicy"] = "none";
                    }
                    if (this._dimKeys != null && this._dimValues != null) {
                        if (Array.isArray(this._dimValues)) {
                            for (var j=0; j<this._dimValues.length; j++) {
                                obj["dimKeys"] = this._dimKeys;
                                obj["dimValues"] = this._dimValues[j];
                                this._model.push(lang.clone(obj));
                            }
                        }
                        else {
                            obj["dimKeys"] = this._dimKeys;
                            obj["dimValues"] = this._dimValues;
                            this._model.push(obj);
                        }
                    }
                    else {
                        this._model.push(obj);
                    }
                }
            }
            return {
                model : this._model,
                sync  : this._sync,
            };
        },

        _initMetricIDs : function(callback) {
            var self = this;
            this.editorConfig.getMetricIDs(function(response) {
                self._metricIDs = [];
                if (response.status == "OK") {
                    response.value.forEach(function(metric) {
                        self._metricIDs.push({
                            value : metric["metric_id"],
                            label : metric["metric_id"],
                        });
                    });
                }
                callback();
            });
        },

        _getMetricIDs : function(callback) {
            var metric_list = [];
            if (this._searchString == null || this._searchString.trim() == "") {
                metric_list = this._metricIDs.slice(0);
            }
            else {
                var searchString = this._searchString.toLowerCase();
                var and_terms = null;
                var or_terms = null;
                if (searchString.indexOf(" and ") != -1) {
                    // if we have ' and ' in string, eg. STVA and Failure, split search string
                    // on ' and ' and interpret as AND of all parts
                    and_terms = searchString.split(" and ");
                    metric_list = this._metricIDs.filter(function(item) {
                        var value = item.value.toLowerCase();
                        var ok = true;
                        for (var i=0; i<and_terms.length; i++) {
                            var term = and_terms[i];
                            if (value.indexOf(term) == -1) {
                                ok = false;
                                break;
                            }
                        }
                        return ok;
                    });
                }
                else if (searchString.indexOf(" or ") != -1) {
                    // if we have ' or ' in string, eg. STVA or Failure, split search string
                    // on ' or ' and interpret as OR of all parts
                    or_terms = searchString.split(" or ");
                    metric_list = this._metricIDs.filter(function(item) {
                        var value = item.value.toLowerCase();
                        var ok = false;
                        for (var i=0; i<or_terms.length; i++) {
                            var term = or_terms[i];
                            if (value.indexOf(term) != -1) {
                                ok = true;
                                break;
                            }
                        }
                        return ok;
                    });
                }
                else {
                    // else entire search string should is matched as-os
                    metric_list = this._metricIDs.filter(function(item) {
                        return item.value.toLowerCase().indexOf(searchString) != -1;
                    });
                }
            }
            if (this._metricFilterRegex != null && this._metricFilterRegex.length > 0) {
                var regexList = this._metricFilterRegex;
                metric_list = metric_list.filter(function(item) {
                    for (var i=0; i<regexList.length; i++) {
                        var regex = regexList[i];
                        if (regex.test(item.value)) return true;
                    }
                    return false;
                });
            }
            callback(metric_list);
        },

        _initMetricList : function(message, callback) {
            var self = this;
            this._showProgressMessage(message);
            this._getMetricIDs(function(metric_list) {
                if (self._metricIDs.length == 0) {
                    self._hideProgressMessage("Query returned no result.");
                }
                else {
                    self._hideProgressMessage("");
                }
                var leftover = (self.model || []).slice(0);
                var available = [];
                var selected = [];
                for (var i=0; i<metric_list.length; i++) {
                    var item = metric_list[i];
                    var match = leftover.indexOf(item.value);
                    if (match != -1) {
                        selected.push(item);
                        leftover.splice(match, 1);
                    }
                    else {
                        available.push(item);
                    }
                }
                if (leftover.length > 0) {
                    for (var i=0; i<leftover.length; i++) {
                        selected.push({
                            value : leftover[i],
                            label : "* " + leftover[i]
                        });
                    }
                }
                if (self._leftGrid == null) {
                    self._leftGrid = createGrid(self._leftDiv, lang.hitch(self, "_onLeftSelect"), available);
                }
                else {
                    self._leftGrid.store.setData(available);
                    self._leftGrid.grid.refresh();
                }
                self._btnAddAll.set("disabled", self._leftGrid.grid.collection.data.length == 0);
                if (self._rightGrid == null) {
                    self._rightGrid = createGrid(self._rightDiv, lang.hitch(self, "_onRightSelect"), selected);
                }
                else {
                    self._rightGrid.store.setData(selected);
                    self._rightGrid.grid.refresh();
                }
                self._updateControlStates();
            });
        },
        
        _updateMetricList : function(message, callback) {
            var self = this;
            this._showProgressMessage(message);
            var inRightList = null;
            if (this._rightGrid.grid.collection.data.length > 0) {
                inRightList = {};
                this._rightGrid.grid.collection.data.forEach(function(item) {
                    inRightList[item.value] = true;
                });
            }
            this._getMetricIDs(function(metric_list) {
                if (metric_list.length == 0) {
                    self._hideProgressMessage("Query returned no result.");
                }
                else {
                    self._hideProgressMessage("");
                }
                // filter metric_list to exclude values already in the right list
                if (inRightList != null) {
                    metric_list = metric_list.filter(function(item) {
                        return inRightList[item.value] == null;
                    });
                }
                if (metric_list.length == 0) {
                    self._hideProgressMessage("Query returned no result.");
                }
                else {
                    self._hideProgressMessage("");
                }
                if (self._leftGrid == null) {
                    self._leftGrid = createGrid(self._leftDiv, lang.hitch(self, "_onLeftSelect"), metric_list);
                }
                else {
                    self._leftGrid.store.setData(metric_list);
                    self._leftGrid.grid.refresh();
                }
                self._updateControlStates();
            });
        },

        _onChangeSearch : function(value) {
            if (this._searchString != null && this._searchString == value) {
                return;
            }
            this._searchString = value;

            var self = this;
            this._updateMetricList("Updating metrics...", function() {
                // done
            });
        },

        _onKeyUpSearch : function(evt) {
            var self = this;
            if (evt.keyCode == 13) {
                var value = this._inputSearch.get("value");
                if (this._searchString != null && this._searchString == value) {
                    return;
                }
                this._searchString = value;
                
                var self = this;
                this._updateMetricList("Updating metrics...", function() {
                    // done
                });
            }
        },

        _onLeftSelect : function(evt) {
            var rowId = evt.rows[0].id;
            var now = Date.now();
            if (evt.type == "dgrid-deselect" && this._leftClickRowId != null && this._leftClickTime != null) {
                this._preLeftRowId = rowId;
            }
            if (evt.type == "dgrid-select") {
                this._leftClickRowId = rowId;
                if (this._preLeftRowId == this._leftClickRowId && (now - this._leftClickTime) < this.DOUBLE_CLICK_TIMEOUT) {
                    // is double-click
                    delete this._leftClickRowId;
                    delete this._leftClickTime;
                    this._addItems = [evt.rows[0].data];
                    this._btnAdd.set("disabled", true);
                    window.setTimeout(lang.hitch(this, "_onClickAdd"), 10);
                    return;
                }
                this._leftClickTime = now;
            }
            this._addItems = getSelectedItems(evt.grid);
            this._updateControlStates();
        },
        
        _onRightSelect : function(evt) {
            var rowId = evt.rows[0].id;
            var now = Date.now();
            if (evt.type == "dgrid-deselect" && this._rightClickRowId != null && this._rightClickTime != null) {
                this._preRightRowId = rowId;
            }
            if (evt.type == "dgrid-select") {
                this._rightClickRowId = rowId;
                if (this._preRightRowId == this._rightClickRowId && (now - this._rightClickTime) < this.DOUBLE_CLICK_TIMEOUT) {
                    // is double-click
                    delete this._rightClickRowId;
                    delete this._rightClickTime;
                    this._removeItems = [evt.rows[0].data];
                    this._btnRemove.set("disabled", true);
                    window.setTimeout(lang.hitch(this, "_onClickRemove"), 10);
                    return;
                }
                this._rightClickTime = now;
            }
            this._removeItems = getSelectedItems(evt.grid);
            this._updateControlStates();
        },
        
        _onClickAdd : function(evt) {
            if (this._addItems != null && this._addItems.length > 0) {
                var items = lang.clone(this._addItems);
                this._addItems = null;
                for (var i=0; i<items.length; i++) {
                    var item = items[i];
                    this._leftGrid.store.remove(item.value);
                    this._rightGrid.store.put(item);
                }
                this._leftGrid.grid.refresh();
                this._rightGrid.grid.refresh();
                this._updateControlStates();
                this._updateDimKeyOptions();
            }
        },
        
        _onClickRemove : function(evt) {
            if (this._removeItems != null && this._removeItems.length > 0) {
                var items = lang.clone(this._removeItems);
                this._removeItems = null;
                for (var i=0; i<items.length; i++) {
                    var item = items[i];
                    this._rightGrid.store.remove(item.value);
                    this._leftGrid.store.put(item);
                }
                this._leftGrid.grid.refresh();
                this._rightGrid.grid.refresh();
                this._updateControlStates();
                this._updateDimKeyOptions();
            }
        },
        
        _onClickAddAll : function(evt) {
            this._addItems = null;
            var items = lang.clone(this._leftGrid.grid.collection.data);
            for (var i=0; i<items.length; i++) {
                var item = items[i];
                this._leftGrid.store.remove(item.value);
                this._rightGrid.store.put(item);
            }
            this._leftGrid.grid.refresh();
            this._rightGrid.grid.refresh();
            this._updateControlStates();
            this._updateDimKeyOptions();
        },
        
        _onClickRemoveAll : function(evt) {
            this._removeItems = null;
            var items = lang.clone(this._rightGrid.grid.collection.data);
            for (var i=0; i<items.length; i++) {
                var item = items[i];
                this._rightGrid.store.remove(item.value);
                this._leftGrid.store.put(item);
            }
            this._leftGrid.grid.refresh();
            this._rightGrid.grid.refresh();
            this._updateControlStates();
            this._updateDimKeyOptions();
        },
        
        _showProgressMessage : function(message) {
            this._statusDiv.innerHTML = message;
            var self = this;
            require(["dijit/ProgressBar", "dojo/domReady!"], function(ProgressBar) {
                var div = domConstruct.create("div");
                self._progressBarTd.appendChild(div);
                self._progressBar = new ProgressBar({ 
                    style: "width:80%;height:100%;float:right;",
                    indeterminate : true,
                    layoutAlign: "right",
                }, div);
                domStyle.set(self._progressBar.internalProgress, "height", "100%");
            });
        },
        
        _hideProgressMessage : function(message) {
            this._statusDiv.innerHTML = message;
            if (this._progressBar != null) {
                this._progressBar.destroy();
                delete this._progressBar;
            }
            AppUtil.removeAllChildrenOf(this._progressBarTd);
        },

        _updateControlStates : function() {
            this._btnAdd.set("disabled", this._addItems == null || this._addItems.length == 0);
            this._btnRemove.set("disabled", this._removeItems == null || this._removeItems.length == 0);
            
            this._btnAddAll.set("disabled", this._leftGrid.grid.collection.data.length == 0);
            this._btnRemoveAll.set("disabled", this._rightGrid.grid.collection.data.length == 0);
        },
        
        _updateDimKeysDimValuesStates : function() {
            this._dimKeysSelect.set("disabled", this._dimKeysSelect.getOptions().length == 0);
            domStyle.set(this._dimKeysLabel, "opacity", this._dimKeysSelect.getOptions().length == 0 ? 0.3 : 1.0);
            this._setDimValuesSelect("disabled", this._dimKeys == null);
            domStyle.set(this._dimValuesLabel, "opacity", this._dimKeys == null ? 0.3 : 1.0);
        },

        _getDimKeyOptions : function(dimKeySets, metricIds, callback) {
            if (metricIds.length == 0) {
                if (dimKeySets.length > 0) {
                    var dimKeys = dimKeySets.shift();
                    while (dimKeySets.length > 0) {
                        var tmp = dimKeySets.shift();
                        dimKeys = dimKeys.filter(function(dimKey) {
                            return tmp.indexOf(dimKey) != -1;
                        });
                    }
                    callback(dimKeys);
                }
                else {
                    callback([]);
                }
            }
            else {
                var metricId = metricIds.shift();
                var toks = metricId.split("|");
                var svc    = toks[0];
                var comp   = toks[1];
                var app    = toks[2];
                var metric = toks[3];
                var self = this;
                this.editorConfig.getDimKeyOptions(svc, comp, app, metric, function(response) {
                    if (response.status == "OK") {
                        dimKeySets.push(response.value);
                    }
                    self._getDimKeyOptions(dimKeySets, metricIds, callback);
                });
            }
        },

        _updateDimKeyOptions : function() {
            var self = this;
            this._dimKeys = null;
            this._dimKeysSelect.set("value", "", false);
            this._dimValues = null;
            this._setDimValuesSelect("value", "", false);
            this._updateDimKeysSelect([]);
            this._updateDimValuesSelect([]);
            if (this._rightGrid != null) {
                var metric_ids = [];
                for (var i=0; i<this._rightGrid.grid.collection.data.length; i++) {
                    metric_ids.push((this._rightGrid.grid.collection.data[i]).value);
                }
                this._getDimKeyOptions([], metric_ids, function(dimKeys) {
                    var options = [];
                    dimKeys.forEach(function(dimKey) {
                        options.push({
                            value : dimKey,
                            label : dimKey,
                        });
                    })
                    self._updateDimKeysSelect(options);

                    if (options.length > 0) {
                        self._updateDimKeysDimValuesStates();
                    }
                    else {
                        self._updateDimKeysDimValuesStates();
                    }
                });
            }
            else {
                this._updateDimKeysDimValuesStates();
            }
        },

        _getDimValueOptions : function(showProgressIndicator, searchString, callback) {
            var self = this;
            if (this._rightGrid != null && this._dimKeys != null) {
                if (this._rightGrid.grid.collection.data.length == 1) {
                    // one metric only... get literal dim_values
                    var metric_id = (this._rightGrid.grid.collection.data[0]).value;
                    var toks = metric_id.split("|");
                    var svc    = toks[0];
                    var comp   = toks[1];
                    var app    = toks[2];
                    var metric = toks[3];
                    if (showProgressIndicator) {
                        this._showProgressMessage("Retrieving applicable dimension values...");
                    }
                    this.editorConfig.getDimValueOptions(svc, comp, app, metric, this._dimKeys, searchString, function(response) {
                        if (showProgressIndicator) {
                            self._hideProgressMessage("");
                        }
                        if (response.status == "OK") {
                            var options = [];
                            self._addWildcardOptions(options, self._dimKeys, response.value);
                            response.value.forEach(function(dimValue) {
                                options.push({
                                    value : dimValue,
                                    label : dimValue,
                                });
                            })
                            callback(options);
                        }
                    });
                }
                else {
                    // if multiple metrics selected, we ONLY allow wildcards
                    var options = [];
                    this._addWildcardOptions(options, this._dimKeys, null);
                    callback(options);
                }
            }
        },

        _updateDimValueOptions : function() {
            var self = this;
            this._dimValues = null;
            this._setDimValuesSelect("value", "", false);
            this._updateDimValuesSelect([]);
            switch (this._dimValuesControl) {
                case "single-select":
                case "multi-select":
                    this._getDimValueOptions(true, null, function(options) {
                        self._updateDimValuesSelect(options);
                    });
                    break;
                case "dual-list-builder":
                    break;
            }
        },

        _addWildcardOptions : function(options, dimKeys, dimValuesList) {
            dimKeys = dimKeys.split("|");
            var dimVars = [];
            for (var i=0; i<dimKeys.length; i++) {
                dimVars.push("${" + dimKeys[i] + "}");
            }
            dimVars = dimVars.join("|");
            options.push({
                value : dimVars,
                label : dimVars,
            });

            function addToTree(tree, values)
            {
                var value = values.shift();
                for (var i=0; i<tree.length; i++) {
                    var obj = tree[i];
                    if (obj.value == value) {
                        // found node
                        if (values.length > 0) {
                            if (obj.tree == null) {
                                obj.tree = [];
                            }
                            addToTree(obj.tree, values);
                        }
                        return;
                    }
                }
                var obj = {
                    value : value,
                };
                tree.push(obj);
                if (values.length > 0) {
                    obj.tree = [];
                    addToTree(obj.tree, values);
                }
            }

            function addOptions(keys, tree)
            {
                var key = keys.shift();
                for (var i=0; i<tree.length; i++) {
                    var node = tree[i];
                    if (node.tree != null) {
                        var dimVars = [];
                        dimVars.push(node.value);
                        for (var j=0; j<keys.length; j++) {
                            dimVars.push("${" + keys[j] + "}");
                        }
                        dimVars = dimVars.join("|");
                        options.push({
                            value : dimVars,
                            label : dimVars,
                        });
                        addOptions(keys.slice(0), node.tree);
                    }
                }
            }
            
            if (dimValuesList != null) {
                var dimTree = [];
                dimValuesList.forEach(function(dimValues) {
                    dimValues = dimValues.split("|");
                    addToTree(dimTree, dimValues);
                });
                addOptions(dimKeys.slice(0), dimTree);
            }
        },

        _onChangeDimKeys : function(value) {
            if (value == "#") {
                this._dimKeys = null;
            }
            else {
                this._dimKeys = value;
            }
            this._updateDimKeysDimValuesStates();
            this._updateDimValueOptions();
            if (this._dimKeys != null && this._rightGrid.grid.collection.data.length > 1) {
                // multiple metrics selected, we only have wildcard... so get wildcard options
                // and set to FIRST and ONLY
                var options = [];
                this._addWildcardOptions(options, this._dimKeys, null);
                if (options.length == 1) {
                    switch (this._dimValuesControl) {
                        case "single-select":
                            this._dimValues = options[0].value;
                            break;
                        case "multi-select":
                            this._dimValues = [options[0].value];
                            break;
                        case "dual-list-builder":
                            this._dimValues = [options[0].value];
                            break;
                    }
                    this._setDimValuesSelect("value", this._dimValues, false);
                }
            }
        },

        _onChangeDimValues : function(item) {
            var value = item.value;
            switch (this._dimValuesControl) {
                case "single-select":
                    if (value == "#") {
                        this._dimValues = null;
                    }
                    else {
                        this._dimValues = value;
                    }
                    break;
                case "multi-select":
                    if (value.length == 0) {
                        this._dimValues = null;
                    }
                    else {
                        this._dimValues = value;
                    }
                    break;
                case "dual-list-builder":
                    break;
            }
        },

        _onChangeWindowSize : function(value) {
            this._windowSize = value;
        },

        _onChangeAlgorithm : function(value) {
            this._algorithm = value;
            this._updateThresholdPolicyControl();
        },
        
        _onChangeThresholdPolicy : function(value) {
            this._thresholdPolicy = value;
        },
        
        _onChangeSync : function(evt) {
            this._sync = evt.currentTarget.checked;
        },

        _updateDimKeysSelect : function(options) {
            this._dimKeysSelect.removeOption(this._dimKeysSelect.getOptions());
    	    this._dimKeysSelect.addOption(this.OPTION_SELECT.concat(options));
        },

        _createDimValuesSelect : function() {
            var self = this;
            switch (this._dimValuesControl) {
                case "single-select":
                    this._dimValuesSelect = FormUtil.createSingleSelect("dimValuesSelect", this._dimValuesTD, [], null, "width:100%;", null, lang.hitch(this, "_onChangeDimValues"));
                    break;
                case "multi-select":
                    this._dimValuesSelect = FormUtil_createMultiSelect("dimValuesSelect", this._dimValuesTD, [], null, "width:100%;", null, lang.hitch(this, "_onChangeDimValues"));
                    break;
                case "dual-list-builder":
                    AppUtil.removeAllChildrenOf(this._dimValuesTD);
                    domStyle.set(this._dimValuesTD, "padding-right", "0px");
                    var textbox = FormUtil.createTextBox("dimValuesText", this._dimValuesTD, "", " ", null, true, null);
                    domClass.add(textbox.domNode, "DimValuesTextbox");
                    var button = FormUtil.createButton(this._dimValuesTD, "...", null, null, function(evt) {
                        require(["af/controls/PopupEditorDialog", "dojo/domReady!"], function(PopupDialogClazz) {
                            Widget("/app/dbp/user/via_common/dbpm/VIA - Common/Dual List Builder", function(DualListBuilder) {
                                var dialogConfig = {
                                    vtWidth     : "600px",
                                    vtHeight    : "400px",
                                    title       : "Select Dimension Values",
                                    editorClass : DualListBuilder,
                                    editorConfig : {
                                        getOptions : function(values, searchString, callback) {
                                            self._getDimValueOptions(false, searchString, callback);
                                        },
                                        values : {}
                                    },
                                    model : self._dimValues || [],
                                    onClickOk : function(value) {
                                        self._dimValues = value;
                                        if (self._dimValues.length > 0) {
                                            self._setDimValuesSelect("value", self._dimValues.join(","), false);
                                        }
                                        else {
                                            self._setDimValuesSelect("value", "", false);
                                        }
                                    }
                                };
                                var dialog = new PopupDialogClazz(dialogConfig);
                                // hide description area
                                domStyle.set(dialog._widget.editorTitleLabel, {
                                    "display"     : "none",
                                    "height"      : "0px",
                                    "line-height" : "0px"
                                });
                                // hide maximize button
                                domStyle.set(dialog._dialog.resizeBtn, "display", "none");
                                domAttr.set(dialog.main, {"title":""});
                                domClass.add(dialog.domNode, "popup-dialog");
                                dialog.show();
                            });
                        });
                    });
                    domClass.add(button.domNode, "DimValuesButton");
                    this._dimValuesSelect = {
                        textbox : textbox,
                        button  : button,
                    };
                    break;
            }
        },

        _updateDimValuesSelect : function(options) {
            switch (this._dimValuesControl) {
                case "single-select":
            	    this._dimValuesSelect.removeOption(this._dimValuesSelect.getOptions());
            	    this._dimValuesSelect.addOption(this.OPTION_SELECT.concat(options));
                    break;
                case "multi-select":
            	    for (var k=0; k<options.length; k++) {
            	        var option = options[k];
            	        option.id = option.value;
            	    }
            	    this._dimValuesSelect.updateOptions(options);
                    break;
                case "dual-list-builder":
                    break;
            }
        },

        _setDimValuesSelect : function(name, value, notify) {
            switch (this._dimValuesControl) {
                case "single-select":
                    this._dimValuesSelect.set(name, value, notify);
                    break;
                case "multi-select":
                    this._dimValuesSelect.set(name, value, notify);
                    break;
                case "dual-list-builder":
                    switch (name) {
                        case "disabled":
                            this._dimValuesSelect.button.set(name, value, notify);
                            break;
                        case "value":
                            this._dimValuesSelect.textbox.set(name, value, notify);
                            break;
                    }
                    break;
            }
        },

        _updateThresholdPolicyControl : function() {
            switch (this._algorithm) {
                case "score":
                    this._policySelect.removeOption(this._policySelect.getOptions());
                    this._policySelect.addOption([{
                        value : "above",
                        label : "Above (Positive) Threshold",
                    }, {
                        value : "below",
                        label : "Below (Negative) Threshold",
                    }]);
                    this._policySelect.set("value", this._thresholdPolicy, false);
                    this._policySelect.set("disabled", false);
                    domStyle.set(this._policySelect.domNode, "pointer-events", "auto");
                    break;
                case "simple_threshold":
                    this._policySelect.removeOption(this._policySelect.getOptions());
                    this._policySelect.addOption([{
                        value : "above",
                        label : "Above Threshold",
                    }, {
                        value : "below",
                        label : "Below Threshold",
                    }]);
                    this._policySelect.set("value", this._thresholdPolicy, false);
                    this._policySelect.set("disabled", false);
                    domStyle.set(this._policySelect.domNode, "pointer-events", "auto");
                    break;
                case "declared":
                    this._policySelect.removeOption(this._policySelect.getOptions());
                    this._policySelect.addOption([{
                        value : "none",
                        label : "(not applicable)",
                    }]);
                    this._policySelect.set("value", "none", false);
                    this._policySelect.set("disabled", true);
                    domStyle.set(this._policySelect.domNode, "pointer-events", "none");
                    break;
            }
        },
]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[    function createGrid(parentNode, onSelect, data)
    {
        var div = domConstruct.create("div", {});
        parentNode.appendChild(div);
        
        var columns = [{
            field : "label",
            label : "Label",
            style : "font-family:monospace;cursor:pointer;",
            sortable : true,
        }];
        var store = GridUtil.createGridStore("value", data);
        var grid = GridUtil.createGridWidget("Left", div, false, null, columns, store,
                                             onSelect, null, "extended", onSelect, null);
        grid.set('sort', 'label');
        return {
            store : store,
            grid  : grid,
        };
    }

    function getSelectedItems(grid)
    {
        var items = [];
        for (var i=0; i<grid.collection.data.length; i++) {
            var item = grid.collection.data[i];
            if (grid.selection[item.value] == true) {
                items.push(item);
            }
        }
        return items;
    }
    
    // work-around to support updateOption
    // ... what's built into FormUtil does not support updateOptions
    // code patched in 3.7.1
    // -engkee
    function FormUtil_createMultiSelect(name, parentNode, choices, values, style, tooltip, callback)
    {
        if (choices == null) choices = [];
        if (values != null && typeof values == "string") values = values.split(",");
        else choices = lang.clone(choices);
        var options = [];
        var constraints = [];
        var selected = [];
        array.forEach(choices, function(choice, index) {
            if (choice.isGroupLabel == true) {
                var option = {
                    id           : generateRandomUuid(),
                    label        : choice.label,
                    isGroupLabel : true,
                };
                options.push(option);
            }
            else {
                var option = {
                    id    : choice.value,
                    label : choice.label,
                };
                options.push(option);
                constraints.push(option.id);
                if (values != null && values.indexOf(choice.value) != -1) {
                    selected.push(option.id);
                }
            }
        });
        var config = {
            options      : options, 
            multiple     : "true",
            enableAll    : "true",
            enableOthers : "false",
            withQuotes   : "false",
        };
        var onSelect = null;
        if (callback != null) {
            var prevValue = selected;
            onSelect = function(item) {
                var selected = item.value != "" ? item.value.split(",").sort() : [];
                if (JSON.stringify(selected) !== JSON.stringify(prevValue)) {
                    callback({name: name, value: selected, prev: prevValue});
                    prevValue = selected;
                }
            };
        }
        var select = ViewerUtil.createControlString(name, "enumeration", constraints.join(","), selected.join(","), config, null, onSelect, style, 'button');
        if (tooltip != null) {
            select.set("title", tooltip);
        }
        select.placeAt(parentNode);
        return select;
    }
]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[
            this._windowSize = "5/5";
            this._algorithm = "score";
            this._thresholdPolicy = "above";
            this._sync = false;

            //this._dimValuesControl = this.editorConfig.dimValuesControl || "single-select";
            //this._dimValuesControl = this.editorConfig.dimValuesControl || "multi-select";
            this._dimValuesControl = this.editorConfig.dimValuesControl || "dual-list-builder";

            this._options = this.editorConfig.options || {};

            this._metricFilterRegex = this._options["metricFilterRegex"];

            // for backward compat
            if (this._options["enableAnomalyWindow"] == null) {
                this._options["enableAnomalyWindow"] = true;
            }
]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[
            this._createDimValuesSelect();

            if (this._options["enableAnomalyWindow"] == true) {
                domStyle.set(this._trWindowProperty, "display", "");
            }
            if (this._options["enableAlgorithm"] == true) {
                domStyle.set(this._trAlgorithmProperty, "display", "");
            }
            if (this._options["enableThresholdPolicy"] == true) {
                domStyle.set(this._trPolicyProperty, "display", "");
            }

            if (this._options["syncText"] != null) {
                this._divSync.innerHTML = this._options["syncText"];
            }
            else {
                domStyle.set(this._trSync, "display", "none");
            }

            switch (this._dimValuesControl) {
                case "single-select":
                case "multi-select":
                    break;
                case "dual-list-builder":
                    domStyle.set(this._trStatusProgress, "display", "none");
                    break;
            }
]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[
            var box = domGeom.getMarginBox(this._formDiv);
            domStyle.set(this._rightDiv, "height", "calc(100% - " + box.h + "px)");
]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<table style="width:100%;height:100%;">
    <style>
        .AddRemoveButton span {
            width: 30px;
        }
        .DimValuesButton {
            font-size:7pt;
            font-family:arial;
            margin-top:3px;
        }
        .DimValuesButton .dijitButtonNode {
            border-radius:2px !important;
        }
        .DimValuesTextbox {
            border:thin solid lightgray;
            background-color:#efefef;
            font-family:monospace;
            color:black;
            min-width:100px;
        	height:20px;
        	width:calc(100% - 28px) !important;
        	pointer-events:none;
        }
    </style>
    <tr>
        <td colspan="3" style="width:100%;height:30px;">
            <table style="width:100%;height:100%;">
                <tr>
                    <td style="width:1%;">Search:</td>
                    <td style="width:99%;">
                        <input type="text"
                               style="width:calc(100% - 0px);font-family:monospace;"
                               data-dojo-type="dijit/form/TextBox"
                               data-dojo-props="trim:true"
                               data-dojo-attach-point="_inputSearch"
                               data-dojo-attach-event="change:_onChangeSearch,onKeyUp:_onKeyUpSearch"/>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td style="width:49%;height:100%;">
            <div data-dojo-attach-point='_leftDiv'
                 style="width:100%;height:100%;background-color:white;"
                 class="via-scroller">
            </div>
        </td>
        <td style="width:2%;height:100%;text-align:center;">
            <table>
                <tr style="height:49%;">
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>
                        <button data-dojo-type="dijit.form.Button"
                                data-dojo-attach-point='_btnAddAll'
                                data-dojo-attach-event="click:_onClickAddAll"
                                type="button" class="AddRemoveButton">&gt;&gt;&nbsp;</button>
                    </td>
                </tr>
                <tr>
                    <td>
                        <button data-dojo-type="dijit.form.Button"
                                data-dojo-attach-point='_btnAdd'
                                data-dojo-attach-event="click:_onClickAdd"
                                type="button" class="AddRemoveButton">&gt;&nbsp;</button>
                    </td>
                </tr>
                <tr>
                    <td>
                        <button data-dojo-type="dijit.form.Button"
                                data-dojo-attach-point='_btnRemove'
                                data-dojo-attach-event="click:_onClickRemove"
                                type="button" class="AddRemoveButton">&lt;&nbsp;</button>
                    </td>
                </tr>
                <tr>
                    <td>
                        <button data-dojo-type="dijit.form.Button"
                                data-dojo-attach-point='_btnRemoveAll'
                                data-dojo-attach-event="click:_onClickRemoveAll"
                                type="button" class="AddRemoveButton">&lt;&lt;&nbsp;</button>
                    </td>
                </tr>
                <tr style="height:49%;">
                    <td>&nbsp;</td>
                </tr>
            </table>
        </td>
        <td style="width:49%;height:100%;">
            <div data-dojo-attach-point='_rightDiv'
                 style="width:100%;height:calc(100% - 95px);background-color:white;"
                 class="via-scroller">
            </div>
            <table data-dojo-attach-point='_formDiv'
                   cellspacing="0" cellpadding="0" border="0"
                   style="width:100%;padding-top:5px;">
                <tr>
                    <td data-dojo-attach-point='_dimKeysLabel'
                        style="width:1%;white-space:nowrap;text-align:right;padding:5px 3px 5px 3px;">Dim Keys:</td>
                    <td style="width:99%;padding:5px 4px 5px 0px;">
                        <select data-dojo-type="dijit/form/Select"
                                data-dojo-attach-point='_dimKeysSelect'
                                data-dojo-attach-event="change:_onChangeDimKeys"
                                style="width:100%;">
                        </select>
                    </td>
                </tr>
                <tr>
                    <td data-dojo-attach-point='_dimValuesLabel'
                        style="width:1%;white-space:nowrap;text-align:right;padding:5px 3px 5px 3px;">Dim Values:</td>
                    <td data-dojo-attach-point='_dimValuesTD' style="width:99%;padding:5px 4px 5px 0px;">
                    </td>
                </tr>
                <tr data-dojo-attach-point='_trWindowProperty' style="display:none;">
                    <td style="width:1%;white-space:nowrap;text-align:right;padding:5px 3px 5px 3px;">Window Size:</td>
                    <td style="width:99%;padding:5px 4px 5px 0px;">
                        <select data-dojo-type="dijit/form/Select"
                                data-dojo-attach-point='_windowSelect'
                                data-dojo-attach-event="change:_onChangeWindowSize"
                                style="width:100%;">
                            <option value="5/5" selected="selected">5 min window / 5 min step</option>
                            <option value="30/5">30 min window / 5 min step</option>
                        </select>
                    </td>
                </tr>
                <tr data-dojo-attach-point='_trAlgorithmProperty' style="display:none;">
                    <td style="width:1%;white-space:nowrap;text-align:right;padding:5px 3px 5px 3px;">Algorithm:</td>
                    <td style="width:99%;padding:5px 4px 5px 0px;">
                        <select data-dojo-type="dijit/form/Select"
                                data-dojo-attach-point='_algorithmSelect'
                                data-dojo-attach-event="change:_onChangeAlgorithm"
                                style="width:100%;">
                            <option value="score" selected="selected">Baseline Score</option>
                            <option value="simple_threshold">Simple Threshold</option>
                            <option value="declared">Declared Incident</option>
                        </select>
                    </td>
                </tr>
                <tr data-dojo-attach-point='_trPolicyProperty' style="display:none;">
                    <td style="width:1%;white-space:nowrap;text-align:right;padding:5px 3px 5px 3px;">Threshold Policy:</td>
                    <td style="width:99%;padding:5px 4px 5px 0px;">
                        <select data-dojo-type="dijit/form/Select"
                                data-dojo-attach-point='_policySelect'
                                data-dojo-attach-event="change:_onChangeThresholdPolicy"
                                style="width:100%;">
                            <option value="above" selected="selected">Above Threshold</option>
                            <option value="below">Below Threshold</option>
                        </select>
                    </td>
                </tr>
                <tr data-dojo-attach-point='_trSync' style="padding-top:10px;display:none;">
                    <td colspan="2" style="width:100%;white-space:nowrap;padding:15px 3px 5px 3px;">
                        <input type="checkbox" checked="checked" style="vertical-align:top;" data-dojo-attach-point='_syncCheck' data-dojo-attach-event="change:_onChangeSync">
                        <div data-dojo-attach-point='_divSync' style="display:inline-block;white-space:normal;padding:0px 20px 0px 5px;text-align:left;">
                            Lorem ipsum dolor sit amet, mucius deseruisse omittantur vel at. Sit in quas paulo, assum tacimates ea sed.
                            Assum feugiat eos in. Nec torquatos democritum ad, et mea cetero inimicus, ex vidit euripidis eam.
                        </div>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr data-dojo-attach-point='_trStatusProgress'>
        <td colspan="2" style="width:100%;height:20px;vertical-align:bottom;">
            <div data-dojo-attach-point='_statusDiv' style="width:100%;padding-top:5px;vertical-align:bottom;font-size:12px;font-style:italic;overflow:hidden;"></div>
        </td>
        <td data-dojo-attach-point='_progressBarTd'>
        </td>
    </tr>
</table>
]]>
        </HtmlText>
      </Widget>
      <Widget name="MissingMetricInfoWidget" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#postCreate">
          <![CDATA[
            this._initMetricList();
]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[
        OPTION_SELECT : [{
            value : "#",
            label : "- select -",
        }],

        // MUST implement resize, setModel() and getModel() if to be used in edit mode
        
        resize : function() {
        },
        
        setModel : function(values) {
            //alert("setModel()");
        },
        
        getModel : function() {
            this._model = [];
            if (this._grid != null) {
                for (var i=0; i<this._grid.grid.collection.data.length; i++) {
                    var item = this._grid.grid.collection.data[i];
                    if (item.action != "") {
                        this._model.push({
                            metric_id : item.value,
                            action    : item.action,
                            dim_keys  : item.dim_keys,
                        });
                    }
                }
            }
            return {
                model : this._model,
            };
        },

        _initMetricList : function() {
            if (this._grid == null) {
                this._grid = createGrid(this._gridDiv, lang.hitch(this, "_onMetricSelect"), this._metrics);
            }
            else {
                this._grid.store.setData(this._metrics);
                this._grid.grid.refresh();
            }
        },

        _onMetricSelect : function(evt) {
            this._selectedItems = getSelectedItems(evt.grid);
            this._updateActionDimKeysStates(null);
        },
        
        _updateActionDimKeysStates : function(action) {
            if (action == null) {
                action = null;
                this._selectedItems.forEach(function(item) {
                    if (action == null) action = item.action;
                    else if (action != item.action) action = "";
                });
                this._actionSelect.set("value", action, false);
            }
            switch (action) {
                case "":
                case "Delete":
                    this._dimKeysSelect.set("disabled", true);
                    domStyle.set(this._dimKeysLabel, "opacity", 0.3);
                    break;
                case "Update":
                    this._updateDimKeyOptions();
                    break;
            }
        },

        _getDimKeyOptions : function(dimKeySets, metricIds, callback) {
            if (metricIds.length == 0) {
                if (dimKeySets.length > 0) {
                    var dimKeys = dimKeySets.shift();
                    while (dimKeySets.length > 0) {
                        var tmp = dimKeySets.shift();
                        dimKeys = dimKeys.filter(function(dimKey) {
                            return tmp.indexOf(dimKey) != -1;
                        });
                    }
                    callback(dimKeys);
                }
                else {
                    callback([]);
                }
            }
            else {
                var metricId = metricIds.shift();
                var toks = metricId.split("|");
                var svc    = toks[0];
                var comp   = toks[1];
                var app    = toks[2];
                var metric = toks[3];
                var self = this;
                this.editorConfig.getDimKeyOptions(svc, comp, app, metric, function(response) {
                    if (response.status == "OK") {
                        dimKeySets.push(response.value);
                    }
                    self._getDimKeyOptions(dimKeySets, metricIds, callback);
                });
            }
        },

        _updateDimKeyOptions : function() {
            var self = this;
            this._dimKeysSelect.set("value", "", false);
            this._updateDimKeysSelect([]);
            this._dimKeysSelect.set("disabled", true);
            domStyle.set(this._dimKeysLabel, "opacity", 0.3);
            if (this._grid != null) {
                var metric_ids = [];
                for (var i=0; i<this._selectedItems.length; i++) {
                    metric_ids.push((this._selectedItems[i]).value);
                }
                this._getDimKeyOptions([], metric_ids, function(dimKeys) {
                    var options = [];
                    dimKeys.forEach(function(dimKey) {
                        options.push({
                            value : dimKey,
                            label : dimKey,
                        });
                    })
                    self._updateDimKeysSelect(options);
                    if (options.length > 0) {
                        self._dimKeysSelect.set("disabled", false);
                        domStyle.set(self._dimKeysLabel, "opacity", 1.0);
                    }
                });
            }
        },

        _onChangeDimKeys : function(value) {
            var dim_keys = value == "#" ? "" : value;
            if (this._selectedItems != null) {
                for (var i=0; i<this._selectedItems.length; i++) {
                    var item = this._selectedItems[i];
                    item["dim_keys"] = JSON.stringify(value.split("|"));
                    this._grid.store.put(item);
                }
                this._updateActionDimKeysStates(value);
            }
        },

        _onChangeAction : function(value) {
            if (this._selectedItems != null) {
                for (var i=0; i<this._selectedItems.length; i++) {
                    var item = this._selectedItems[i];
                    item["action"] = value;
                    if (value == "Delete") {
                        item["dim_keys"] = "";
                    }
                    else if (value == "Update") {
                        item["dim_keys"] = "[]";
                    }
                    this._grid.store.put(item);
                }
                this._updateActionDimKeysStates(value);
            }
        },

        _updateDimKeysSelect : function(options) {
            this._dimKeysSelect.removeOption(this._dimKeysSelect.getOptions());
    	    this._dimKeysSelect.addOption(this.OPTION_SELECT.concat(options));
        },
]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[    function createGrid(parentNode, onSelect, data)
    {
        var div = domConstruct.create("div", {});
        parentNode.appendChild(div);
        
        var columns = [{
            field : "label",
            label : "Label",
            style : "font-family:monospace;cursor:pointer;",
            sortable : true,
        }, {
            field : "action",
            label : "Action",
            style : "font-family:monospace;cursor:pointer;width:100px;",
            sortable : true,
        }, {
            field : "dim_keys",
            label : "Dim Keys",
            style : "font-family:monospace;cursor:pointer;width:200px;",
            sortable : true,
        }];
        var store = GridUtil.createGridStore("value", data);
        var grid = GridUtil.createGridWidget("Grid", div, true, null, columns, store,
                                             onSelect, null, "extended", onSelect, null);
        grid.set('sort', 'label');
        return {
            store : store,
            grid  : grid,
        };
    }

    function getSelectedItems(grid)
    {
        var items = [];
        for (var i=0; i<grid.collection.data.length; i++) {
            var item = grid.collection.data[i];
            if (grid.selection[item.value] == true) {
                items.push(item);
            }
        }
        return items;
    }
    
    // work-around to support updateOption
    // ... what's built into FormUtil does not support updateOptions
    // code patched in 3.7.1
    // -engkee
    function FormUtil_createMultiSelect(name, parentNode, choices, values, style, tooltip, callback)
    {
        if (choices == null) choices = [];
        if (values != null && typeof values == "string") values = values.split(",");
        else choices = lang.clone(choices);
        var options = [];
        var constraints = [];
        var selected = [];
        array.forEach(choices, function(choice, index) {
            if (choice.isGroupLabel == true) {
                var option = {
                    id           : generateRandomUuid(),
                    label        : choice.label,
                    isGroupLabel : true,
                };
                options.push(option);
            }
            else {
                var option = {
                    id    : choice.value,
                    label : choice.label,
                };
                options.push(option);
                constraints.push(option.id);
                if (values != null && values.indexOf(choice.value) != -1) {
                    selected.push(option.id);
                }
            }
        });
        var config = {
            options      : options, 
            multiple     : "true",
            enableAll    : "true",
            enableOthers : "false",
            withQuotes   : "false",
        };
        var onSelect = null;
        if (callback != null) {
            var prevValue = selected;
            onSelect = function(item) {
                var selected = item.value != "" ? item.value.split(",").sort() : [];
                if (JSON.stringify(selected) !== JSON.stringify(prevValue)) {
                    callback({name: name, value: selected, prev: prevValue});
                    prevValue = selected;
                }
            };
        }
        var select = ViewerUtil.createControlString(name, "enumeration", constraints.join(","), selected.join(","), config, null, onSelect, style, 'button');
        if (tooltip != null) {
            select.set("title", tooltip);
        }
        select.placeAt(parentNode);
        return select;
    }
]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[
            var self = this;

            this._metrics = [];
            (this.editorConfig.metrics || []).forEach(function(metricId) {
                self._metrics.push({
                    value    : metricId,
                    label    : metricId,
                    action   : "",
                    dim_keys : "",
                });
            });
            this._options = this.editorConfig.options || {};
]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[
]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[
            var box1 = domGeom.getMarginBox(this._descDiv);
            var box2 = domGeom.getMarginBox(this._formDiv);
            domStyle.set(this._gridDiv, "height", "calc(100% - " + (box1.h+box2.h) + "px)");
]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">
    <style>
        .AddRemoveButton span {
            width: 30px;
        }
        .DimValuesButton {
            font-size:7pt;
            font-family:arial;
            margin-top:3px;
        }
        .DimValuesButton .dijitButtonNode {
            border-radius:2px !important;
        }
        .DimValuesTextbox {
            border:thin solid lightgray;
            background-color:#efefef;
            font-family:monospace;
            color:black;
            min-width:100px;
        	height:20px;
        	width:calc(100% - 28px) !important;
        	pointer-events:none;
        }
    </style>
    <div data-dojo-attach-point='_descDiv' style="padding:5px;white-space:normal;">
        These metric IDs exist in the QDC table but are missing from the INFO table.
        They are likely manually added to the QDC table.
        If valid, we need to create corresponding entries in the INFO table.
        But there is NOT enough detail in QDC table to auto-create in the INFO table,
        specifically, we need user to identify the applicable dim_keys.
    </div>
    <div data-dojo-attach-point='_gridDiv'
         style="width:100%;height:100%;background-color:white;"
         class="via-scroller">
    </div>
    <table data-dojo-attach-point='_formDiv'
           cellspacing="0" cellpadding="0" border="0"
           style="width:100%;padding-top:5px;">
        <tr>
            <td style="width:1%;white-space:nowrap;text-align:right;padding:5px 3px 5px 3px;">Action:</td>
            <td style="min-width:120px;padding:5px 4px 5px 0px;">
                <select data-dojo-type="dijit/form/Select"
                        data-dojo-attach-point='_actionSelect'
                        data-dojo-attach-event="change:_onChangeAction"
                        style="width:100px;">
                    <option value="#">- select -</option>
                    <option value="Delete">Delete</option>
                    <option value="Update">Update</option>
                </select>
            </td>
            <td data-dojo-attach-point='_dimKeysLabel'
                style="width:1%;white-space:nowrap;text-align:right;padding:5px 3px 5px 30px;">Dim Keys:</td>
            <td style="width:98%;padding:5px 4px 5px 0px;">
                <select data-dojo-type="dijit/form/Select"
                        data-dojo-attach-point='_dimKeysSelect'
                        data-dojo-attach-event="change:_onChangeDimKeys"
                        style="width:100%;">
                </select>
            </td>
        </tr>
    </table>
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
      <Function name="__addSettingItems" args="items,available,config" private="true">
        <CodeText>
          <![CDATA[for (var i=0; i<available.length; i++) {
    if (config[available[i].name] != undefined) {
        items.push(available[i]);
    }
}
]]>
        </CodeText>
      </Function>
      <Function name="__inclSettingItems" args="available,config" private="true">
        <CodeText>
          <![CDATA[for (var i=0; i<available.length; i++) {
    if (config[available[i].name] != undefined) {
        return true;
    }
}
return false;
]]>
        </CodeText>
      </Function>
      <Function name="_addAnomalyBaselineScoringConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "score_method",
        type  : "enumeration",
        label : "Score Method",
        enums : [
            "zscore=Z-Score",
            "mzscore=MZ-Score",
            "cscore=C-Score",
        ],
    },
    {
        name  : "stat_seasonality",
        type  : "enumeration",
        label : "Stat Seasonality",
        enums : [
            "hourly=Hourly",
            "weekly=Weekly",
            "none=None",
        ],
    },
    {
        name  : "anomaly_trigger",
        type  : "enumeration",
        label : "Anomaly Trigger",
        enums : [
            "upper=Upper",
            "lower=Lower",
            "both=Both",
        ],
    },
    {
        name  : "lower_scale",
        type  : "number",
        label : "Lower Scale",
    },
    {
        name  : "upper_scale",
        type  : "number",
        label : "Upper Scale",
    },
    {
        name  : "enabled",
        type  : "boolean",
        label : "Enabled",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "baseline_scoring_section",
        type  : "section",
        label : "Baseline Scoring Setting",
    });
    items.push({
        name  : "baseline_scoring_label",
        type  : "label",
        text  : [
            "Configure baseline scoring settings for determining anomaly.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addAnomalyGeneralConfig" args="items,config,tzList" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "timezone",
        type  : "enumeration",
        label : "Timezone",
        enums : tzList,
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "general_section",
        type  : "section",
        label : "General Setting",
    });
    items.push({
        name  : "general_label",
        type  : "label",
        text  : [
            "Configure timezone and other basic parameters for determining anomaly.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addBaselineAlgorithmConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    //{
    //    name  : "algorithm",
    //    type  : "enumeration",
    //    label : "Algorithm",
    //    enums : [
    //        "baseline=Baseline",
    //        "simple_threshold=Simple Threshold",
    //    ],
    //},
    {
        name  : "seasonality",
        type  : "enumeration",
        label : "Seasonality",
        enums : [
            "dow=Day of Week",
            "ww=Weekday/Weekend",
        ],
    },
    {
        name  : "fill_policy",
        type  : "boolean",
        label : "Fill Policy",
    },
    {
        name  : "ignore_baseline",
        type  : "boolean",
        label : "Ignore Baseline",
    },
    {
        name  : "ignore_anomaly",
        type  : "boolean",
        label : "Ignore Anomaly",
    },
    {
        name  : "enabled",
        type  : "boolean",
        label : "Enabled",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "algorithm_section",
        type  : "section",
        label : "Algorithm Setting",
    });
    items.push({
        name  : "algorithm_label",
        type  : "label",
        text  : [
            "Configure algorithm settings for computing baselines.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addBaselineGeneralConfig" args="items,config,tzList" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "timezone",
        type  : "enumeration",
        label : "Timezone",
        enums : tzList,
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "general_section",
        type  : "section",
        label : "General Setting",
    });
    items.push({
        name  : "general_label",
        type  : "label",
        text  : [
            "Configure timezone and other basic parameters for computing baseline.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentCausationConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var measureOptions = [
    "_count=Number of Associated Events",
    "_baseline=Baseline of Associated Events",
    "_diff=+/- to Baseline",
    "_diffPct=+/- Percentage to Baseline",
    "_sScore=S-Score",
    "_nsScore=Normalized S-Score",
    "_eScore=E-Score",
    "_pTotal=Proportion of Total Events",
    "_pBaseline=Baseline Proportion of Total Events",
    "_pctDev=Deviation Proportion of Total Events",
    "_relDiff=Relative Difference over Baseline",
];
var ITEMS = [
    {
        name  : "causation_measure",
        type  : "enumeration",
        label : "Causation Measure",
        enums : measureOptions,
    },
    {
        name  : "causation_top_count",
        type  : "integer",
        label : "Causation Top Count",
    },
    {
        name  : "causation_min_measure",
        type  : "number",
        label : "Causation Min Measure",
    },
    {
        name  : "causation_rule_name",
        type  : "string",
        label : "Causation Rule Name",
    },
    {
        name  : "causation_suppl_measure",
        type  : "enumeration",
        label : "Causation Supplemental Measure",
        enums : measureOptions,
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "causation_section",
        type  : "section",
        label : "Causation Setting",
    });
    items.push({
        name  : "causation_label",
        type  : "label",
        text  : [
            "Configure dimension info to include in notification to help determine causation.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentCooldownConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "cooldown_period",
        type  : "integer",
        label : "Cooldown Period (sec)",
    },
    {
        name  : "min_metric_vol",
        type  : "number",
        label : "Min Metric Value",
    },
    {
        name  : "min_metric_dev",
        type  : "percent",
        label : "Min Metric Deviation (%)",
    },
    {
        name  : "min_call_vol",
        type  : "number",
        label : "Min Call Volume",
    },
    {
        name  : "min_call_dev",
        type  : "percent",
        label : "Min Call Deviation (%)",
    },
];
var ALGORITHM_BASED_FILTERS = {
    "score" : {
        "cooldown_period" : true,
        "min_metric_vol" : true,
        "min_metric_dev" : true,
        "min_call_vol" : true,
        "min_call_dev" : true,
    },
    "simple_threshold" : {
        "cooldown_period" : true,
        "min_metric_vol" : true,
    },
    "declared" : {
    }
};
var ALGORITHM_BASED_TEXT = {
    "score" : [
        "... UNLESS metric value is above the required minimum value and deviation is above the set minimum deviation",
        "... UNLESS call volume is above the required minimum volume and deviation is above the set minimum deviation.",
    ],
    "simple_threshold" : [
        "... UNLESS metric value is above the required minimum value",
        "... UNLESS incident is escalated from Warmup and metric value is above the warmup threshold",
    ],
    "declared" : [
    ]
};
var filters = ALGORITHM_BASED_FILTERS[config["algorithm"]];
var APPLICABLE_ITEMS = [];
ITEMS.forEach(function(item) {
    if (filters[item.name] == true) {
        APPLICABLE_ITEMS.push(item);
    }
});
ITEMS = APPLICABLE_ITEMS;
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "cooldown_section",
        type  : "section",
        label : "Cooldown Setting",
    });
    items.push({
        name  : "cooldown_label",
        type  : "label",
        text  : [
            "Configure thresholds and timing for handling incident cooldown.",
            "Cooldown starts if score/value is below the set Low threshold",
        ].concat(ALGORITHM_BASED_TEXT[config["algorithm"]], [
            "Cooldown completes if incident stays in continuous cooldown state for the period specified."
        ])
    });
    items.push({
        name  : "cooldown_error",
        type  : "label",
        text  : [],
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentEscalationConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "med_threshold_period",
        type  : "integer",
        label : "Medium Threshold Period (sec)",
    },
    {
        name  : "med_call_vol_pct",
        type  : "percent",
        label : "Medium Call Deviation (%)",
    },
    {
        name  : "high_threshold_period",
        type  : "integer",
        label : "High Threshold Period (sec)",
    },
    {
        name  : "high_call_vol_pct",
        type  : "percent",
        label : "High Call Deviation (%)",
    },
    {
        name  : "metric_hist_per",
        type  : "integer",
        label : "Escalation Window (sec)",
    },
    {
        name  : "max_low_per",
        type  : "integer",
        label : "Max Low in Window (sec)",
    },
    {
        name  : "max_med_per",
        type  : "integer",
        label : "Max Medium in Window (sec)",
    },
    {
        name  : "tot_max_low_per",
        type  : "integer",
        label : "Lifetime Total Max Low (sec)",
    },
    {
        name  : "tot_max_med_per",
        type  : "integer",
        label : "Lifetime Total Max Medium (sec)",
    },
];
var ALGORITHM_BASED_FILTERS = {
    "score" : {
        "med_threshold_period" : true,
        "med_call_vol_pct" : true,
        "high_threshold_period" : true,
        "high_call_vol_pct" : true,
    },
    "simple_threshold" : {
        "med_threshold_period" : true,
        "high_threshold_period" : true,
        "metric_hist_per" : true,
        "max_low_per" : true,
        "max_med_per" : true,
        "tot_max_low_per" : true,
        "tot_max_med_per" : true,
    },
    "declared" : {
    }
};
var ALGORITHM_BASED_TEXT = {
    "score" : [
        "If the incident is detected using baseline-orient scoring, escalation will also be",
        "triggered if the call volume exceeds the corresponding set threshold."
    ],
    "simple_threshold" : [
        "If the incident is detected using simple threshold crossing, additional requirement based",
        "on the number of qualified intervals in the rolling window or over the lifetime of the",
        "incident is also required to be met for escalation."
    ],
    "declared" : [
    ]
};
var filters = ALGORITHM_BASED_FILTERS[config["algorithm"]];
var APPLICABLE_ITEMS = [];
ITEMS.forEach(function(item) {
    if (filters[item.name] == true) {
        APPLICABLE_ITEMS.push(item);
    }
});
ITEMS = APPLICABLE_ITEMS;
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "escalation_section",
        type  : "section",
        label : "Severity Escalation Setting",
    });
    items.push({
        name  : "escalation_label",
        type  : "label",
        text  : [
            "Configure thresholds and timing for handling escalation of incident severity.",
            "Incident state is escalated to Medium if it stays in Low state continously for the set period",
            "Incident state is escalated to High if it stays in Low or Medium state continously for the set period",
            "Once escalated, the incident is never de-escalated regardless of score.",
        ].concat(ALGORITHM_BASED_TEXT[config["algorithm"]])
    });
    items.push({
        name  : "escalation_error",
        type  : "label",
        text  : [],
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentFloorDispatchConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "floor_dispatch_high_enable",
        type  : "boolean",
        label : "High Severity Enabled",
    },
    {
        name  : "floor_dispatch_high_period",
        type  : "integer",
        label : "High Severity Period (sec)",
    },
    {
        name  : "floor_dispatch_high_count",
        type  : "integer",
        label : "High Severity Effective Period",
    },
    {
        name  : "floor_dispatch_medium_enable",
        type  : "boolean",
        label : "Medium Severity Enabled",
    },
    {
        name  : "floor_dispatch_medium_period",
        type  : "integer",
        label : "Medium Severity Period (sec)",
    },
    {
        name  : "floor_dispatch_medium_count",
        type  : "integer",
        label : "Medium Severity Effective Period",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "floor_dispatch_section",
        type  : "section",
        label : "Floor Dispatch Setting",
    });
    items.push({
        name  : "floor_dispatch_label",
        type  : "label",
        text  : [
            "Configure timing for dispatching service personnel.",
            "Service personnel may be dispatched after the specified interval on first period with matched severity.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentGeneralConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "high_threshold",
        type  : "number",
        label : "High Threshold",
    },
    {
        name  : "medium_threshold",
        type  : "number",
        label : "Medium Threshold",
    },
    {
        name  : "low_threshold",
        type  : "number",
        label : "Low Threshold",
    },
    {
        name  : "above_threshold",
        type  : "boolean",
        label : "Above",
    },
    {
        name  : "below_threshold",
        type  : "boolean",
        label : "Below",
    },
    {
        name  : "expire_after",
        type  : "integer",
        label : "Expires After (sec)",
    },
    //{
    //    name  : "emit_notification",
    //    type  : "enumeration",
    //    label : "Emit Notification",
    //    enums : ["none=None", "on_event=On Event", "on_state=On State"]
    //},
    {
        name  : "generate",
        type  : "boolean",
        label : "Generate",
    },
    {
        name  : "__associated_calls__",
        type  : "boolean",
        label : "Associated Calls",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "general_section",
        type  : "section",
        label : "General Setting",
    });
    items.push({
        name  : "general_label",
        type  : "label",
        text  : [
            "Configure thresholds and timing for detecting incidents.",
        ]
    });
    items.push({
        name  : "general_error",
        type  : "label",
        text  : [],
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentIvrDeflectionConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "ivr_deflect_high_enable",
        type  : "boolean",
        label : "High Severity Enabled",
    },
    {
        name  : "ivr_deflect_high_period",
        type  : "integer",
        label : "High Severity Period (sec)",
    },
    {
        name  : "ivr_deflect_high_count",
        type  : "integer",
        label : "High Severity Effective Period",
    },
    {
        name  : "ivr_deflect_medium_enable",
        type  : "boolean",
        label : "Medium Severity Enabled",
    },
    {
        name  : "ivr_deflect_medium_period",
        type  : "integer",
        label : "Medium Severity Period (sec)",
    },
    {
        name  : "ivr_deflect_medium_count",
        type  : "integer",
        label : "Medium Severity Effective Period",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "ivr_deflect_section",
        type  : "section",
        label : "IVR Deflection Setting",
    });
    items.push({
        name  : "ivr_deflect_label",
        type  : "label",
        text  : [
            "Configure timing for enabling IVR deflection.",
            "IVR deflection may be enabled after the specified interval on first period with matched severity.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentNocNotificationConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "noc_notify_high_period",
        type  : "integer",
        label : "High Severity Period (sec)",
    },
    {
        name  : "noc_notify_high_count",
        type  : "integer",
        label : "High Severity Effective Period",
    },
    {
        name  : "noc_notify_medium_period",
        type  : "integer",
        label : "Medium Severity Period (sec)",
    },
    {
        name  : "noc_notify_medium_count",
        type  : "integer",
        label : "Medium Severity Effective Period",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "noc_notify_section",
        type  : "section",
        label : "NOC Notification Setting",
    });
    items.push({
        name  : "noc_notify_label",
        type  : "label",
        text  : [
            "Configure timing for sending notification to NOC.",
            "Notification is sent after the specified interval on first period with matched severity.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentTimeSkewConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "metric_time_skew",
        type  : "integer",
        label : "Metric Time Skew (sec)",
    },
    {
        name  : "call_time_skew",
        type  : "integer",
        label : "Call Time Skew (sec)",
    },
    {
        name  : "call_metric_time_skew",
        type  : "integer",
        label : "Call/Metric Time Skew (sec)",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "time_skew_section",
        type  : "section",
        label : "Time Skew Setting",
    });
    items.push({
        name  : "time_skew_label",
        type  : "label",
        text  : [
            "Configure time skews for handling late events.",
            "- Call Time Skew: number of second call event arrive late compare to system time",
            //"- Metric Time Skew: number of second metric event arrive late compare to system time",
            //"- Call/Metric Time Skew: absolute number of second difference between metric and call time",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addIncidentWarmupConfig" args="items,config" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "warmup_threshold",
        type  : "number",
        label : "Warmup Threshold",
    },
    {
        name  : "warmup_period",
        type  : "integer",
        label : "Warmup Period (sec)",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "warmup_section",
        type  : "section",
        label : "Warmup Setting",
    });
    items.push({
        name  : "warmup_label",
        type  : "label",
        text  : [
            "Configure thresholds and timing for handling slow-burn incidents.",
            "Warmup starts if score is above the set warmup threshold.",
            "If incident continues in warmup state for the period specified, it is escalated to the Low state.",
        ]
    });
    items.push({
        name  : "warmup_error",
        type  : "label",
        text  : [],
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addNotificationMetricContextConfig" args="items,config,options" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "r_cat_tier_1",
        type  : "enumeration",
        label : "Category #1",
        enums : options["category-1"] || [],
    },
    {
        name  : "r_cat_tier_2",
        type  : "enumeration",
        label : "Category #2",
        enums : options["category-2"] || [],
    },
    {
        name  : "r_cat_tier_3",
        type  : "enumeration",
        label : "Category #3",
        enums : options["category-3"] || [],
    },
    {
        name  : "r_product_cat_tier_1",
        type  : "enumeration",
        label : "Product Category #1",
        enums : options["product-category-1"] || [],
    },
    {
        name  : "r_product_cat_tier_2",
        type  : "enumeration",
        label : "Product Category #2",
        enums : options["product-category-2"] || [],
    },
    {
        name  : "r_product_cat_tier_3",
        type  : "enumeration",
        label : "Product Category #3",
        enums : options["product-category-3"] || [],
    },
    {
        name  : "r_assigned_group",
        type  : "enumeration",
        label : "Assigned Group",
        enums : options["assigned-group"] || [],
    },
    {
        name  : "r_service_type",
        type  : "enumeration",
        label : "Service Type",
        enums : options["service-type"] || [],
    },
    {
        name  : "r_reported_source",
        type  : "enumeration",
        label : "Reported Source",
        enums : options["reported-source"] || [],
    },
    {
        name  : "r_corporate_id",
        type  : "enumeration",
        label : "Corporate ID",
        enums : options["corporate-id"] || [],
    },
    {
        name  : "r_work_info_type",
        type  : "enumeration",
        label : "Work Info Type",
        enums : options["work-info-type"] || [],
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "context_section",
        type  : "section",
        label : "Remedy Context Setting",
    });
    items.push({
        name  : "context_label",
        type  : "label",
        text  : [
            "Configure contextual info for Remedy notification.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addNotificationMetricGeneralConfig" args="items,config,options" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    //{
    //    name  : "dimensions",
    //    type  : "choice",
    //    label : "Dimensions",
    //    enums : options["key-dimensions"] || [],
    //},
    {
        name  : "noc_severity",
        type  : "enumeration",
        label : "NOC Severity",
        enums : options["noc-severity"] || [],
    },
    {
        name  : "cust_call_impact",
        type  : "enumeration",
        label : "Customer Impact",
        enums : options["customer-impact"] || [],
    },
    {
        name  : "anomaly_weight",
        type  : "enumeration",
        label : "Anomaly Weight",
        enums : options["anomaly-weight"] || [],
    },
    {
        name  : "alarm_name",
        type  : "string",
        label : "Alarm Name",
    },
    {
        name  : "r_summary",
        type  : "text",
        label : "Summary",
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "general_section",
        type  : "section",
        label : "General Setting",
    });
    items.push({
        name  : "general_label",
        type  : "label",
        text  : [
            "Configure basic settings for notification.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_addNotificationSeverityGeneralConfig" args="items,config,options" private="true">
        <CodeText>
          <![CDATA[var ITEMS = [
    {
        name  : "action",
        type  : "choice",
        label : "Actions",
        enums : options["action-list"] || [],
    },
    {
        name  : "vendor_netcool_sev",
        type  : "enumeration",
        label : "Netcool Severity",
        enums : options["netcool-severity"] || [],
    },
    {
        name  : "network_condition",
        type  : "enumeration",
        label : "Network Condition",
        enums : options["network-condition"] || [],
    },
    {
        name  : "remedy_sev",
        type  : "enumeration",
        label : "Remedy Severity",
        enums : options["remedy-severity"] || [],
    },
    {
        name  : "metric_message_desc",
        type  : "text",
        label : "Message",
    },
    {
        name  : "key_dimensions",
        type  : "choice",
        label : "Key Dimensions",
        enums : options["key-dimensions"] || [],
    },
    {
        name  : "contact_groups",
        type  : "enumeration",
        label : "Contact Groups",
        enums : options["contact-group"] || [],
    },
];
var incl = this.__inclSettingItems(ITEMS, config);
if (incl) {
    items.push({
        name  : "general_section",
        type  : "section",
        label : "General Setting",
    });
    items.push({
        name  : "general_label",
        type  : "label",
        text  : [
            "Configure settings for notification severity.",
        ]
    });
    this.__addSettingItems(items, ITEMS, config);
}
]]>
        </CodeText>
      </Function>
      <Function name="_customizeConfigLabels" args="prefix,items,labels" private="true">
        <CodeText>
          <![CDATA[for (var i=0, n=items.length; i<n; i++) {
    var item = items[i];
    var label = labels[prefix+"."+item.name];
    if (label != null) {
        item.label = label;
    }
}
]]>
        </CodeText>
      </Function>
      <Function name="_showConfigError" args="items,errorItemName,errors" private="true">
        <CodeText>
          <![CDATA[for (var i=0; i<items.length; i++) {
    var item = items[i];
    if (item.name == errorItemName) {
        if (errors != null && errors.length > 0) {
            var htmlText = errors.join("<br>");
            item.rowNode.firstElementChild.innerHTML = htmlText;
            item.rowNode.firstElementChild.style.color = "red";
            item.rowNode.firstElementChild.style.fontStyle = "normal";
            item.rowNode.firstElementChild.style.fontWeight = "bold";
        }
        else {
            item.rowNode.firstElementChild.innerHTML = "";
        }
        break;
    }
}
]]>
        </CodeText>
      </Function>
      <Function name="editAnomalyConfig" args="CommonPlugin,controller,config,description,callback,buttonDefs,options" private="false">
        <CodeText>
          <![CDATA[var title  = "Edit Anomaly Configuration";
var width  = 700;
var height = 500;
var items = [];
var self = this;
this.getTimezonesAndOffsets(function(response) {
    if (response.status == "OK") {
        var tzList = [];
        response.value.forEach(function(tz) {
            tzList.push(tz.timezone + "=" + tz.timezone + " (" + tz.offset + ")");
        });
        //tzList = ["UTC", "EST", "CST", "MST", "PST"];
        self._addAnomalyGeneralConfig(items, config, tzList);
        self._addAnomalyBaselineScoringConfig(items, config);
        self.getConfigLabels("en", function(response) {
            if (response.status == "OK" && response.value != null) {
                self._customizeConfigLabels("anomaly", items, response.value);
            }
            CommonPlugin.popupEditForm(controller, config, title, width, height, description, items, buttonDefs, callback, options);
        });
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="editBaselineConfig" args="CommonPlugin,controller,config,description,callback,buttonDefs,options" private="false">
        <CodeText>
          <![CDATA[var title  = "Edit Baseline Configuration";
var width  = 700;
var height = 500;
var items = [];
var self = this;
this.getTimezonesAndOffsets(function(response) {
    if (response.status == "OK") {
        var tzList = [];
        response.value.forEach(function(tz) {
            tzList.push(tz.timezone + "=" + tz.timezone + " (" + tz.offset + ")");
        });
        //tzList = ["UTC", "EST", "CST", "MST", "PST"];
        self._addBaselineGeneralConfig(items, config, tzList);
        self._addBaselineAlgorithmConfig(items, config);
        self.getConfigLabels("en", function(response) {
            if (response.status == "OK" && response.value != null) {
                self._customizeConfigLabels("baseline", items, response.value);
            }
            CommonPlugin.popupEditForm(controller, config, title, width, height, description, items, buttonDefs, callback, options);
        });
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="editComputedDefaults" args="CommonPlugin,controller,data,callback" private="false">
        <CodeText>
          <![CDATA[var PATH = "/app/dbp/user/viaops_admin/dbpm/VIAOps - Config Service";
var NAME = "ComputedDefaultsWidget";

var title  = "Review Computed Defaults";
var width  = 800;
var height = 400;

var self = this;
require(["af/controls/PopupEditorDialog",
         "af/utils/AppUtil",
         "af/utils/RestRequest",
         "dbp/utils/ClientUtil",
         "dojox/xml/parser",
         "dojo/dom-geometry",
         "dojo/dom-style",
         "dojo/dom-class",
         "dojo/dom-attr",
         "dojo/dom-construct",
         "dojo/domReady!"],
function(PopupDialogClazz, AppUtil, RestRequest, ClientUtil, XmlParser, domGeom, domStyle, domClass, domAttr, domConstruct) {
    function doGetModel(path, callback)
    {
        RestRequest.json({
            url       : AppUtil.getItemURL(path),
            method    : "get",
            parameter : null,
            header    : null,
            callback  : function(t) {
                var doc = XmlParser.parse(t);
                var xml = doc.documentElement;
                callback(xml);
            },
        });
    }
    doGetModel(PATH, function(xml) {
        var plugin = {};
        ClientUtil.decodeModel(plugin, xml);
        for (var i=0;i<plugin._widgets.length; i++) {
            var w = plugin._widgets[i];
			w.path = PATH;
            if (w.name == NAME) {
                var WidgetClass = ClientUtil.getWidgetClass(controller, w, plugin._widgets, plugin._resources);
                var dialog = new PopupDialogClazz({
                    title    : title,
                    vtWidth  : width,
                    vtHeight : height,
                    model    : data,
                    editorClass : WidgetClass,
                    editorConfig : {
                    },
                    onClickOk : function(value) {
                        callback(value);
                    }
                });
                domStyle.set(dialog._widget.modelTd.domNode, "overflow", "hidden");
                domClass.add(dialog._widget.editorTitleLabel, "popup-title-label");
                domStyle.set(dialog._widget.editorTitleLabel, {
                    "display"     : "none",
                    "height"      : "0px",
                    "line-height" : "0px"
                });
                domClass.add(dialog._dialog.domNode, "popup-dialog");
                dialog.show();
                break;
            }
        }
    });
});
]]>
        </CodeText>
      </Function>
      <Function name="editCorrelationTimes" args="CommonPlugin,OptionsPlugin,controller,callback" private="false">
        <CodeText>
          <![CDATA[var PATH = "/app/dbp/user/viaops_admin/dbpm/VIAOps - Config Service";
var NAME = "CorrelationTimesWidget";

var title  = "Edit Correlation Time (double-click on Time column to edit)";
var width  = 600;
var height = 500;

var self = this;
require(["af/controls/PopupViewerDialog",
         "af/utils/AppUtil",
         "af/utils/RestRequest",
         "dbp/utils/ClientUtil",
         "dojox/xml/parser",
         "dojo/dom-geometry",
         "dojo/dom-style",
         "dojo/dom-class",
         "dojo/dom-attr",
         "dojo/dom-construct",
         "dojo/domReady!"],
function(PopupDialogClazz, AppUtil, RestRequest, ClientUtil, XmlParser, domGeom, domStyle, domClass, domAttr, domConstruct) {
    function doGetModel(path, callback)
    {
        RestRequest.json({
            url       : AppUtil.getItemURL(path),
            method    : "get",
            parameter : null,
            header    : null,
            callback  : function(t) {
                var doc = XmlParser.parse(t);
                var xml = doc.documentElement;
                callback(xml);
            },
        });
    }
    doGetModel(PATH, function(xml) {
        var plugin = {};
        ClientUtil.decodeModel(plugin, xml);
        for (var i=0;i<plugin._widgets.length; i++) {
            var w = plugin._widgets[i];
			w.path = PATH;
            if (w.name == NAME) {
                var WidgetClass = ClientUtil.getWidgetClass(controller, w, plugin._widgets, plugin._resources);
                var dialog = new PopupDialogClazz({
                    title    : title,
                    vtWidth  : width,
                    vtHeight : height,
                    viewerClass : WidgetClass,
                    viewerConfig : {
                        getCorrelationRules : self.getCorrelationRules,
                        getCorrelationTimes : self.getCorrelationTimes,
                        setCorrelationTime  : self.setCorrelationTime,
                        getConfigProperty   : self.getConfigProperty,
                        getDimKeyOptions    : OptionsPlugin.getDimKeyOptions,
                        getDimValueOptions  : OptionsPlugin.getDimValueOptions,
                    },
                    // ONLY applicable if using PopupEditorDialog
                    onClickOk : function(value) {
                        //callback(value);
                    }
                });
                if (dialog._widget.editorClass != null) {
                    domStyle.set(dialog._widget.modelTd.domNode, "overflow", "hidden");
                    domClass.add(dialog._widget.editorTitleLabel, "popup-title-label");
                    domStyle.set(dialog._widget.editorTitleLabel, {
                        "display"     : "none",
                        "height"      : "0px",
                        "line-height" : "0px"
                    });
                }
                else if (dialog._widget.viewerClass != null) {
                    domClass.add(dialog._widget.viewerTitleLabel, "popup-title-label");
                    domStyle.set(dialog._widget.viewerTitleLabel, {
                        "display"     : "none",
                        "height"      : "0px",
                        "line-height" : "0px"
                    });
                }
                domClass.add(dialog._dialog.domNode, "popup-dialog");
                dialog.show();
                dialog._onClickOK = function() {
                    if (dialog._widget._viewer.changed == true) {
                        callback();
                    }
                    dialog.hide();
                };
                break;
            }
        }
    });
});
]]>
        </CodeText>
      </Function>
      <Function name="editIncidentConfig" args="CommonPlugin,controller,config,description,callback,buttonDefs,options" private="false">
        <CodeText>
          <![CDATA[//buttonDefs = [{
//    name     : "ComputeDefaults",
//    label    : "Compute Defaults",
//    tooltip  : buttonCallback != null
//             ? "Compute default factor and thresholds from baseline and scores."
//             : "Feature disabled due to insufficient number of data points to properly compute factor and thresholds.",
//    callback : buttonCallback
//}];
var title  = "Edit Incident Configuration";
var width  = 700;
var height = 500;
var items = [];
if (options != null && options["custom-items"] != null) {
    (options["custom-items"]).forEach(function(item) {
        items.push(item);
    });
    delete options["custom-items"];
}
if (options == null) options = {};
var configErrorMsgSpan = null;
var buttonOffset = buttonDefs != null ? buttonDefs.length : 0;
var self = this;
options["check-is-ok"] = function(dialog, formDef, callback) {
    var footerDiv = dialog._dialog.buttonBarContainer;
    var generalErrors = [];
    var escalationErrors = [];
    var widgets = {};
    formDef.items.forEach(function(item) {
        if (item.name != null && item.widget != null) {
            widgets[item.name] = item.widget;
        }
    });
    switch (config["algorithm"]) {
        case "score":
            if ((widgets["high_threshold"]).get("value") < (widgets["medium_threshold"]).get("value")) {
                generalErrors.push("High Threshold must be greater or equal to Medium Threshold");
            }
            if ((widgets["medium_threshold"]).get("value") < (widgets["low_threshold"]).get("value")) {
                generalErrors.push("Medium Threshold must be greater or equal to Low Threshold");
            }
            break;
        case "simple_threshold":
            switch (config["threshold_policy"]) {
                case "above":
                    if ((widgets["high_threshold"]).get("value") < (widgets["medium_threshold"]).get("value")) {
                        generalErrors.push("High Threshold must be greater than or equal to Medium Threshold");
                    }
                    if ((widgets["medium_threshold"]).get("value") < (widgets["low_threshold"]).get("value")) {
                        generalErrors.push("Medium Threshold must be greater than or equal to Low Threshold");
                    }
                    break;
                case "below":
                    if ((widgets["high_threshold"]).get("value") > (widgets["medium_threshold"]).get("value")) {
                        generalErrors.push("High Threshold must be less than or equal to Medium Threshold");
                    }
                    if ((widgets["medium_threshold"]).get("value") > (widgets["low_threshold"]).get("value")) {
                        generalErrors.push("Medium Threshold must be less than or equal to Low Threshold");
                    }
                    break;
            }
            break;
    }
    self._showConfigError(formDef.items, "general_error", generalErrors);
    var errorCount = generalErrors.length + escalationErrors.length;
    if (errorCount > 0) {
        if (configErrorMsgSpan == null) {
            configErrorMsgSpan = document.createElement("span");
            configErrorMsgSpan.style.fontSize = "12px";
            configErrorMsgSpan.style.color = "red";
            configErrorMsgSpan.style.paddingLeft = "5px";
            footerDiv.insertBefore(configErrorMsgSpan, footerDiv.children[buttonOffset]);
        }
        configErrorMsgSpan.innerHTML = errorCount + " configuration " + (errorCount > 1 ? "errors" : "error");
        callback(false);
    }
    else {
        if (configErrorMsgSpan != null) {
            configErrorMsgSpan.innerHTML = "";
        }
        callback(true);
    }
};
this._addIncidentGeneralConfig(items, config);
this._addIncidentWarmupConfig(items, config);
this._addIncidentCooldownConfig(items, config);
this._addIncidentEscalationConfig(items, config);
this._addIncidentNocNotificationConfig(items, config);
this._addIncidentIvrDeflectionConfig(items, config);
this._addIncidentFloorDispatchConfig(items, config);
this._addIncidentCausationConfig(items, config);
this._addIncidentTimeSkewConfig(items, config);
this.getConfigLabels("en", function(response) {
    if (response.status == "OK" && response.value != null) {
        self._customizeConfigLabels("incident", items, response.value);
    }
    CommonPlugin.popupEditForm(controller, config, title, width, height, description, items, buttonDefs, callback, options);
});
]]>
        </CodeText>
      </Function>
      <Function name="editIncidentGroupConfig" args="CommonPlugin,OptionsPlugin,controller,value,options,callback" private="false">
        <CodeText>
          <![CDATA[var PATH = "/app/dbp/user/viaops_admin/dbpm/VIAOps - Config Service";
var NAME = "IncidentGroupConfigWidget";

var title  = "Edit Incident Group Configuration";
var width  = 600;
var height = 300;

var self = this;
require(["af/controls/PopupEditorDialog",
         "af/utils/AppUtil",
         "af/utils/RestRequest",
         "dbp/utils/ClientUtil",
         "dojox/xml/parser",
         "dojo/dom-geometry",
         "dojo/dom-style",
         "dojo/dom-class",
         "dojo/dom-attr",
         "dojo/dom-construct",
         "dojo/domReady!"],
function(PopupDialogClazz, AppUtil, RestRequest, ClientUtil, XmlParser, domGeom, domStyle, domClass, domAttr, domConstruct) {
    function doGetModel(path, callback)
    {
        RestRequest.json({
            url       : AppUtil.getItemURL(path),
            method    : "get",
            parameter : null,
            header    : null,
            callback  : function(t) {
                var doc = XmlParser.parse(t);
                var xml = doc.documentElement;
                callback(xml);
            },
        });
    }
    doGetModel(PATH, function(xml) {
        var plugin = {};
        ClientUtil.decodeModel(plugin, xml);
        for (var i=0;i<plugin._widgets.length; i++) {
            var w = plugin._widgets[i];
			w.path = PATH;
            if (w.name == NAME) {
                var WidgetClass = ClientUtil.getWidgetClass(controller, w, plugin._widgets, plugin._resources);
                var dialog = new PopupDialogClazz({
                    title    : title,
                    vtWidth  : width,
                    vtHeight : height,
                    model    : value,
                    editorClass : WidgetClass,
                    editorConfig : {
                        getCorrelationRules : self.getCorrelationRules,
                        getConfigProperty : self.getConfigProperty,
                        getDimKeyOptions : OptionsPlugin.getDimKeyOptions,
                        getDimValueOptions : OptionsPlugin.getDimValueOptions,
                    },
                    onClickOk : function(value) {
                        callback(value);
                    }
                });
                domStyle.set(dialog._widget.modelTd.domNode, "overflow", "hidden");
                domClass.add(dialog._widget.editorTitleLabel, "popup-title-label");
                domStyle.set(dialog._widget.editorTitleLabel, {
                    "display"     : "none",
                    "height"      : "0px",
                    "line-height" : "0px"
                });
                domClass.add(dialog._dialog.domNode, "popup-dialog");
                dialog.show();
                break;
            }
        }
    });
});
]]>
        </CodeText>
      </Function>
      <Function name="editIncidentGroupContextualMetrics" args="CommonPlugin,controller,config,description,callback,buttonDefs,options" private="false">
        <CodeText>
          <![CDATA[var title  = "Edit Contextual Metrics";
var width  = 700;
var height = 500;
var items = [{
    name  : "general_section",
    type  : "section",
    label : "General Setting",
}, {
    name  : "general_label",
    type  : "label",
    text  : [
        "Configure settings for contextual metrics.",
    ]
}, {
    name  : "style",
    type  : "enumeration",
    label : "Display As",
    enums : ["Overlay", "Trend"],
}];
CommonPlugin.popupEditForm(controller, config, title, width, height, description, items, buttonDefs, callback, options);
]]>
        </CodeText>
      </Function>
      <Function name="editNotificationActionRuleValues" args="CommonPlugin,controller,selected,paramModel,paramValue,callback,buttonDefs,options" private="false">
        <CodeText>
          <![CDATA[// editNotificationActionRuleParam

function getItemValue(itemType, itemValue)
{
    switch (itemType) {
        case "choice":
            if (typeof itemValue == "string") {
                itemValue = itemValue.split("|");
            }
            break;
    }
    return itemValue;
}

var metricId  = selected["metric_id"];
var vitriaSev = selected["vitria_sev"];
var items     = [];
var values    = {};

var lastActionId = null;
paramValue.forEach(function(ar) {
    var actionParams = paramModel.actions[ar.action_id];
    var ruleParams = paramModel.rules[ar.rule_id];
    if (actionParams != null || ruleParams != null) {
        if (lastActionId != ar.action_id) {
            lastActionId = ar.action_id;
            items.push({
                name  : "action_"+ar.action_id,
                type  : "section",
                label : ar.action_name,
            });
            if (actionParams != null) {
                if (typeof actionParams == "string") {
                    actionParams = paramModel["action-types"][actionParams];
                }
                if (actionParams != null) {
                    actionParams.forEach(function(actionParam) {
                        actionParam = lang.clone(actionParam);
                        var itemValue = getItemValue(actionParam.type, ar[actionParam.name]);
                        actionParam.name = String(ar.action_id) + "|" + actionParam.name;
                        values[actionParam.name] = itemValue;
                        items.push(actionParam);
                    });
                }
            }
        }
        if (ruleParams != null) {
            if (typeof ruleParams == "string") {
                ruleParams = paramModel["rule-types"][ruleParams];
            }
            if (ruleParams != null) {
                ruleParams.forEach(function(ruleParam) {
                    ruleParam = lang.clone(ruleParam);
                    var itemValue = getItemValue(ruleParam.type, ar[ruleParam.name]);
                    ruleParam.name = String(ar.action_id) + "|" + ar.rule_id + "|" + ar.phase + "|" + ruleParam.name;
                    ruleParam.label = ruleParam.label + " (" + ar.phase + ")";
                    values[ruleParam.name] = itemValue;
                    items.push(ruleParam);
                });
            }
        }
    }
});
var title  = "Customize Notification Action";
var width  = 700;
var height = 500;
var labelStyle = " style='width:1%;font-style:normal;padding:7px 0px 3px 0px;vertical-align:top;'";
var valueStyle = " style='width:99%;font-weight:normal;font-family:Arial;padding:5px 0px 5px 5px; font-size: 14px; color: #666666;vertical-align:top;'";
var description = [
    "<table style='background-color: #f2f2f2f2; width: 100%; padding: 10px;'>",
    "<tr><td"+labelStyle+">Metric ID:</td><td"+valueStyle+">" + selected["metric_id"] + "</td></tr>",
    "<tr><td"+labelStyle+">Severity:</td><td"+valueStyle+">" + selected["vitria_sev"] + "</td></tr>",
    "<table>",
];
CommonPlugin.popupEditForm(controller, values, title, width, height, description, items, buttonDefs, callback, options);

]]>
        </CodeText>
      </Function>
      <Function name="editNotificationMetricConfig" args="CommonPlugin,controller,config,description,callback,buttonDefs,options" private="false">
        <CodeText>
          <![CDATA[var title  = "Edit Notification Metric Configuration";
var width  = 700;
var height = 500;
var items = [];
if (options != null && options["custom-items"] != null) {
    (options["custom-items"]).forEach(function(item) {
        items.push(item);
    });
    delete options["custom-items"];
}
this._addNotificationMetricGeneralConfig(items, config, options);
this._addNotificationMetricContextConfig(items, config, options);
var self = this;
this.getConfigLabels("en", function(response) {
    if (response.status == "OK" && response.value != null) {
        self._customizeConfigLabels("notification.metric", items, response.value);
    }
    CommonPlugin.popupEditForm(controller, config, title, width, height, description, items, buttonDefs, callback, options);
});
]]>
        </CodeText>
      </Function>
      <Function name="editNotificationSeverityConfig" args="CommonPlugin,controller,config,description,callback,buttonDefs,options" private="false">
        <CodeText>
          <![CDATA[var title  = "Edit Notification Severity Configuration";
var width  = 700;
var height = 500;
var items = [];
if (options != null && options["custom-items"] != null) {
    (options["custom-items"]).forEach(function(item) {
        items.push(item);
    });
    delete options["custom-items"];
}
this._addNotificationSeverityGeneralConfig(items, config, options);
var self = this;
this.getConfigLabels("en", function(response) {
    if (response.status == "OK" && response.value != null) {
        self._customizeConfigLabels("notification.severity", items, response.value);
    }
    CommonPlugin.popupEditForm(controller, config, title, width, height, description, items, buttonDefs, callback, options);
});
]]>
        </CodeText>
      </Function>
      <Function name="getAlgorithmCode" args="algorithm" private="false">
        <CodeText>
          <![CDATA[var ALGORITHM_LABELS = {
    "score" : "SCORE",
    "simple_threshold" : "THRESHOLD",
};
return ALGORITHM_LABELS[algorithm] || algorithm;
]]>
        </CodeText>
      </Function>
      <Function name="getAlgorithmLabel" args="algorithm" private="false">
        <CodeText>
          <![CDATA[var ALGORITHM_LABELS = {
    "score" : "Baseline Score",
    "simple_threshold" : "Simple Threshold",
};
return ALGORITHM_LABELS[algorithm] || algorithm;
]]>
        </CodeText>
      </Function>
      <Function name="getAnomalyWindowLabel" args="anomaly_window" private="false">
        <CodeText>
          <![CDATA[var ANOMALY_WINDOW_LABELS = {
    "5/5" : "5 min window / 5 min step",
    "30/5" : "30 min window / 5 min step",
};
return ANOMALY_WINDOW_LABELS[anomaly_window] || anomaly_window;
]]>
        </CodeText>
      </Function>
      <Function name="getThresholdPolicyCode" args="threshold_policy" private="false">
        <CodeText>
          <![CDATA[var THRESHOLD_POLICY_LABELS = {
    "above" : "ABOVE",
    "below" : "BELOW",
};
return THRESHOLD_POLICY_LABELS[threshold_policy] || threshold_policy;
]]>
        </CodeText>
      </Function>
      <Function name="getThresholdPolicyLabel" args="algorithm,threshold_policy" private="false">
        <CodeText>
          <![CDATA[var THRESHOLD_POLICY_LABELS = {
    "score:above" : "Above (Positive) Threshold",
    "score:below" : "Below (Negative) Threshold",
    "simple_threshold:above" : "Above Threshold",
    "simple_threshold:below" : "Below Threshold",
};
return THRESHOLD_POLICY_LABELS[algorithm+":"+threshold_policy] || threshold_policy;
]]>
        </CodeText>
      </Function>
      <Function name="hideTabs" args="acl,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;
var tabIds = ["service", "parse", "baseline", "anomaly", "incident", "notification", "incident-group"];
var tabPages = ["Service", "Parse", "Baseline", "Anomaly", "Incident", "Notification", "Incident Group"];
var tabBarItems = document.getElementsByClassName("tabBarItem");
if (tabBarItems != null && tabBarItems.length > 0) {
    var firstPage = null;
    for (var i=0; i<tabIds.length && i<tabBarItems.length; i++) {
        var tabNode = tabBarItems[i];
        if (acl == null || acl[tabIds[i]] == false) {
            tabNode.style.display = "none";
        }
        else {
            tabNode.style.display = "";
            if (firstPage == null) {
                firstPage = tabPages[i];
            }
        }
    }
    window.addEventListener('resize', function() {
        self.hideTabs(acl, null);
    });
    if (callback != null) {
        callback(firstPage);
    }
}
else {
    setTimeout(function() {
        self.hideTabs(acl, callback);
    }, 10);
}
]]>
        </CodeText>
      </Function>
      <Function name="popupMetricConfig" args="CommonPlugin,OptionsPlugin,controller,title,width,height,options,callback" private="false">
        <CodeText>
          <![CDATA[var PATH = "/app/dbp/user/viaops_admin/dbpm/VIAOps - Config Service";
var NAME = "MetricConfigWidget";
if (width == null) {
    width = Math.min(1200, Math.round(0.8*window.body.clientWidth));
}
if (height == null) {
    height = Math.min(500, Math.round(0.6*window.body.clientHeight));
}
if (options != null) {
    if (options["enableAlgorithm"] == true) {
        height += 32;
    }
    if (options["enableThresholdPolicy"] == true) {
        height += 32;
    }
}
var self = this;
require(["af/controls/PopupEditorDialog",
         "af/utils/AppUtil",
         "af/utils/RestRequest",
         "dbp/utils/ClientUtil",
         "dojox/xml/parser",
         "dojo/dom-geometry",
         "dojo/dom-style",
         "dojo/dom-class",
         "dojo/dom-attr",
         "dojo/dom-construct",
         "dojo/domReady!"],
function(PopupDialogClazz, AppUtil, RestRequest, ClientUtil, XmlParser, domGeom, domStyle, domClass, domAttr, domConstruct) {
    function doGetModel(path, callback)
    {
        RestRequest.json({
            url       : AppUtil.getItemURL(path),
            method    : "get",
            parameter : null,
            header    : null,
            callback  : function(t) {
                var doc = XmlParser.parse(t);
                var xml = doc.documentElement;
                callback(xml);
            },
        });
    }
    doGetModel(PATH, function(xml) {
        var plugin = {};
        ClientUtil.decodeModel(plugin, xml);
        for (var i=0;i<plugin._widgets.length; i++) {
            var w = plugin._widgets[i];
			w.path = PATH;
            if (w.name == NAME) {
                var WidgetClass = ClientUtil.getWidgetClass(controller, w, plugin._widgets, plugin._resources);
                var dialog = new PopupDialogClazz({
                    title    : title,
                    vtWidth  : width,
                    vtHeight : height,
                    editorClass : WidgetClass,
                    editorConfig : {
                        getMetricIDs : self.getMetricIDs,
                        getDimKeyOptions : OptionsPlugin.getDimKeyOptions,
                        getDimValueOptions : OptionsPlugin.getDimValueOptions,
                        options : options,
                    },
                    onClickOk : function(value) {
                        callback(value.model, value.sync);
                    }
                });
                domStyle.set(dialog._widget.modelTd.domNode, "overflow", "hidden");
                domClass.add(dialog._widget.editorTitleLabel, "popup-title-label");
                domStyle.set(dialog._widget.editorTitleLabel, {
                    "display"     : "none",
                    "height"      : "0px",
                    "line-height" : "0px"
                });
                domClass.add(dialog._dialog.domNode, "popup-dialog");
                dialog.show();
                break;
            }
        }
    });
});
]]>
        </CodeText>
      </Function>
      <Function name="popupMissingMetricInfoWidget" args="CommonPlugin,OptionsPlugin,controller,title,width,height,metrics,options,callback" private="false">
        <CodeText>
          <![CDATA[var PATH = "/app/dbp/user/viaops_admin/dbpm/VIAOps - Config Service";
var NAME = "MissingMetricInfoWidget";
if (width == null) {
    width = Math.min(800, Math.round(0.8*window.body.clientWidth));
}
if (height == null) {
    height = Math.min(500, Math.round(0.6*window.body.clientHeight));
}
var self = this;
require(["af/controls/PopupEditorDialog",
         "af/utils/AppUtil",
         "af/utils/RestRequest",
         "dbp/utils/ClientUtil",
         "dojox/xml/parser",
         "dojo/dom-geometry",
         "dojo/dom-style",
         "dojo/dom-class",
         "dojo/dom-attr",
         "dojo/dom-construct",
         "dojo/domReady!"],
function(PopupDialogClazz, AppUtil, RestRequest, ClientUtil, XmlParser, domGeom, domStyle, domClass, domAttr, domConstruct) {
    function doGetModel(path, callback)
    {
        RestRequest.json({
            url       : AppUtil.getItemURL(path),
            method    : "get",
            parameter : null,
            header    : null,
            callback  : function(t) {
                var doc = XmlParser.parse(t);
                var xml = doc.documentElement;
                callback(xml);
            },
        });
    }
    doGetModel(PATH, function(xml) {
        var plugin = {};
        ClientUtil.decodeModel(plugin, xml);
        for (var i=0;i<plugin._widgets.length; i++) {
            var w = plugin._widgets[i];
			w.path = PATH;
            if (w.name == NAME) {
                var WidgetClass = ClientUtil.getWidgetClass(controller, w, plugin._widgets, plugin._resources);
                var dialog = new PopupDialogClazz({
                    title    : title,
                    vtWidth  : width,
                    vtHeight : height,
                    editorClass : WidgetClass,
                    editorConfig : {
                        getDimKeyOptions : OptionsPlugin.getDimKeyOptions,
                        metrics : metrics,
                        options : options,
                    },
                    onClickOk : function(value) {
                        callback(value.model);
                    }
                });
                domStyle.set(dialog._widget.modelTd.domNode, "overflow", "hidden");
                domClass.add(dialog._widget.editorTitleLabel, "popup-title-label");
                domStyle.set(dialog._widget.editorTitleLabel, {
                    "display"     : "none",
                    "height"      : "0px",
                    "line-height" : "0px"
                });
                domClass.add(dialog._dialog.domNode, "popup-dialog");
                dialog.show();
                break;
            }
        }
    });
});
]]>
        </CodeText>
      </Function>
      <Function name="postAnomalyConfigEdit" args="record,obj" private="false">
        <CodeText>
          <![CDATA[var REVERSE = {
};
for (var key in obj) {
    switch (key) {
        case "enabled":
            record[REVERSE[key] || key] = obj[key] ? 1 : 0;
            break;
        default:
            record[REVERSE[key] || key] = obj[key];
            break;
    }
}
]]>
        </CodeText>
      </Function>
      <Function name="postBaselineConfigEdit" args="record,obj" private="false">
        <CodeText>
          <![CDATA[var REVERSE = {
};
for (var key in obj) {
    switch (key) {
        case "fill_policy":
        case "ignore_baseline":
        case "ignore_anomaly":
        case "enabled":
            record[REVERSE[key] || key] = obj[key] ? 1 : 0;
            break;
        default:
            record[REVERSE[key] || key] = obj[key];
            break;
    }
}
]]>
        </CodeText>
      </Function>
      <Function name="postIncidentConfigEdit" args="record,obj" private="false">
        <CodeText>
          <![CDATA[var REVERSE = {
    "high_threshold"   : "threshold_high",
    "medium_threshold" : "threshold_med",
    "low_threshold"    : "threshold_low",
    "min_metric_dev"   : "min_metric_deviation",
    "min_call_dev"     : "min_call_deviation",
    "above_threshold"  : "above",
    "below_threshold"  : "below",
    "cooldown_period"  : "cool_down_period",
};
for (var key in obj) {
    switch (key) {
        case "above_threshold":
        case "below_threshold":
        case "generate":
            record[REVERSE[key] || key] = obj[key] ? "y" : "n";
            break;
        case "__associated_calls__":
            if (obj[key]) {
                record["call_metric_id"] = record["service"] + "|*|*|Customer Call Volume";
            }
            else {
                record["call_metric_id"] = "none";
            }
            break;
        default:
            record[REVERSE[key] || key] = obj[key];
            break;
    }
}
]]>
        </CodeText>
      </Function>
      <Function name="preAnomalyConfigEdit" args="record" private="false">
        <CodeText>
          <![CDATA[var FORWARD = {
};
var config = {};
for (var key in record) {
    switch (key) {
        case "enabled":
            if (record[key] != undefined) {
                config[FORWARD[key] || key] = record[key] == 1;
            }
            break;
        default:
            if (record[key] != undefined) {
                config[FORWARD[key] || key] = record[key];
            }
            break;
    }
}
return config;
]]>
        </CodeText>
      </Function>
      <Function name="preBaselineConfigEdit" args="record" private="false">
        <CodeText>
          <![CDATA[var FORWARD = {
};
var config = {};
for (var key in record) {
    switch (key) {
        case "fill_policy":
        case "ignore_baseline":
        case "ignore_anomaly":
        case "enabled":
            if (record[key] != undefined) {
                config[FORWARD[key] || key] = record[key] == 1;
            }
            break;
        default:
            if (record[key] != undefined) {
                config[FORWARD[key] || key] = record[key];
            }
            break;
    }
}
return config;
]]>
        </CodeText>
      </Function>
      <Function name="preIncidentConfigEdit" args="record" private="false">
        <CodeText>
          <![CDATA[var FORWARD = {
    "threshold_high"       : "high_threshold",
    "threshold_med"        : "medium_threshold",
    "threshold_low"        : "low_threshold",
    "min_metric_deviation" : "min_metric_dev",
    "min_call_deviation"   : "min_call_dev",
    "above"                : "above_threshold",
    "below"                : "below_threshold",
    "cool_down_period"     : "cooldown_period",
};
var config = {};
for (var key in record) {
    switch (key) {
        case "above":
        case "below":
        case "generate":
            if (record[key] != undefined) {
                config[FORWARD[key] || key] = record[key] == "y";
            }
            break;
        case "call_metric_id":
            var notSimpleThreshold = record["algorithm"] != "simple_threshold";
            var notCallMetric = (record["metric_id"]).indexOf("|*|*|Customer Call Volume") == -1;
            if (notSimpleThreshold && notCallMetric) {
                config["__associated_calls__"] = record["call_metric_id"] != "none";
            }
            break;
        default:
            if (record[key] != undefined) {
                config[FORWARD[key] || key] = record[key];
            }
            break;
    }
}
return config;
]]>
        </CodeText>
      </Function>
    </Functions>
    <Services>
      <Service name="_addAnomalyModel" args="serviceConfig,sourceConfig,anomalyConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[//print("_addAnomalyModel: selected="+__prettyPrintJSON(selected));
var DATASOURCE = queryConfig["data-source"]["anomaly-model"];

var adm_name = this._getAdmName(anomalyConfig, queryConfig, selected);
var metric_id = selected["service"] + "|" + selected["sub_service"] + "|" + selected["dim_values"];

var sql = Context.getLocalResource("ANOMALY_MODEL_DELETE_SQL");
var args = [
    [adm_name, metric_id],
];
this.executeSQLUpdate(queryConfig, [adm_name], ["AnomalyModel", "Add", "Delete"], DATASOURCE, sql, args);

sql = Context.getLocalResource("ANOMALY_MODEL_INSERT_SQL");
var map = {
    "adm_name" : adm_name,
    "metric_id" : metric_id,
    "score_method" : selected["score_method"],
    "stat_seasonality" : selected["stat_seasonality"],
    "anomaly_trigger" : selected["anomaly_trigger"],
    "lower_scale" : selected["lower_scale"],
    "upper_scale" : selected["upper_scale"],
    "enabled" : selected["enabled"],
};
sql = this._doValueSubstitution(sql, map);
this.executeSQLUpdate(queryConfig, [adm_name], ["AnomalyModel", "Add", "Insert"], DATASOURCE, sql, null);

return true;
]]>
        </CodeText>
      </Service>
      <Service name="_addBaselineModel" args="serviceConfig,sourceConfig,anomalyConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[//print("_addBaselineModel: selected="+__prettyPrintJSON(selected));
var DATASOURCE = queryConfig["data-source"]["baseline-model"];

var adm_name = this._getAdmName(anomalyConfig, queryConfig, selected);
var metric_id = selected["service"] + "|" + selected["sub_service"] + "|" + selected["dim_values"];

var sql = Context.getLocalResource("BASELINE_MODEL_DELETE_SQL");
var args = [
    [adm_name, metric_id],
];
this.executeSQLUpdate(queryConfig, [adm_name], ["BaselineModel", "Add", "Delete"], DATASOURCE, sql, args);

sql = Context.getLocalResource("BASELINE_MODEL_INSERT_SQL");
var map = {
    "adm_name" : adm_name,
    "metric_id" : metric_id,
    "algorithm" : selected["algorithm"],
    "fill_policy" : selected["fill_policy"],
    "seasonality" : selected["seasonality"],
    "ignore_baseline" : selected["ignore_baseline"],
    "ignore_anomaly" : selected["ignore_anomaly"],
    "enabled" : selected["enabled"],
};
sql = this._doValueSubstitution(sql, map);
this.executeSQLUpdate(queryConfig, [adm_name], ["BaselineModel", "Add", "Insert"], DATASOURCE, sql, null);

return true;
]]>
        </CodeText>
      </Service>
      <Service name="_addIncidentGroupModel" args="queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[print("_addIncidentGroupModel: selected="+__prettyPrintJSON(selected));
var DATASOURCE = queryConfig["data-source"]["incident-group"];

if (isNaN(selected["max_lookback"])) {
    selected["max_lookback"] = "NULL";
}
if (isNaN(selected["expire_after"])) {
    selected["expire_after"] = "NULL";
}


var sql = Context.getLocalResource("INCIDENT_GROUP_DELETE_SQL");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentGroup", "Add", "Delete"], DATASOURCE, sql, null);

var sql = Context.getLocalResource("INCIDENT_GROUP_CORRELATION_DELETE_SQL");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentGroup", "Add", "Delete", "Correlation"], DATASOURCE, sql, null);


var sql = Context.getLocalResource("INCIDENT_GROUP_INSERT_SQL");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentGroup", "Add", "Insert"], DATASOURCE, sql, null);
this.incidentGroupAudit([[selected["group_rule_name"], selected["max_lookback"], selected["expire_after"]]], "add");

var correlation_template = Context.getLocalResource("INCIDENT_GROUP_CORRELATION_INSERT_SQL");
var correlation_rules = selected["correlation_rules"];
var correlationAuditUpdate = [];
for (var i=0; i<correlation_rules.length; i++) {
    var correlation_rule = correlation_rules[i];
    var toks = correlation_rule.split("|");
    var map = {
        group_rule_name  : selected["group_rule_name"],
        service_name     : toks[0],
        sub_service_name : toks[1],
        group_start      : correlation_rule == selected["start_group"] ? "y" : "n",
    };
    var sql = this._doValueSubstitution(correlation_template, map);
    this.executeSQLUpdate(queryConfig, [selected["group_rule_name"], correlation_rule], ["IncidentGroupCorrelation", "Add", "Insert", "Correlation"], DATASOURCE, sql, null);
    correlationAuditUpdate.push([map.group_rule_name, map.service_name, map.sub_service_name, map.group_start]);

    if (!this._hasCorrelationRule(queryConfig, map)) {
        var sql = Context.getLocalResource("CORRELATION_TIME_INSERT_SQL");
        sql = this._doValueSubstitution(sql, {
            service_name     : toks[0],
            sub_service_name : toks[1],
        });
        this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentCorrelation", "Add", "Insert"], DATASOURCE, sql, null);
    }
};
this.incidentGroupCorrelationAudit(correlationAuditUpdate, "add");
return true;
]]>
        </CodeText>
      </Service>
      <Service name="_addIncidentModelV1" args="serviceConfig,sourceConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[//print("_addIncidentModelV1: selected="+__prettyPrintJSON(selected));
var DATASOURCE = queryConfig["data-source"]["incident-model"];

var sql = Context.getLocalResource("INCIDENT_MODEL_DELETE_SQL_1");
var args = [
    [selected["service"], selected["sub_service"], selected["dim_values"], selected["anomaly_window"]],
];
this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["IncidentModelV1", "Add", "Delete"], DATASOURCE, sql, args);

sql = Context.getLocalResource("INCIDENT_MODEL_INSERT_SQL_1");
var map = {
    "dim_keys" : selected["dim_keys"],
    "dim_values" : selected["dim_values"],
    "anomaly_window" : selected["anomaly_window"],
    "service" : selected["service"],
    "sub_service" : selected["sub_service"],
    "cust_call_dim" : selected["cust_call_dim"],
    "threshold_high" : selected["threshold_high"],
    "threshold_low" : selected["threshold_low"],
    "threshold_med" : selected["threshold_med"],
    "median_baseline" : selected["median_baseline"],
    "cool_down_period" : selected["cool_down_period"],
    "warmup_threshold" : selected["warmup_threshold"],
    "warmup_period" : selected["warmup_period"],
    "min_metric_deviation" : selected["min_metric_deviation"],
    "min_call_deviation" : selected["min_call_deviation"],
    "min_metric_vol" : selected["min_metric_vol"],
    "min_call_vol" : selected["min_call_vol"],
    "med_threshold_period" : selected["med_threshold_period"],
    "high_threshold_period" : selected["high_threshold_period"],
    "med_call_vol_pct" : selected["med_call_vol_pct"],
    "high_call_vol_pct" : selected["high_call_vol_pct"],
    "expire_after" : selected["expire_after"],
    "emit_notification" : selected["emit_notification"],
    "causation_measure" : selected["causation_measure"],
    "causation_top_count" : selected["causation_top_count"],
    "causation_min_measure" : selected["causation_min_measure"],
    "causation_rule_name" : selected["causation_rule_name"],
    "causation_suppl_measure" : selected["causation_suppl_measure"],
    "above" : selected["above"],
    "below" : selected["below"],
    "generate" : selected["generate"],
};
sql = this._doValueSubstitution(sql, map);
this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["IncidentModelV1", "Add", "Insert"], DATASOURCE, sql, null);

// create metric/QDC entry as needed
this._createMetricQDC(serviceConfig, sourceConfig, queryConfig, selected);

// create metric/info entry as needed
this._createMetricInfo(serviceConfig, queryConfig, selected);

return true;
]]>
        </CodeText>
      </Service>
      <Service name="_addIncidentModelV2" args="serviceConfig,sourceConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[//print("_addIncidentModelV2: selected="+__prettyPrintJSON(selected));
var DATASOURCE = queryConfig["data-source"]["incident-model"];

var metric_id = selected["service"] + "|" + selected["sub_service"] + "|" + selected["dim_values"];
var algorithm = selected["algorithm"] || "score";
var threshold_policy = selected["threshold_policy"] || "above";

var sql = Context.getLocalResource("INCIDENT_MODEL_DELETE_SQL_2");
var args = [
    [metric_id, selected["anomaly_window"], algorithm, threshold_policy],
];
this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["IncidentModelV2", "Add", "Delete"], DATASOURCE, sql, args);

var call_metric_id = selected["call_metric_id"] || (selected["service"] + "|*|*|Customer Call Volume");
if (algorithm == "simple_threshold" || metric_id.indexOf("|*|*|Customer Call Volume") != -1) {
    call_metric_id = "none";
}

sql = Context.getLocalResource("INCIDENT_MODEL_INSERT_SQL_2");
var map = {
    "metric_id" : metric_id,
    "anomaly_window" : selected["anomaly_window"],
    "call_metric_id" : call_metric_id,
    "algorithm" : algorithm,
    "threshold_policy" : threshold_policy,
    "threshold_high" : selected["threshold_high"],
    "threshold_low" : selected["threshold_low"],
    "threshold_med" : selected["threshold_med"],
    "median_baseline" : selected["median_baseline"] || 0,
    "cool_down_period" : selected["cool_down_period"],
    "warmup_threshold" : selected["warmup_threshold"],
    "warmup_period" : selected["warmup_period"],
    "min_metric_deviation" : selected["min_metric_deviation"],
    "min_call_deviation" : selected["min_call_deviation"],
    "min_metric_vol" : selected["min_metric_vol"],
    "min_call_vol" : selected["min_call_vol"],
    "med_threshold_period" : selected["med_threshold_period"],
    "high_threshold_period" : selected["high_threshold_period"],
    "med_call_vol_pct" : selected["med_call_vol_pct"],
    "high_call_vol_pct" : selected["high_call_vol_pct"],
    "expire_after" : selected["expire_after"],
    "emit_notification" : selected["emit_notification"],
    "causation_measure" : selected["causation_measure"],
    "causation_top_count" : selected["causation_top_count"],
    "causation_min_measure" : selected["causation_min_measure"],
    "causation_rule_name" : selected["causation_rule_name"],
    "causation_suppl_measure" : selected["causation_suppl_measure"],
    "generate" : selected["generate"],
    "metric_time_skew" : selected["metric_time_skew"],
    "call_time_skew" : selected["call_time_skew"],
    "call_metric_time_skew" : selected["call_metric_time_skew"],
    "metric_hist_per" : selected["metric_hist_per"] || 0,
    "max_low_per" : selected["max_low_per"] || 0,
    "max_med_per" : selected["max_med_per"] || 0,
    "tot_max_low_per" : selected["tot_max_low_per"] || 0,
    "tot_max_med_per" : selected["tot_max_med_per"] || 0,
};
sql = this._doValueSubstitution(sql, map);
this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["IncidentModelV2", "Add", "Insert"], DATASOURCE, sql, null);
this.incidentAudit([map], "add");
return true;
]]>
        </CodeText>
      </Service>
      <Service name="_addNotificationModel" args="queryConfig,metricId" private="true">
        <CodeText>
          <![CDATA[print("_addNotificationModel: metricId="+__prettyPrintJSON(metricId));
var DATASOURCE = queryConfig["data-source"]["notification-model"];

var sql = Context.getLocalResource("NOTIFICATION_SEVERITY_DELETE_SQL");
var map = {
    "metric_id" : metricId,
};
sql = this._doValueSubstitution(sql, map);
this.executeSQLUpdate(queryConfig, [], ["NotificationSeverity", "Add", "Delete"], DATASOURCE, sql, null);

var sql = Context.getLocalResource("NOTIFICATION_METRIC_DELETE_SQL");
var map = {
    "metric_id" : metricId,
};
sql = this._doValueSubstitution(sql, map);
this.executeSQLUpdate(queryConfig, [], ["NotificationMetric", "Add", "Delete"], DATASOURCE, sql, null);

var sql = "SELECT max(id)+1 as next_id FROM metric_dim";
var result = this.executeSQLQuery(queryConfig, [], ["BaselineModel", "Check"], DATASOURCE, sql, null);
if (result != null && result.total == 1) {
    var nextId = Number(result.items[0]["next_id"]);

    var sql = Context.getLocalResource("NOTIFICATION_METRIC_INSERT_SQL");
    var map = {
        "next_id"   : nextId,
        "metric_id" : metricId,
    };
    sql = this._doValueSubstitution(sql, map);
    this.executeSQLUpdate(queryConfig, [], ["NotificationMetric", "Add", "Insert"], DATASOURCE, sql, null);

    var sql = Context.getLocalResource("NOTIFICATION_SEVERITY_INSERT_SQL");
    var map = {
        "next_id"    : nextId,
        "vitria_sev" : "High",
    };
    sql = this._doValueSubstitution(sql, map);
    this.executeSQLUpdate(queryConfig, [], ["NotificationSeverity", "Add", "Insert", "High"], DATASOURCE, sql, null);

    var sql = Context.getLocalResource("NOTIFICATION_SEVERITY_INSERT_SQL");
    var map = {
        "next_id"    : nextId,
        "vitria_sev" : "Medium",
    };
    sql = this._doValueSubstitution(sql, map);
    this.executeSQLUpdate(queryConfig, [], ["NotificationSeverity", "Add", "Insert", "Medium"], DATASOURCE, sql, null);

    return true;
}
return false;
]]>
        </CodeText>
      </Service>
      <Service name="_convertRecordsToCSV" args="fields,records" private="true">
        <CodeText>
          <![CDATA[function DQ(str)
{
    return '"'+str+'"';
}

var buf = [];
var row = [];
fields.forEach(function(field) {
    row.push(DQ(field.label || field.name));
});
buf.push(row.join(","));
records.forEach(function(record) {
    row = [];
    fields.forEach(function(field) {
        var value = record[field.name] || "";
        if (value.indexOf('"') != -1) {
            value = value.split('"').join("&quot;");
        }
        row.push(DQ(value));
    });
    buf.push(row.join(","));
});
return buf.join("\n");
]]>
        </CodeText>
      </Service>
      <Service name="_createIncidentModelV1" args="serviceConfig,sourceConfig,anomalyConfig,queryConfig,config,overwrite" private="true">
        <CodeText>
          <![CDATA[var selected = this._getDefaultIncidentModel(sourceConfig, anomalyConfig, config);
if (overwrite) {
    print("Create/Overwrite incident model");
    // if overwrite, we just call addIncidentModel(), which internally
    // will delete existing model, if exist
    return this._addIncidentModelV1(serviceConfig, sourceConfig, queryConfig, selected);
}
else {
    if (this._hasIncidentModelV1(queryConfig, selected)) {
        print("EXIST incident model");
    }
    else {
        // doesnt exist, create
        print("Create incident model");
        return this._addIncidentModelV1(serviceConfig, sourceConfig, queryConfig, selected);
    }
}
]]>
        </CodeText>
      </Service>
      <Service name="_createIncidentModelV2" args="serviceConfig,sourceConfig,anomalyConfig,queryConfig,config,overwrite" private="true">
        <CodeText>
          <![CDATA[var selected = this._getDefaultIncidentModel(sourceConfig, anomalyConfig, config);

if (!overwrite && this._hasIncidentModelV2(queryConfig, selected)) {
    print("EXIST incident model");
    return false;
}
else {
    var adm_name = this._getAdmName(anomalyConfig, queryConfig, selected);

    print("Create/Overwrite incident model");
    // if overwrite, we just call addIncidentModel(), which internally
    // will delete existing model, if exist
    var ok = this._addIncidentModelV2(serviceConfig, sourceConfig, queryConfig, selected);
    if (ok) {
        if (config["update-metric-qdc"] != false) {
            // create metric/QDC entry as needed
            this._createMetricQDC(serviceConfig, sourceConfig, queryConfig, selected);
        }
        if (config["update-metric-info"] != false) {
            // create metric/info entry as needed
            this._createMetricInfo(serviceConfig, queryConfig, selected);
        }
    }
    return ok;
}
]]>
        </CodeText>
      </Service>
      <Service name="_createMetricID" args="service_name,sub_service_name,app_name,metric_name,dim_keys,dim_values" private="true">
        <CodeText>
          <![CDATA[var metric_id = service_name + "|" + sub_service_name + "|" + app_name + "|" + metric_name;
if (dim_keys != null && dim_keys != "" && dim_keys != "[]" && dim_values != null && dim_values != "" && dim_values != "[]") {
    dim_keys = JSON.parse(dim_keys);
    dim_values = JSON.parse(dim_values);
    if (dim_keys.length == dim_values.length) {
        metric_id = metric_id + "|" + dim_values.join("|");
    }
}
return metric_id;
]]>
        </CodeText>
      </Service>
      <Service name="_createMetricInfo" args="serviceConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[// _createMetricInfo

var DATASOURCE = queryConfig["data-source"]["metric-info"];
var OVERWRITE = true;

var metric_id = selected["service"] + "|" + selected["sub_service"] + "|" + selected["dim_values"];

var createMetricInfo = true;
if (OVERWRITE) {
    var sql = "DELETE FROM viaops_metric_info WHERE metric_id = '" + metric_id + "'";
    this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["MetricInfo", "Delete"], DATASOURCE, sql, null);
}
else {
    var sql = "SELECT * FROM viaops_metric_info WHERE metric_id = '" + metric_id + "'";
    var result = this.executeSQLQuery(queryConfig, [selected["service"], selected["sub_service"]], ["MetricInfo", "Check"], DATASOURCE, sql, null);
    print("_createMetricInfo: result="+__prettyPrintJSON(result));
    if (result != null && result.total == 1 && result.items.length == 1) {
        createMetricInfo = false;
    }
}
if (createMetricInfo) {
    var toks = metric_id.split("|");
    var base_names  = toks.slice(0,4);
    var base_labels = this._getGroupItemLabels(serviceConfig, base_names);
    var dim_keys = (selected["dim_keys"]).split("|");
    var dim_values = (selected["dim_values"]).split("|");
    if (dim_keys.length > 2 && dim_values.length > 2 && dim_keys.length == dim_values.length) {
        dim_keys = JSON.stringify(dim_keys.slice(2,100));
        dim_values = JSON.stringify(dim_values.slice(2,100));
    }
    else {
        dim_keys = "[]";
        dim_values = "[]";
    }
    var sql = "INSERT INTO viaops_metric_info ("
            + "metric_id, base_metric_id,"
            + "service_name,service_label,sub_service_name,sub_service_label,"
            + "app_name,app_label,metric_name,metric_label,"
            + "dim_keys,dim_values"
            + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    var args = [[
        metric_id, base_names.join("|"),
        base_names[0], base_labels[0], base_names[1], base_labels[1],
        base_names[2], base_labels[2], base_names[3], base_labels[3],
        dim_keys, dim_values
    ]];
    this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["MetricInfo", "Insert"], DATASOURCE, sql, args);
}
]]>
        </CodeText>
      </Service>
      <Service name="_createMetricQDC" args="serviceConfig,sourceConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["metric-qdc"];
var OVERWRITE = true;
var TABLE = "viaops_qdc_table";

var metric_id = selected["service"] + "|" + selected["sub_service"] + "|" + selected["dim_values"];

var createMetricQDC = true;
if (OVERWRITE) {
    var sql = "DELETE FROM " + TABLE + " WHERE metric_id = '" + metric_id + "'";
    this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["MetricQDC", "Delete"], DATASOURCE, sql, null);
}
else {
    var sql = "SELECT * FROM " + TABLE + " WHERE metric_id = '" + metric_id + "'";
    var result = this.executeSQLQuery(queryConfig, [selected["service"], selected["sub_service"]], ["MetricQDC", "Check"], DATASOURCE, sql, null);
    print("_createMetricQDC: result="+__prettyPrintJSON(result));
    if (result != null && result.total == 1 && result.items.length == 1) {
        createMetricQDC = false;
    }
}
if (createMetricQDC) {
    var toks = metric_id.split("|");
    var base_metric_id = toks.slice(0,4).join("|");
    var qdcMap = this._getQDCMap(serviceConfig, sourceConfig, queryConfig);
    var model = qdcMap[base_metric_id];
    if (model != null) {
        var qdc = model.jsonQDC.slice(0);
        var dim_keys = (selected["dim_keys"]).split("|");
        var dim_values = (selected["dim_values"]).split("|");
        for (var i=2; i<dim_keys.length; i++) {
            if (dim_values[i] == "${"+dim_keys[i]+"}") {
                // wildcard
                qdc.push({
                    name  : dim_keys[i],
                    not   : true,
                    value : null,
                });
                qdc.push({
                    name  : dim_keys[i],
                    not   : true,
                    value : "",
                });
            }
            else {
                qdc.push({
                    name  : dim_keys[i],
                    value : dim_values[i],
                });
            }
        }
        var sqlQDC = this._convertDimensionValuesToWhereClause(queryConfig, null, qdc, null);
        var jsonQDC = null;
        if (qdc.length > 1) {
            jsonQDC = JSON.stringify([{
                "and" : qdc
            }]);
        }
        else {
            jsonQDC = JSON.stringify(qdc);
        }
        var sql = "INSERT INTO " + TABLE + " (metric_id, sql_qdc, json_qdc, aggr_func, parse_target_group) VALUES (?, ?, ?, ?, ?)";
        var args = [[metric_id, sqlQDC, jsonQDC, model.aggrFunc, model.parseTargetGroup]];
        this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["MetricQDC", "Insert"], DATASOURCE, sql, args);
    }
}
]]>
        </CodeText>
      </Service>
      <Service name="_deleteIncidentModelV1" args="queryConfig,selection" private="true">
        <CodeText>
          <![CDATA[//print("_deleteIncidentModelV1: selection="+__prettyPrintJSON(selection));
var DATASOURCE = queryConfig["data-source"]["incident-model"];
var sql = Context.getLocalResource("INCIDENT_MODEL_DELETE_SQL_1");
var args = [];
for (var i=0; i<selection.length; i++) {
    args.push([
        selection[i]["service"],
        selection[i]["sub_service"],
        selection[i]["dim_values"],
        selection[i]["anomaly_window"],
    ]);
}
this.executeSQLUpdate(queryConfig, [selection[0]["service"], selection[0]["sub_service"]], ["IncidentModelV1", "Delete"], DATASOURCE, sql, args);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="_deleteIncidentModelV2" args="queryConfig,selection" private="true">
        <CodeText>
          <![CDATA[//print("_deleteIncidentModelV2: selection="+__prettyPrintJSON(selection));
var DATASOURCE = queryConfig["data-source"]["incident-model"];
var sql = Context.getLocalResource("INCIDENT_MODEL_DELETE_SQL_2");
var args = [];
var audit = [];
for (var i=0; i<selection.length; i++) {
    args.push([
        selection[i]["metric_id"],
        selection[i]["anomaly_window"],
        selection[i]["algorithm"],
        selection[i]["threshold_policy"],
    ]);
    audit.push({
        metric_id: selection[i]["metric_id"],
        anomaly_window: selection[i]["anomaly_window"],
        algorithm: selection[i]["algorithm"],
        threshold_policy: selection[i]["threshold_policy"]
    })
}
this.executeSQLUpdate(queryConfig, [selection[0]["service"], selection[0]["sub_service"]], ["IncidentModelV2", "Delete"], DATASOURCE, sql, args);
this.incidentAudit(audit, "delete");
return true;
]]>
        </CodeText>
      </Service>
      <Service name="_getAdmName" args="anomalyConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["baseline-model"];

var admNameRecord = null;
var adm_name = selected["source_table"] + "-" + selected["anomaly_window"];
var sql = Context.getLocalResource("ANOMALY_WINDOW_SELECT_SQL");
var map = {
    "adm_name" : adm_name,
};
sql = this._doValueSubstitution(sql, map);
var result = this.executeSQLQuery(queryConfig, [adm_name], ["AnomalyWindow", "Check"], DATASOURCE, sql, null);
//print("_getAdmName: result="+__prettyPrintJSON(result));
if (result != null && result.total == 1 && result.items.length == 1) {
    admNameRecord = result.items[0];
}
if (admNameRecord == null) {
    var dim_keys = (selected["dim_keys"]).split("|");
    var dim_values = (selected["dim_values"]).split("|");
    var config = {
        svc : selected["service"],
        comp : selected["sub_service"],
        app : dim_values[0],
        metric : dim_values[1],
        anomalyWindow : selected["anomaly_window"],
    };
    if (dim_keys.length > 2 && dim_values.length == dim_keys.length) {
        config.dimKeys = dim_keys.slice(2).join("|");
        config.dimValues = dim_values.slice(2).join("|");
    }
    var rules = this._getDefaultConfigRules(anomalyConfig, "window-config", config);
    for (var i=0; i<rules.length; i++) {
        var rule = rules[i];
        for (var key in rule) {
            if (selected[key] == null) {
                selected[key] = rule[key];
            }
        }
    }
    sql = Context.getLocalResource("ANOMALY_WINDOW_INSERT_SQL");
    var map = {
        "adm_name" : adm_name,
        "window_size" : selected["window_size"],
        "anomaly_step_size" : selected["anomaly_step_size"],
        "value_field" : selected["value_field"],
        "source_table" : selected["source_table"],
        "timezone" : selected["timezone"],
    };
    sql = this._doValueSubstitution(sql, map);
    this.executeSQLUpdate(queryConfig, [adm_name], ["AnomalyWindow", "Insert"], DATASOURCE, sql, null);
}
else {
    // already exist, check if we need to update
    // currently, ONLY timezone is changeable by user
    if (selected["timezone"] != null && admNameRecord["timezone"] != selected["timezone"]) {
        sql = Context.getLocalResource("ANOMALY_WINDOW_UPDATE_SQL");
        var map = {
            "adm_name" : adm_name,
            "timezone" : selected["timezone"],
        };
        sql = this._doValueSubstitution(sql, map);
        this.executeSQLUpdate(queryConfig, [adm_name], ["AnomalyWindow", "Update"], DATASOURCE, sql, null);
    }
}
return adm_name;
]]>
        </CodeText>
      </Service>
      <Service name="_getDefaultAnomalyModel" args="sourceConfig,anomalyConfig,config" private="true">
        <CodeText>
          <![CDATA[var record = {
    "service":config.svc,
    "sub_service":config.comp,
    "anomaly_window":config.anomalyWindow,
};
var dim_keys = null;
var dim_values = null;

var rules = this._getDefaultConfigRules(anomalyConfig, "anomaly-config", config);
for (var i=0; i<rules.length; i++) {
    var rule = rules[i];
    for (var key in rule) {
        switch (key) {
            case "dim_keys":
                if (dim_keys == null) dim_keys = rule[key];
                break;
            case "dim_values":
                if (dim_values == null) dim_values = rule[key];
                break;
            default:
                if (record[key] == null) {
                    record[key] = rule[key];
                }
                break;
        }
    }
}
record["source_table"] = this._getTargetGroup(sourceConfig, {
    svcName    : config.svc,
    compName   : config.comp,
    appName    : config.app,
    metricName : config.metric,
});

if (dim_keys == null) dim_keys = "app|metric_name";
if (dim_values == null) dim_values = config.app + "|" + config.metric;
if (config.dimKeys != null && config.dimKeys != "" && config.dimValues != null && config.dimValues != "") {
    dim_keys += "|" + config.dimKeys;
    dim_values += "|" + config.dimValues;
}
record["dim_keys"] = dim_keys;
record["dim_values"] = dim_values;

if (config["default-values"] != null) {
    for (var key in config["default-values"]) {
        record[key] = config["default-values"][key];
    }
}

return record;
]]>
        </CodeText>
      </Service>
      <Service name="_getDefaultBaselineModel" args="sourceConfig,anomalyConfig,config" private="true">
        <CodeText>
          <![CDATA[var record = {
    "service":config.svc,
    "sub_service":config.comp,
    "anomaly_window":config.anomalyWindow,
};
var dim_keys = null;
var dim_values = null;

var rules = this._getDefaultConfigRules(anomalyConfig, "baseline-config", config);
for (var i=0; i<rules.length; i++) {
    var rule = rules[i];
    for (var key in rule) {
        switch (key) {
            case "dim_keys":
                if (dim_keys == null) dim_keys = rule[key];
                break;
            case "dim_values":
                if (dim_values == null) dim_values = rule[key];
                break;
            default:
                if (record[key] == null) {
                    record[key] = rule[key];
                }
                break;
        }
    }
}
record["source_table"] = this._getTargetGroup(sourceConfig, {
    svcName    : config.svc,
    compName   : config.comp,
    appName    : config.app,
    metricName : config.metric,
});

if (dim_keys == null) dim_keys = "app|metric_name";
if (dim_values == null) dim_values = config.app + "|" + config.metric;
if (config.dimKeys != null && config.dimKeys != "" && config.dimValues != null && config.dimValues != "") {
    dim_keys += "|" + config.dimKeys;
    dim_values += "|" + config.dimValues;
}
record["dim_keys"] = dim_keys;
record["dim_values"] = dim_values;

if (config["default-values"] != null) {
    for (var key in config["default-values"]) {
        record[key] = config["default-values"][key];
    }
}

return record;
]]>
        </CodeText>
      </Service>
      <Service name="_getDefaultConfigRules" args="configRules,configName,config" private="true">
        <CodeText>
          <![CDATA[var self = this;

function collectRules(rules, record, name)
{
    self._findAllRules(record, function(key) {
        var cfg = configRules[key];
        return cfg && cfg[name];
    }).forEach(function(rule) {
        rules.push(rule);
    });
}

// first look for specific window
var record = {
    svcName    : config.svc,
    compName   : config.comp,
    appName    : config.app,
    metricName : null,
};
var rules = [];

if (config.dimKeys != null && config.dimKeys != "" && config.dimValues != null && config.dimValues != "") {
    // lookup for dimension specific metric id
    record["metricName"] = config.metric + "|" + config.dimValues;
    collectRules(rules, record, configName + "[" + config.anomalyWindow + "]");
}
// lookup for base metric id
record["metricName"] = config.metric;
collectRules(rules, record, configName + "[" + config.anomalyWindow + "]");

// add non-window specific defaults
if (config.dimKeys != "" && config.dimValues != "") {
    // lookup for dimension specific metric id
    record["metricName"] = config.metric + "|" + config.dimValues;
    collectRules(rules, record, configName);
}
// lookup for base metric id
record["metricName"] = config.metric;
collectRules(rules, record, configName);

//print("_getDefaultConfigRules: rules="+__prettyPrintJSON(rules));
return rules;
]]>
        </CodeText>
      </Service>
      <Service name="_getDefaultIncidentModel" args="sourceConfig,anomalyConfig,config" private="true">
        <CodeText>
          <![CDATA[var record = {
    "service":config.svc,
    "sub_service":config.comp,
    "anomaly_window":config.anomalyWindow,
};
if (config.algorithm != null) {
    record["algorithm"] = config.algorithm;
}
if (config.thresholdPolicy != null) {
    record["threshold_policy"] = config.thresholdPolicy;
}
var dim_keys = null;
var dim_values = null;

var rules = this._getDefaultConfigRules(anomalyConfig, "incident-config", config);
for (var i=0; i<rules.length; i++) {
    var rule = rules[i];
    for (var key in rule) {
        switch (key) {
            case "dim_keys":
                if (dim_keys == null) dim_keys = rule[key];
                break;
            case "dim_values":
                if (dim_values == null) dim_values = rule[key];
                break;
            default:
                if (record[key] == null) {
                    record[key] = rule[key];
                }
                break;
        }
    }
}

record["source_table"] = this._getTargetGroup(sourceConfig, {
    svcName    : config.svc,
    compName   : config.comp,
    appName    : config.app,
    metricName : config.metric,
});

if (dim_keys == null) dim_keys = "app|metric_name";
if (dim_values == null) dim_values = config.app + "|" + config.metric;
if (config.dimKeys != null && config.dimKeys != "" && config.dimValues != null && config.dimValues != "") {
    dim_keys += "|" + config.dimKeys;
    dim_values += "|" + config.dimValues;
}
record["dim_keys"] = dim_keys;
record["dim_values"] = dim_values;

if (config["default-values"] != null) {
    for (var key in config["default-values"]) {
        record[key] = config["default-values"][key];
    }
}

return record;
]]>
        </CodeText>
      </Service>
      <Service name="_getDimValues" args="context,obj" private="true">
        <CodeText>
          <![CDATA[var dimVals = obj["meta"] && obj["meta"]["dimension-values"];
if (dimVals != null) {
    dimVals.forEach(function(dimVal) {
        dimVal["context"] = context;
    });
}
return dimVals;
]]>
        </CodeText>
      </Service>
      <Service name="_getIncidentModelV1" args="queryConfig" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["incident-model"];
var SELECT = Context.getLocalResource("INCIDENT_MODEL_SELECT_SQL_1");
var result = this.executeSQLQuery(queryConfig, [], ["IncidentModelV1", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="_getIncidentModelV2" args="queryConfig" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["incident-model"];
var SELECT = Context.getLocalResource("INCIDENT_MODEL_SELECT_SQL_2");
var result = this.executeSQLQuery(queryConfig, [], ["IncidentModelV2", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    // not ideal... but for now, we split metric_id to get service, sub_service, dim_values
    // for backward compat... to get dim_keys or to do is properly, we need to look up or join
    // with viaops_metric_info
    result.items.forEach(function(item) {
        var toks = (item["metric_id"]).split("|");
        item["service"] = toks.shift();
        item["sub_service"] = toks.shift();
        item["dim_values"] = toks.join("|");
    });
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="_getItemName" args="item" private="true">
        <CodeText>
          <![CDATA[var itemName = item["name"];
var hash = itemName.indexOf("#");
return hash != -1 ? itemName.substring(0, hash) : itemName;
]]>
        </CodeText>
      </Service>
      <Service name="_getMetricID" args="svc,comp,app,metric" private="true">
        <CodeText>
          <![CDATA[var metricId = metric["meta"] && metric["meta"]["metric-id"];
if (metricId == null) {
    var buf = [];
    buf.push(this._getItemName(svc));
    buf.push(comp != null ? this._getItemName(comp) : "*");
    buf.push(app != null ? this._getItemName(app) : "*");
    buf.push(this._getItemName(metric));
    metricId = buf.join("|");
}
return metricId;
]]>
        </CodeText>
      </Service>
      <Service name="_getQDCMap" args="serviceConfig,sourceConfig,queryConfig" private="true">
        <CodeText>
          <![CDATA[function stripQdcContext(qdcList)
{
    qdcList.forEach(function(qdc) {
        if (qdc.context != null) delete qdc.context;
        if (qdc["and"] != null) {
            stripQdcContext(qdc["and"]);
        }
        else if (qdc["or"] != null) {
            stripQdcContext(qdc["or"]);
        }
    });
}

var qdcMap = {};
var model = this.getParseModel(serviceConfig, sourceConfig, queryConfig);
model.forEach(function(item) {
    var jsonQDC = item["jsonQDC"];
    var aggrFunc = item["parseAggrFunc"];
    var parseTargetGroup = item["parseTargetGroup"];
    if (jsonQDC != null && jsonQDC.length > 0 && aggrFunc != null && aggrFunc != "") {
        stripQdcContext(jsonQDC);
        // always an array of 1 due to the forced AND we added
        if (jsonQDC[0]["and"] != null) {
            // if top expr is AND, extract it's elements
            qdcMap[item["metricId"]] = {
                jsonQDC  : jsonQDC[0]["and"],
                aggrFunc : aggrFunc,
                parseTargetGroup : parseTargetGroup,
            };
        }
        else {
            qdcMap[item["metricId"]] = {
                jsonQDC  : jsonQDC,
                aggrFunc : aggrFunc,
                parseTargetGroup : parseTargetGroup,
            };
        }
    }
});
return qdcMap;
]]>
        </CodeText>
      </Service>
      <Service name="_getQueryParams" args="queryConfig,record" private="true">
        <CodeText>
          <![CDATA[if (queryConfig["query-params"] != null) {
    return this._findRule(record, function(key) {
        var params = queryConfig["query-params"][key];
        if (params != null) {
            return params;
        }
        return null;
    });
}
else {
    return null;
}
]]>
        </CodeText>
      </Service>
      <Service name="_getSourceGroup" args="sourceConfig,record" private="true">
        <CodeText>
          <![CDATA[return this._findRule(record, function(key) {
    var appMeta = sourceConfig[key];
    if (appMeta != null && appMeta["metric-list"] != null && appMeta["metric-list"][record["metricName"]] != null) {
        var sourceGroup = appMeta["metric-list"][record["metricName"]]["source-group"];
        if (sourceGroup != null) return sourceGroup;
    }
    if (appMeta != null && appMeta["source-group"] != null) {
        return appMeta["source-group"];
    }
    return null;
});
]]>
        </CodeText>
      </Service>
      <Service name="_getTargetGroup" args="sourceConfig,record" private="true">
        <CodeText>
          <![CDATA[return this._findRule(record, function(key) {
    var appMeta = sourceConfig[key];
    if (appMeta != null && appMeta["metric-list"] != null && appMeta["metric-list"][record["metricName"]] != null) {
        var targetGroup = appMeta["metric-list"][record["metricName"]]["target-group"];
        if (targetGroup != null) return targetGroup;
    }
    if (appMeta != null && appMeta["target-group"] != null) {
        return appMeta["target-group"];
    }
    return null;
});
]]>
        </CodeText>
      </Service>
      <Service name="_hasAnomalyModel" args="anomalyConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["anomaly-model"];
var adm_name = this._getAdmName(anomalyConfig, queryConfig, selected);
var metric_id = selected["service"] + "|" + selected["sub_service"] + "|" + selected["dim_values"];
var sql = Context.getLocalResource("ANOMALY_MODEL_EXISTS_SQL");
var map = {
    "adm_name" : adm_name,
    "metric_id" : metric_id,
};
sql = this._doValueSubstitution(sql, map);
var result = this.executeSQLQuery(queryConfig, [adm_name], ["AnomalyModel", "Check"], DATASOURCE, sql, null);
//print("_hasAnomalyModel: check="+__prettyPrintJSON(result));
return result != null && result.total == 1 && result.items.length == 1 && result.items[0]["count"] > 0;
]]>
        </CodeText>
      </Service>
      <Service name="_hasBaselineModel" args="anomalyConfig,queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["baseline-model"];
var adm_name = this._getAdmName(anomalyConfig, queryConfig, selected);
var metric_id = selected["service"] + "|" + selected["sub_service"] + "|" + selected["dim_values"];
var sql = Context.getLocalResource("BASELINE_MODEL_EXISTS_SQL");
var map = {
    "adm_name" : adm_name,
    "metric_id" : metric_id,
};
sql = this._doValueSubstitution(sql, map);
var result = this.executeSQLQuery(queryConfig, [adm_name], ["BaselineModel", "Check"], DATASOURCE, sql, null);
//print("_hasBaselineModel: check="+__prettyPrintJSON(result));
return result != null && result.total == 1 && result.items.length == 1 && result.items[0]["count"] > 0;
]]>
        </CodeText>
      </Service>
      <Service name="_hasCorrelationRule" args="queryConfig,map" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["incident-group"];
var sql = Context.getLocalResource("CORRELATION_TIME_EXISTS_SQL");
sql = this._doValueSubstitution(sql, map);
var result = this.executeSQLQuery(queryConfig, [], ["CorrelationTimes", "Check"], DATASOURCE, sql, null);
//print("_hasCorrelationRule: check="+__prettyPrintJSON(result));
return result != null && result.total == 1 && result.items.length == 1 && result.items[0]["count"] > 0;
]]>
        </CodeText>
      </Service>
      <Service name="_hasIncidentGroupModel" args="queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["incident-group"];
var sql = Context.getLocalResource("INCIDENT_GROUP_EXISTS_SQL");
sql = this._doValueSubstitution(sql, selected);
var result = this.executeSQLQuery(queryConfig, [selected["group_rule_name"]], ["IncidentGroup", "Check"], DATASOURCE, sql, null);
print("_hasIncidentGroupModel: check="+__prettyPrintJSON(result));
return result != null && result.total == 1 && result.items.length == 1 && result.items[0]["count"] > 0;
]]>
        </CodeText>
      </Service>
      <Service name="_hasIncidentModelV1" args="queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["incident-model"];
var metric_id = selected["service"] + "|" + selected["sub_service"] + "|" + selected["dim_values"];
var sql = Context.getLocalResource("INCIDENT_MODEL_EXISTS_SQL_1");
sql = this._doValueSubstitution(sql, selected);
var result = this.executeSQLQuery(queryConfig, [selected["service"], selected["sub_service"]], ["IncidentModel", "Check"], DATASOURCE, sql, null);
//print("_hasIncidentModel: check="+__prettyPrintJSON(result));
return result != null && result.total == 1 && result.items.length == 1 && result.items[0]["count"] > 0;
]]>
        </CodeText>
      </Service>
      <Service name="_hasIncidentModelV2" args="queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[var DATASOURCE = queryConfig["data-source"]["incident-model"];
var sql = Context.getLocalResource("INCIDENT_MODEL_EXISTS_SQL_2");
sql = this._doValueSubstitution(sql, selected);
var result = this.executeSQLQuery(queryConfig, [selected["service"], selected["sub_service"]], ["IncidentModelV2", "Check"], DATASOURCE, sql, null);
//print("_hasIncidentModel: check="+__prettyPrintJSON(result));
return result != null && result.total == 1 && result.items.length == 1 && result.items[0]["count"] > 0;
]]>
        </CodeText>
      </Service>
      <Service name="_hasNotificationModel" args="queryConfig,metricId" private="true">
        <CodeText>
          <![CDATA[print("_hasNotificationModel: metricId="+__prettyPrintJSON(metricId));
var DATASOURCE = queryConfig["data-source"]["notification-model"];

var sql = Context.getLocalResource("NOTIFICATION_MODEL_EXISTS_SQL");
var map = {
    "metric_id" : metricId,
};
sql = this._doValueSubstitution(sql, map);
var result = this.executeSQLQuery(queryConfig, [], ["NotificationModel", "Check"], DATASOURCE, sql, null);
//print("_hasNotificationModel: check="+__prettyPrintJSON(result));
return result != null && result.total == 1 && result.items.length == 1 && result.items[0]["count"] > 0;
]]>
        </CodeText>
      </Service>
      <Service name="_mergeDimValues" args="svcDimVals,compDimVals,appDimVals,metricDimVals" private="true">
        <CodeText>
          <![CDATA[var dimVals = [];
if (svcDimVals != null) {
    dimVals = dimVals.concat(svcDimVals);
}
if (compDimVals != null) {
    dimVals = dimVals.concat(compDimVals);
}
if (appDimVals != null) {
    dimVals = dimVals.concat(appDimVals);
}
if (metricDimVals != null) {
    dimVals = dimVals.concat(metricDimVals);
}
return dimVals;
]]>
        </CodeText>
      </Service>
      <Service name="_updateIncidentModelV1" args="queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[if (selected["median_baseline"] == null) selected["median_baseline"] = 0;
if (selected["above"] == null) selected["above"] = 'n';
if (selected["below"] == null) selected["below"] = 'n';
var DATASOURCE = queryConfig["data-source"]["incident-model"];
var sql = Context.getLocalResource("INCIDENT_MODEL_UPDATE_SQL_1");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["IncidentModelV1", "Update"], DATASOURCE, sql, null);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="_updateIncidentModelV2" args="queryConfig,selected" private="true">
        <CodeText>
          <![CDATA[if (selected["algorithm"] == null) {
    selected["algorithm"] = 'score';
}
if (selected["threshold_policy"] == null) {
    if (selected["above"] == 'y') selected["threshold_policy"] = 'above';
    else if (selected["below"] == 'y') selected["threshold_policy"] = 'below';
    else selected["threshold_policy"] = 'above';
}
var DATASOURCE = queryConfig["data-source"]["incident-model"];
var sql = Context.getLocalResource("INCIDENT_MODEL_UPDATE_SQL_2");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["IncidentModelV2", "Update"], DATASOURCE, sql, null);
this.incidentAudit([selected], "modify");
return true;
]]>
        </CodeText>
      </Service>
      <Service name="addIncidentGroupContextualMetrics" args="group,selection" private="false">
        <CodeText>
          <![CDATA[//print("addIncidentGroupContextualMetrics: group="+__prettyPrintJSON(group));
//print("addIncidentGroupContextualMetrics: selection="+__prettyPrintJSON(selection));

var queryConfig = this.getQueryConfig();
var DATASOURCE = queryConfig["data-source"]["incident-group"];


var sql = Context.getLocalResource("INCIDENT_GROUP_CONTEXTUAL_SELECT_SQL");
var map = {
    "group_rule_name" : group.group_rule_name,
};
sql = this._doValueSubstitution(sql, map);

var existing = {};
var result = this.executeSQLQuery(queryConfig, [], ["IncidentGroup", "ContextualMetric", "Select"], DATASOURCE, sql, null);
if (result != null && result.items != null) {
    result.items.forEach(function(item) {
        existing[item.metric_id] = true;
    });
}


var sql = Context.getLocalResource("INCIDENT_GROUP_CONTEXTUAL_INSERT_SQL");
var args = [];

for (var i=0; i<selection.length; i++) {
    var selected = selection[i];
    var metric_id = selected.svc + "|" + selected.comp + "|" + selected.app + "|" + selected.metric;
    if (selected.dimValues != null) {
        metric_id = metric_id + "|" + selected.dimValues;
    }
    if (existing[metric_id] == null) {
        var contextual_metric = {
            metric_id : metric_id,
            display_options : JSON.stringify({
                style : "Overlay",
            }),
        };
        args.push([group.group_rule_name, contextual_metric.metric_id, contextual_metric.display_options]);
    }
}

if (args.length > 0) {
    this.executeSQLUpdate(queryConfig, [], ["IncidentGroup", "ContextualMetric", "Insert"], DATASOURCE, sql, args);
    this.incidentGroupContextualAudit(args, 'add');
}
]]>
        </CodeText>
      </Service>
      <Service name="applyDefaultIncidentConfig" args="configs" private="false">
        <CodeText>
          <![CDATA[function DQ(str)
{
    return '"'+str+'"';
}

//print("applyDefaultIncidentConfig: configs="+__prettyPrintJSON(configs));

var queryConfig = this.getQueryConfig();
var DATASOURCE = queryConfig["data-source"]["incident-model"];
for (var i=0; i<configs.length; i++) {
    var config = configs[i];
    if (config["_include_"] == true) {
        var changes = [];
        if (config["incidentHighThreshold"] != null && config["incidentHighThreshold"] != "") {
            changes.push("threshold_high="+config["incidentHighThreshold"]);
        }
        if (config["incidentMediumThreshold"] != null && config["incidentMediumThreshold"] != "") {
            changes.push("threshold_med="+config["incidentMediumThreshold"]);
        }
        if (config["incidentLowThreshold"] != null && config["incidentLowThreshold"] != "") {
            changes.push("threshold_low="+config["incidentLowThreshold"]);
        }
        if (config["incidentWarmupThreshold"] != null && config["incidentWarmupThreshold"] != "") {
            changes.push("warmup_threshold="+config["incidentWarmupThreshold"]);
        }
        var sql = "UPDATE viaops_incident_table SET\n"
                + changes.join(", ") + "\n"
                + "WHERE metric_id=" + DQ(config["metricId"]) + "\n"
                + "  AND window=" + DQ(config["anomalyWindow"]) + "\n"
                + "  AND algorithm=" + DQ(config["algorithm"]) + "\n"
                + "  AND threshold_policy=" + DQ(config["thresholdPolicy"]) + "\n";
        this.executeSQLUpdate(queryConfig, [], ["IncidentModel", "ApplyDefaults"], DATASOURCE, sql, null);
    }
}
return true;
]]>
        </CodeText>
      </Service>
      <Service name="computeDefaultIncidentConfig" args="selection,fromEpoch,toEpoch" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();

if (queryConfig["default-configs"] == null) {
    queryConfig["default-configs"] = {};
}
var FACTOR_FUNCTION = queryConfig["default-configs"]["score-factor-function"]   || "mean";
var USE_PERCENTILE  = queryConfig["default-configs"]["use-percentile-cutoff"]   != false;
var HIGH_CUTOFF     = queryConfig["default-configs"]["high-threshold-cutoff"]   || 99;
var MEDIUM_CUTOFF   = queryConfig["default-configs"]["medium-threshold-cutoff"] || 97;
var LOW_CUTOFF      = queryConfig["default-configs"]["low-threshold-cutoff"]    || 95;
var WARMUP_CUTOFF   = queryConfig["default-configs"]["warmup-threshold-cutoff"] || 90;

//print("computeDefaultIncidentConfig: selection="+__prettyPrintJSON(selection));

var configs = [];

function computeScoreFactor(result)
{
    var baselines = [];
    for (var i=0, n=result.length; i<n; i++) {
        var record = result[i];
        var baseline = record["_baseline1_"];
        if (baseline != null) {
            baselines.push(baseline);
        }
    }
    var factor = 0;
    switch (FACTOR_FUNCTION) {
        case "median":
            baselines.sort(function(a,b) {
                if (a > b) return 1;
                else if (a < b) return -1;
                return 0;
            });
            factor = (baselines[Math.floor((baselines.length-1)/2)] + baselines[Math.floor(baselines.length/2)])/2;
            break;
        case "mean":
            var sum = 0;
            baselines.forEach(function(baseline) {
                sum += baseline;
            });
            factor = sum / baselines.length;
            factor = Number(factor.toFixed(2));
            break;
    }
    // DO-222: custom adjustments to factor
    if (factor < 25) factor += 25;
    else if (factor < 50) factor = 50;
    return factor;
}

function computeScores(algorithm, thresholdPolicy, factor, result)
{
    var scores = [];
    for (var i=0, n=result.length; i<n; i++) {
        var record = result[i];
        switch (algorithm) {
            case "score":
                var OFFSET = 1;
                var actual = record["_value1_"];
                var baseline = record["_baseline1_"];
                if (OFFSET != null) {
                    actual = (actual != null ? actual : 0) + OFFSET;
                    baseline = (baseline != null ? baseline : 0) + OFFSET;
                }
                if (actual != null && baseline != null) {
                    var score = ((actual-baseline)/factor)*100;
                    score = Number(score.toFixed(2));
                    switch (thresholdPolicy) {
                        case "above":
                            if (score > 0) {
                                scores.push(Math.abs(score));
                            }
                            break;
                        case "below":
                            if (score < 0) {
                                scores.push(Math.abs(score));
                            }
                            break;
                    }
                }
                break;
            case "simple_threshold":
                var actual = record["_value1_"];
                if (actual != null) {
                    var score = actual;
                    score = Number(score.toFixed(2));
                    scores.push(score);
                }
                break;
        }
    }
    scores.sort(function(a,b) {
        if (a > b) return 1;
        else if (a < b) return -1;
        return 0;
    });
    return scores;
}

function computeConfig(metricId, anomalyWindow, algorithm, thresholdPolicy, result)
{
    //print("computeConfig: metricId="+metricId+" result="+__prettyPrintJSON(result));
    var factor = 0;
    if (algorithm == "score") {
        factor = computeScoreFactor(result);
    }
    var scores = computeScores(algorithm, thresholdPolicy, factor, result);
    var incidentHighThreshold=0,
        incidentMediumThreshold=0,
        incidentLowThreshold=0,
        incidentWarmupThreshold=0;
    switch (algorithm) {
        case "score":
            if (USE_PERCENTILE) {
                // percentile
                incidentHighThreshold   = scores[Math.floor((HIGH_CUTOFF/100)*scores.length)];
                incidentMediumThreshold = scores[Math.floor((MEDIUM_CUTOFF/100)*scores.length)];
                incidentLowThreshold    = scores[Math.floor((LOW_CUTOFF/100)*scores.length)];
                incidentWarmupThreshold = scores[Math.floor((WARMUP_CUTOFF/100)*scores.length)];
            }
            else {
                // percent
                var max_score = scores[scores.length-1];
                incidentHighThreshold   = (HIGH_CUTOFF/100)*max_score;
                incidentMediumThreshold = (MEDIUM_CUTOFF/100)*max_score;
                incidentLowThreshold    = (LOW_CUTOFF/100)*max_score;
                incidentWarmupThreshold = (WARMUP_CUTOFF/100)*max_score;
            }
            break;
        case "simple_threshold":
            switch (thresholdPolicy) {
                case "above":
                    if (USE_PERCENTILE) {
                        // percentile
                        incidentHighThreshold   = scores[Math.floor((HIGH_CUTOFF/100)*scores.length)];
                        incidentMediumThreshold = scores[Math.floor((MEDIUM_CUTOFF/100)*scores.length)];
                        incidentLowThreshold    = scores[Math.floor((LOW_CUTOFF/100)*scores.length)];
                        incidentWarmupThreshold = scores[Math.floor((WARMUP_CUTOFF/100)*scores.length)];
                    }
                    else {
                        // percent
                        var score_range = scores[scores.length-1] - scores[0];
                        incidentHighThreshold   = (HIGH_CUTOFF/100)*score_range;
                        incidentMediumThreshold = (MEDIUM_CUTOFF/100)*score_range;
                        incidentLowThreshold    = (LOW_CUTOFF/100)*score_range;
                        incidentWarmupThreshold = (WARMUP_CUTOFF/100)*score_range;
                    }
                    break;
                case "below":
                    if (USE_PERCENTILE) {
                        // percentile
                        incidentHighThreshold   = scores[Math.floor(((100-HIGH_CUTOFF)/100)*scores.length)];
                        incidentMediumThreshold = scores[Math.floor(((100-MEDIUM_CUTOFF)/100)*scores.length)];
                        incidentLowThreshold    = scores[Math.floor(((100-LOW_CUTOFF)/100)*scores.length)];
                        incidentWarmupThreshold = scores[Math.floor(((100-WARMUP_CUTOFF)/100)*scores.length)];
                    }
                    else {
                        // percent
                        var max_score = scores[scores.length-1];
                        var score_range = scores[scores.length-1] - scores[0];
                        incidentHighThreshold   = max_score-(((100-HIGH_CUTOFF)/100)*score_range);
                        incidentMediumThreshold = max_score-(((100-MEDIUM_CUTOFF)/100)*score_range);
                        incidentLowThreshold    = max_score-(((100-LOW_CUTOFF)/100)*score_range);
                        incidentWarmupThreshold = max_score-(((100-WARMUP_CUTOFF)/100)*score_range);
                    }
                    break;
            }
            break;
    }
    var config = {
        metricId        : metricId,
        anomalyWindow   : anomalyWindow,
        algorithm       : algorithm,
        thresholdPolicy : thresholdPolicy,
    };
    if (incidentHighThreshold != null) {
        config["incidentHighThreshold"] = incidentHighThreshold;
    }
    if (incidentMediumThreshold != null) {
        config["incidentMediumThreshold"] = incidentMediumThreshold;
    }
    if (incidentLowThreshold != null) {
        config["incidentLowThreshold"] = incidentLowThreshold;
    }
    if (incidentWarmupThreshold != null) {
        config["incidentWarmupThreshold"] = incidentWarmupThreshold;
    }
    configs.push(config);
}

for (var i=0; i<selection.length; i++) {
    var metricId        = selection[i]["metric_id"];
    var anomalyWindow   = selection[i]["anomaly_window"];
    var algorithm       = selection[i]["algorithm"];
    var thresholdPolicy = selection[i]["threshold_policy"];
    var filters = [{
        name  : "$.metricID",
        value : metricId,
    }, {
        name  : "$.timeRange",
        value : "absolute:"+fromEpoch+"/"+toEpoch,
    }, {
        name  : "$.interval",
        value : [{ "seconds": null, "interval": "5*M" }],
    }];
    var start = Date.now();
    var result = this._invokeTrendAnalysisService(queryConfig, filters);
    //print("getDefaultIncidentConfig/getTrendData: elapsed="+(Date.now()-start)+"ms");
    //print(__prettyPrintJSON(result));
    result.sort(function(a,b) {
        if (a._epoch_ > b._epoch_) return 1;
        else if (a._epoch_ < b._epoch_) return -1;
        return 0;
    });
    computeConfig(metricId, anomalyWindow, algorithm, thresholdPolicy, result);
}
print(__prettyPrintJSON(configs));
return configs;
]]>
        </CodeText>
      </Service>
      <Service name="createAnomalyModel" args="config,overwrite" private="false">
        <CodeText>
          <![CDATA[// SKIP creation of anomaly model
// no longer need to be created manually as the necessary configuration is
// derived from entries in incident table, using database view
return true;

var serviceConfig = this.getServiceConfig();
var sourceConfig  = this.getSourceConfig();
var anomalyConfig = this.getAnomalyConfig();
var queryConfig   = this.getQueryConfig();

if (typeof config == "string") {
    config = JSON.parse(config);
}
if (typeof overwrite == "string") {
    overwrite = overwrite == "true";
}
var selected = this._getDefaultAnomalyModel(sourceConfig, anomalyConfig, config);
//print("_createAnomalyModel: "+__prettyPrintJSON(selected));

if (!overwrite && this._hasAnomalyModel(anomalyConfig, queryConfig, selected)) {
    print("EXIST anomaly model");
    return false;
}
else {
    print("Create/Overwrite anomaly model");
    // if overwrite, we just call addAnomalyModel(), which internally
    // will delete existing model, if exist
    var ok = this._addAnomalyModel(serviceConfig, sourceConfig, anomalyConfig, queryConfig, selected);
    if (ok) {
        if (config["update-metric-qdc"] != false) {
            // create metric/QDC entry as needed
            this._createMetricQDC(serviceConfig, sourceConfig, queryConfig, selected);
        }
        if (config["update-metric-info"] != false) {
            // create metric/info entry as needed
            this._createMetricInfo(serviceConfig, queryConfig, selected);
        }
    }
    return ok;
}
]]>
        </CodeText>
      </Service>
      <Service name="createBaselineModel" args="config,overwrite" private="false">
        <CodeText>
          <![CDATA[// SKIP creation of anomaly model
// no longer need to be created manually as the necessary configuration is
// derived from entries in incident table, using database view
return true;

var serviceConfig = this.getServiceConfig();
var sourceConfig  = this.getSourceConfig();
var anomalyConfig = this.getAnomalyConfig();
var queryConfig   = this.getQueryConfig();

if (typeof config == "string") {
    config = JSON.parse(config);
}
if (typeof overwrite == "string") {
    overwrite = overwrite == "true";
}
var selected = this._getDefaultBaselineModel(sourceConfig, anomalyConfig, config);
//print("_createBaselineModel: "+__prettyPrintJSON(selected));

if (!overwrite && this._hasBaselineModel(anomalyConfig, queryConfig, selected)) {
    print("EXIST baseline model");
    return false;
}
else {
    print("Create/Overwrite baseline model");
    // if overwrite, we just call addBaselineModel(), which internally
    // will delete existing model, if exist
    var ok = this._addBaselineModel(serviceConfig, sourceConfig, anomalyConfig, queryConfig, selected);
    if (ok) {
        if (config["update-metric-qdc"] != false) {
            // create metric/QDC entry as needed
            this._createMetricQDC(serviceConfig, sourceConfig, queryConfig, selected);
        }
        if (config["update-metric-info"] != false) {
            // create metric/info entry as needed
            this._createMetricInfo(serviceConfig, queryConfig, selected);
        }
    }
    return ok;
}
]]>
        </CodeText>
      </Service>
      <Service name="createIncidentGroupModel" args="selected,overwrite" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_createIncidentGroupModel: selected="+__prettyPrintJSON(selected));
if (overwrite) {
    print("Create/Overwrite incident group model");
    // if overwrite, we just call addIncidentModel(), which internally
    // will delete existing model, if exist
    return this._addIncidentGroupModel(queryConfig, selected);
}
else {
    if (this._hasIncidentGroupModel(queryConfig, selected)) {
        print("EXIST incident group model");
    }
    else {
        // doesnt exist, create
        print("Create incident group model");
        return this._addIncidentGroupModel(queryConfig, selected);
    }
}
]]>
        </CodeText>
      </Service>
      <Service name="createIncidentModel" args="config,overwrite" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();
var sourceConfig  = this.getSourceConfig();
var anomalyConfig = this.getAnomalyConfig();
var queryConfig   = this.getQueryConfig();

if (typeof config == "string") {
    config = JSON.parse(config);
}
if (typeof overwrite == "string") {
    overwrite = overwrite == "true";
}
return this._createIncidentModelV2(serviceConfig, sourceConfig, anomalyConfig, queryConfig, config, overwrite);
]]>
        </CodeText>
      </Service>
      <Service name="createNotificationModel" args="metricId,overwrite" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_createNotificationModel: metricId="+__prettyPrintJSON(metricId));
if (overwrite) {
    print("Create/Overwrite notification model");
    // if overwrite, we just call addNotificationModel(), which internally
    // will delete existing model, if exist
    return this._addNotificationModel(queryConfig, metricId);
}
else {
    if (this._hasNotificationModel(queryConfig, metricId)) {
        print("EXIST notification model");
    }
    else {
        // doesnt exist, create
        print("Create notification model");
        return this._addNotificationModel(queryConfig, metricId);
    }
}
]]>
        </CodeText>
      </Service>
      <Service name="deleteAnomalyModel" args="selection" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

if (typeof selection == "string") {
    selection = JSON.parse(selection);
}
//print("_deleteAnomalyModel: selection="+__prettyPrintJSON(selection));
var DATASOURCE = queryConfig["data-source"]["anomaly-model"];

var adm_name = "*";
var sql = Context.getLocalResource("ANOMALY_MODEL_DELETE_SQL");
var args = [];
for (var i=0; i<selection.length; i++) {
    adm_name = selection[i]["source_table"] + "-" + selection[i]["anomaly_window"];
    args.push([
        adm_name,
        selection[i]["metric_id"],
    ]);
}
this.executeSQLUpdate(queryConfig, [adm_name], ["AnomalyModel", "Delete"], DATASOURCE, sql, args);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="deleteBaselineModel" args="selection" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

if (typeof selection == "string") {
    selection = JSON.parse(selection);
}
//print("_deleteBaselineModel: selection="+__prettyPrintJSON(selection));
var DATASOURCE = queryConfig["data-source"]["baseline-model"];

var adm_name = "*";
var sql = Context.getLocalResource("BASELINE_MODEL_DELETE_SQL");
var args = [];
for (var i=0; i<selection.length; i++) {
    adm_name = selection[i]["source_table"] + "-" + selection[i]["anomaly_window"];
    args.push([
        adm_name,
        selection[i]["metric_id"],
    ]);
}
this.executeSQLUpdate(queryConfig, [adm_name], ["BaselineModel", "Delete"], DATASOURCE, sql, args);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="deleteIncidentGroupContextualMetrics" args="group,selection" private="false">
        <CodeText>
          <![CDATA[//print("deleteIncidentGroupContextualMetrics: group="+__prettyPrintJSON(group));
//print("deleteIncidentGroupContextualMetrics: selection="+__prettyPrintJSON(selection));

var queryConfig = this.getQueryConfig();
var DATASOURCE = queryConfig["data-source"]["incident-group"];

var sql = Context.getLocalResource("INCIDENT_GROUP_CONTEXTUAL_DELETE_SQL");
var args = [];
var audit = [];

for (var i=0; i<selection.length; i++) {
    args.push([group.group_rule_name, selection[i]["metric_id"]]);
    audit.push([group.group_rule_name, selection[i]["metric_id"], null]);
}

if (args.length > 0) {
    this.executeSQLUpdate(queryConfig, [], ["IncidentGroup", "ContextualMetric", "Delete"], DATASOURCE, sql, args);
    this.incidentGroupContextualAudit(audit, "delete");
}
]]>
        </CodeText>
      </Service>
      <Service name="deleteIncidentGroupModel" args="selection" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_deleteIncidentGroupModel: selection="+__prettyPrintJSON(selection));
var DATASOURCE = queryConfig["data-source"]["incident-group"];

var sql_template = Context.getLocalResource("INCIDENT_GROUP_CORRELATION_DELETE_SQL");
var incidentGroupAudit = [];
var correlationAudit = []
selection.forEach(function(selected) {
    var sql = this._doValueSubstitution(sql_template, selected);
    this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentGroup", "Delete", "Correlation"], DATASOURCE, sql, null);
    correlationAudit.push([selected["group_rule_name"], null, null, null]);
    
    var sql = Context.getLocalResource("INCIDENT_GROUP_DELETE_SQL");
    sql = this._doValueSubstitution(sql, selected);
    this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentGroup", "Delete"], DATASOURCE, sql, null);
    incidentGroupAudit.push([selected["group_rule_name"], null, null]);
});
this.incidentGroupAudit(incidentGroupAudit, "delete");
this.incidentGroupCorrelationAudit(correlationAudit, "delete");
return true;
]]>
        </CodeText>
      </Service>
      <Service name="deleteIncidentModel" args="selection,version" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

if (typeof selection == "string") {
    selection = JSON.parse(selection);
}
switch (version) {
    case "V1":
        return this._deleteIncidentModelV1(queryConfig, selection);
    case "V2":
        return this._deleteIncidentModelV2(queryConfig, selection);
}
]]>
        </CodeText>
      </Service>
      <Service name="deleteNotificationModel" args="selection" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_deleteNotificationModel: selection="+__prettyPrintJSON(selection));
var DATASOURCE = queryConfig["data-source"]["notification-model"];

var sql = Context.getLocalResource("NOTIFICATION_SEVERITY_DELETE_SQL");
var args = [];
for (var i=0; i<selection.length; i++) {
    args.push([
        selection[i]["metric_id"],
    ]);
}
this.executeSQLUpdate(queryConfig, [], ["NotificationSeverity", "Delete"], DATASOURCE, sql, args);

var sql = Context.getLocalResource("NOTIFICATION_METRIC_DELETE_SQL");
var args = [];
for (var i=0; i<selection.length; i++) {
    args.push([
        selection[i]["metric_id"],
    ]);
}
this.executeSQLUpdate(queryConfig, [], ["NotificationMetric", "Delete"], DATASOURCE, sql, args);

return true;
]]>
        </CodeText>
      </Service>
      <Service name="downloadParseModelAsJSON" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();
var sourceConfig  = this.getSourceConfig();
var queryConfig   = this.getQueryConfig();

var File = java.io.File;
var System = java.lang.System;
var FileUtils = org.apache.commons.io.FileUtils;
var UUID = java.util.UUID;

function stripQdcContext(qdcList)
{
    qdcList.forEach(function(qdc) {
        if (qdc.context != null) delete qdc.context;
        if (qdc["and"] != null) {
            stripQdcContext(qdc["and"]);
        }
        else if (qdc["or"] != null) {
            stripQdcContext(qdc["or"]);
        }
    });
}

var parseModel = this.getParseModel(serviceConfig, sourceConfig, queryConfig);
parseModel.forEach(function(item) {
    var jsonQDC = item["jsonQDC"];
    if (jsonQDC != null) {
        stripQdcContext(jsonQDC);
    }
});

var tempDirectory = System.getProperty("java.io.tmpdir");
var tgtFile = new File(tempDirectory + "/" + UUID.randomUUID().toString());
print("Write Parse Model to " + tgtFile.getPath() + " for download");
FileUtils.writeStringToFile(tgtFile, JSON.stringify(parseModel, null, "    "), "UTF-8");

TimerTask.setTimeout("DeleteTempDownloadFile", 10, function(path) {
    var file = new java.io.File(path);
    print("Deleting download file: "+ file.getPath());
    if (file.delete()) {
        print("... " + file.getPath() + " deleted");
    }
    else {
        print("... " + file.getPath() + " delete exception");
    }
}, tgtFile.getPath());

return tgtFile.getName();
]]>
        </CodeText>
      </Service>
      <Service name="downloadServiceConfigAsCSV" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();

var File = java.io.File;
var System = java.lang.System;
var FileUtils = org.apache.commons.io.FileUtils;
var UUID = java.util.UUID;

var serviceConfigFields = [
    {name:"svcName",       label:"service"},
    {name:"compName",      label:"sub_service"},
    {name:"appName",       label:"app"},
    {name:"metricName",    label:"metricname"},
    {name:"dimValuesSQL",  label:"dim_values_sql"},
    {name:"dimValuesJSON", label:"dim_values_json"},
];
var serviceConfigRecords = this.getServiceConfigAsRecords(serviceConfig);
var serviceConfigCSV = this._convertRecordsToCSV(serviceConfigFields, serviceConfigRecords);

var tempDirectory = System.getProperty("java.io.tmpdir");
var tgtFile = new File(tempDirectory + "/" + UUID.randomUUID().toString());
print("Write ServiceConfig to " + tgtFile.getPath() + " for download");
FileUtils.writeStringToFile(tgtFile, serviceConfigCSV, "UTF-8");

TimerTask.setTimeout("DeleteTempDownloadFile", 10, function(path) {
    var file = new java.io.File(path);
    print("Deleting download file: "+ file.getPath());
    if (file.delete()) {
        print("... " + file.getPath() + " deleted");
    }
    else {
        print("... " + file.getPath() + " delete exception");
    }
}, tgtFile.getPath());

return tgtFile.getName();
]]>
        </CodeText>
      </Service>
      <Service name="downloadServiceConfigAsJSON" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();

var File = java.io.File;
var System = java.lang.System;
var FileUtils = org.apache.commons.io.FileUtils;
var UUID = java.util.UUID;

var tempDirectory = System.getProperty("java.io.tmpdir");
var tgtFile = new File(tempDirectory + "/" + UUID.randomUUID().toString());
print("Write ServiceConfig to " + tgtFile.getPath() + " for download");
FileUtils.writeStringToFile(tgtFile, JSON.stringify(serviceConfig, null, "    "), "UTF-8");

TimerTask.setTimeout("DeleteTempDownloadFile", 10, function(path) {
    var file = new java.io.File(path);
    print("Deleting download file: "+ file.getPath());
    if (file.delete()) {
        print("... " + file.getPath() + " deleted");
    }
    else {
        print("... " + file.getPath() + " delete exception");
    }
}, tgtFile.getPath());

return tgtFile.getName();
]]>
        </CodeText>
      </Service>
      <Service name="dumpNotificationActionRuleAsJSON" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

// _dumpNotificationActionRuleAsJSON
var DATASOURCE = queryConfig["data-source"]["notification-model"];

function DQ(str)
{
    return '"' + str + '"';
}

function dumpNotificationActionAsJSON(buf, indent)
{
    var SELECT = "SELECT * FROM action_dim";
    var result = this.executeSQLQuery(queryConfig, [], ["NotificationActionRuleAsJSON", "Action", "Select"], DATASOURCE, SELECT, null);
    if (result != null && result.items != null) {
        var ATTR_LIST = ["action_id","action_category","action_name","effective_sev","target_type","target_addr1","target_addr2","target_attr1","target_attr2","target_attr3","target_attr4","act_on_test","include_screenshot"];
        for (var i=0, n=result.items.length; i<n; i++) {
            var item = result.items[i];
            var last = i == (n-1);
            buf.push(indent + "{");
            ATTR_LIST.forEach(function(attr) {
                switch (attr) {
                    case "action_id":
                        buf.push(indent + "    " + DQ(attr) + ":" + item[attr] + ",");
                        break;
                    case "include_screenshot":
                        buf.push(indent + "    " + DQ(attr) + ":" + DQ(item[attr]));
                        break;
                    default:
                        buf.push(indent + "    " + DQ(attr) + ":" + DQ(item[attr]) + ",");
                        break;
                }
            });
            buf.push(indent + "}" + (last ? "" : ","));
        }
    }
}

function dumpNotificationRuleAsJSON(buf, indent)
{
    var SELECT = "SELECT * FROM rule_dim";
    var result = this.executeSQLQuery(queryConfig, [], ["NotificationActionRuleAsJSON", "Rule", "Select"], DATASOURCE, SELECT, null);
    if (result != null && result.items != null) {
        var ATTR_LIST = ["rule_id","action_id","rule_desc","measured_attr","value1","value2","value3","value4","value5","qualif_attr","qualif_value"];
        for (var i=0, n=result.items.length; i<n; i++) {
            var item = result.items[i];
            var last = i == (n-1);
            buf.push(indent + "{");
            ATTR_LIST.forEach(function(attr) {
                switch (attr) {
                    case "rule_id":
                    case "action_id":
                        if (item[attr]) {
                            buf.push(indent + "    " + DQ(attr) + ":" + item[attr] + ",");
                        }
                        break;
                    case "qualif_value":
                        buf.push(indent + "    " + DQ(attr) + ":" + DQ(item[attr]));
                        break;
                    default:
                        buf.push(indent + "    " + DQ(attr) + ":" + DQ(item[attr]) + ",");
                        break;
                }
            });
            buf.push(indent + "}" + (last ? "" : ","));
        }
    }
}

var buf = [];
buf.push("{");
buf.push("    " + DQ("actions") + ":[");
dumpNotificationActionAsJSON(buf, "        ");
buf.push("    ],");
buf.push("    " + DQ("rules") + ":[");
dumpNotificationRuleAsJSON(buf, "        ");
buf.push("    ]");
buf.push("}");
return buf.join("\n");

]]>
        </CodeText>
      </Service>
      <Service name="getAnomalyModel" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["anomaly-model"];
var SELECT = Context.getLocalResource("ANOMALY_MODEL_SELECT_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["AnomalyModel", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    for (var i=0; i<result.items.length; i++) {
        var item = result.items[i];
        item["anomaly_window"] = String(item["window_size"]/60) + "/" + String(item["anomaly_step_size"]/60);
    }
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getBaseConfigModules" args="" private="false">
        <CodeText>
          <![CDATA[return [
	{
		"value": "service",
		"label": "Service",
		"path": "/app/ax/user/viaops_admin/axv/VIAOps - Config - Service",
	},
	{
		"value": "parse",
		"label": "Parse",
		"path": "/app/ax/user/viaops_admin/axv/VIAOps - Config - Parse",
	},
	//{
	//	"value": "baseline",
	//	"label": "Baseline",
	//	"path": "/app/ax/user/viaops_admin/axv/VIAOps - Config - Baseline",
	//},
	//{
	//	"value": "anomaly",
	//	"label": "Anomaly",
	//	"path": "/app/ax/user/viaops_admin/axv/VIAOps - Config - Anomaly",
	//},
	{
		"value": "incident",
		"label": "Incident",
		"path": "/app/ax/user/viaops_admin/axv/VIAOps - Config - Incident",
	},
	{
		"value": "notification",
		"label": "Notification",
		"path": "/app/ax/user/viaops_admin/axv/VIAOps - Config - Notification",
	},
	{
		"value": "incident-group",
		"label": "Incident Group",
		"path": "/app/ax/user/viaops_admin/axv/VIAOps - Config - Incident Group",
	}
];
]]>
        </CodeText>
      </Service>
      <Service name="getBaseDimKeys" args="selection" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

selection.forEach(function(item) {
    var dim_values = (item["dim_values"]).split("|");
    var record = {
        svcName    : item["service"],
        compName   : item["sub_service"],
        appName    : dim_values.length > 0 ? dim_values[0] : "*",
        metricName : dim_values.length > 1 ? dim_values[1] : "*",
    };
    var queryParams = this._getQueryParams(queryConfig, record) || {};
    var dim_keys = [];
    dim_keys.push(queryParams["app-name"] || queryConfig["default-column-names"]["app-name"] || "app");
    dim_keys.push(queryParams["metric-name"] || queryConfig["default-column-names"]["metric-name"] || "metricname");
    item["dim_keys"] = dim_keys.join("|");
});
return selection;

]]>
        </CodeText>
      </Service>
      <Service name="getBaselineModel" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["baseline-model"];
var SELECT = Context.getLocalResource("BASELINE_MODEL_SELECT_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["BaselineModel", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    for (var i=0; i<result.items.length; i++) {
        var item = result.items[i];
        item["anomaly_window"] = String(item["window_size"]/60) + "/" + String(item["anomaly_step_size"]/60);
    }
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getConfigLabels" args="language" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var labels = null;
if (queryConfig["config-labels"] != null) {
    labels = queryConfig["config-labels"][language];
    if (labels == null) labels = queryConfig["config-labels"]["*"];
}
return labels;
]]>
        </CodeText>
      </Service>
      <Service name="getConfigModules" args="" private="false">
        <CodeText>
          <![CDATA[return this.getBaseConfigModules();
]]>
        </CodeText>
      </Service>
      <Service name="getCorrelationRules" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();

function addCorrelationRule(result, svc, comp)
{
    var record = {};
    record["service_name"] = this._getItemName(svc);
    record["service_label"] = svc.label || record["service_name"];
    record["sub_service_name"] = comp != null ? this._getItemName(comp) : "*";
    record["sub_service_label"] = comp != null ? (comp.label || record["sub_service_name"]) : "*";
    record["correlation_name"] = record["service_name"] + "|" + record["sub_service_name"];
    record["correlation_label"] = record["service_label"] + "|" + record["sub_service_label"];
    result.push(record);
}

var result = [];
serviceConfig.groups.forEach(function(svc) {
    if (svc.items != null) {
        addCorrelationRule(result, svc, null);
    }
    if (svc.groups != null) {
        svc.groups.forEach(function(comp) {
            if (comp.groups != null) {
                addCorrelationRule(result, svc, comp);
            }
        });
    }
});
return result;
]]>
        </CodeText>
      </Service>
      <Service name="getCorrelationTimes" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["incident-group"];
var SELECT = Context.getLocalResource("CORRELATION_TIMES_SELECT_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["CorrelationTimes", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentGroupContextualMetrics" args="group" private="false">
        <CodeText>
          <![CDATA[print("getIncidentGroupContextualMetrics: group="+__prettyPrintJSON(group));

var queryConfig = this.getQueryConfig();
var DATASOURCE = queryConfig["data-source"]["incident-group"];

var sql = Context.getLocalResource("INCIDENT_GROUP_CONTEXTUAL_SELECT_SQL");
var map = {
    "group_rule_name" : group.group_rule_name,
};
sql = this._doValueSubstitution(sql, map);

var result = this.executeSQLQuery(queryConfig, [], ["IncidentGroup", "ContextualMetric", "Select"], DATASOURCE, sql, null);
if (result != null && result.items != null) {
    result.items.forEach(function(item) {
        item.display_options = JSON.parse(item.display_options);
    });
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentGroupModel" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

function getCorrelationName(correlation)
{
    var buf = [];
    buf.push(correlation.service_name != null ? correlation.service_name : "*");
    buf.push(correlation.sub_service_name != null ? correlation.sub_service_name : "*");
    //buf.push(correlation.component_name != null ? correlation.component_name : "*");
    //buf.push(correlation.metric_name != null ? correlation.metric_name : "*");
    return buf.join("|");
}

function getCorrelationLabel(correlation)
{
    var buf = [];
    buf.push(correlation.service_name != null ? correlation.service_name : "*");
    buf.push(correlation.sub_service_name != null ? correlation.sub_service_name : "*");
    //buf.push(correlation.component_name != null ? correlation.component_name : "*");
    //buf.push(correlation.metric_name != null ? correlation.metric_name : "*");
    return buf.join("|");
}

var DATASOURCE = queryConfig["data-source"]["incident-group"];
var SELECT = Context.getLocalResource("INCIDENT_GROUP_SELECT_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["IncidentGroupModel", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    var groups = {};
    result.items.forEach(function(item) {
        var group = groups[item.group_rule_name];
        if (group == null) {
            group = {
                group_rule_name   : item.group_rule_name,
                max_lookback      : item.max_lookback,
                expire_after      : item.expire_after,
                correlation_rules : [],
            };
            groups[item.group_rule_name] = group;
        }
        var correlation = {
            group_rule_name  : item.group_rule_name,
            service_name     : item.service_name,
            sub_service_name : item.sub_service_name,
            component_name   : item.component_name,
            metric_name      : item.metric_name,
            group_start      : item.group_start,
            correlation_time : item.correlation_time,
        };
        correlation.__name__ = getCorrelationName(correlation);
        correlation.__label__ = getCorrelationLabel(correlation);
        if (correlation.group_start== "y") {
            group.__start_group_name__ = correlation.__name__;
            group.__start_group_label__ = correlation.__label__;
        }
        group.correlation_rules.push(correlation);
    });
    var list = [];
    for (var group_rule_name in groups) {
        var group = groups[group_rule_name];
        list.push(group);

        group.correlation_rules.sort(function(a,b) {
            return a.__label__.localeCompare(b.__label__);
        });
        var correlation_rules = [];
        group.correlation_rules.forEach(function(correlation) {
            correlation_rules.push(correlation.__label__);
        });
        group.__correlation_rules__ = correlation_rules.join(", ");
    }
    return list;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentModel" args="version" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

switch (version) {
    case "V1":
        return this._getIncidentModelV1(queryConfig);
    case "V2":
        return this._getIncidentModelV2(queryConfig);
}
]]>
        </CodeText>
      </Service>
      <Service name="getMetricIDs" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();

function isQuickAccess(obj)
{
    return obj["meta"] && obj["meta"]["quick-access"] == true;
}

function isSyntheticMetric(obj)
{
    return obj["meta"] && obj["meta"]["synthetic-metric"] == true;
}

function addMetricID(result, svc, comp, app, metric)
{
    if (!isQuickAccess(metric) && !isSyntheticMetric(metric)) {
        var record = {};
        record["service"] = this._getItemName(svc);
        record["sub_service"] = comp != null ? this._getItemName(comp) : "*";
        record["dim_values"] = (app != null ? this._getItemName(app) : "*") + "|" + this._getItemName(metric);
        record["metric_id"] = record["service"] + "|" + record["sub_service"] + "|" + record["dim_values"];
        result.push(record);
    }
}

var result = [];
serviceConfig.groups.forEach(function(svc) {
    if (svc.items != null) {
        svc.items.forEach(function(metric) {
            addMetricID(result, svc, null, null, metric);
        });
    }
    if (svc.groups != null) {
        svc.groups.forEach(function(comp) {
            if (comp.items != null) {
                comp.items.forEach(function(metric) {
                    addMetricID(result, svc, comp, null, metric);
                });
            }
            if (comp.groups != null) {
                comp.groups.forEach(function(app) {
                    if (app.items != null) {
                        app.items.forEach(function(metric) {
                            addMetricID(result, svc, comp, app, metric);
                        });
                    }
                });
            }
        });
    }
});
return result;
]]>
        </CodeText>
      </Service>
      <Service name="getModuleAccessControl" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var moduleAccessControl = {
    "service"        : true,
    "parse"          : true,
    "baseline"       : true,
    "anomaly"        : true,
    "incident"       : true,
    "notification"   : true,
    "incident-group" : true,
    "config-audit"   : true
};
var accessControlList = this.getAccessControlList();
if (accessControlList != null && queryConfig != null) {
    if (queryConfig["access-roles-by-module"] != null) {
        for (var moduleId in queryConfig["access-roles-by-module"]) {
            var roleTag = queryConfig["access-roles-by-module"][moduleId];
            moduleAccessControl[moduleId] = this._checkAccessList(accessControlList, null, roleTag);
        }
    }
}
return moduleAccessControl;
]]>
        </CodeText>
      </Service>
      <Service name="getNotificationActionList" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["notification-model"];
var SELECT = Context.getLocalResource("NOTIFICATION_ACTION_LIST_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["NotificationActionList", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getNotificationActionRuleParams" args="paramModel" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["notification-model"];
var SELECT = Context.getLocalResource("NOTIFICATION_ACTION_RULE_PARAM_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["NotificationActionRuleParams", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    paramModel.rules = {};
    result.items.forEach(function(item) {
        paramModel.rules[item.rule_id] = item.rule_desc;
    });
}
return paramModel;
]]>
        </CodeText>
      </Service>
      <Service name="getNotificationActionRuleValues" args="metricId,vitriaSev,actionIdList" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

if (typeof actionIdList == "string") {
    actionIdList = JSON.parse(actionIdList);
}
if (actionIdList.length == 0) return [];

var DATASOURCE = queryConfig["data-source"]["notification-model"];

var SELECT = Context.getLocalResource("NOTIFICATION_ACTION_RULE_SQL");
var map = {
    "action_id_list" : actionIdList.join(","),
};
SELECT = this._doValueSubstitution(SELECT, map);
var result = this.executeSQLQuery(queryConfig, [], ["NotificationActionRule", "Select"], DATASOURCE, SELECT, null);
var nonDefaultValues = false;
var defaultValues = result != null && result.items != null ? result.items : [];
if (defaultValues.length > 0) {
    var SELECT = Context.getLocalResource("NOTIFICATION_ACTION_RULE_VALUE_SQL");
    var map = {
        "metric_id"      : metricId,
        "vitria_sev"     : vitriaSev,
        "action_id_list" : actionIdList.join(","),
    };
    SELECT = this._doValueSubstitution(SELECT, map);
    var result = this.executeSQLQuery(queryConfig, [], ["NotificationActionRuleParam", "Select"], DATASOURCE, SELECT, null);
    if (result != null && result.items != null) {
        var customValues = {};
        result.items.forEach(function(item) {
            customValues[String(item["action_id"])+"|"+String(item["rule_id"])] = item;
        });
        for (var i=0, n=defaultValues.length; i<n; i++) {
            var defaultValue = defaultValues[i];
            var customValue = customValues[String(defaultValue["action_id"])+"|"+String(defaultValue["rule_id"])];
            if (customValue != null) {
                for (var key in customValue) {
                    var value = customValue[key];
                    if (value != null && value != "" && value != "null") {
                        defaultValue[key] = value;
                        nonDefaultValues = true;
                    }
                }
            }
        }
    }
}
return {
    nonDefaults : nonDefaultValues,
    values : defaultValues,
};


]]>
        </CodeText>
      </Service>
      <Service name="getNotificationConfig" args="metricIds" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var config = this.getNotificationConfigModel(metricIds);
//print("_getNotificationConfig: getNotificationConfigModel()="+__prettyPrintJSON(config));
var self = this;
var keyDims = [];
metricIds.forEach(function(metricId) {
    var dims = self._invokeKeyDimensionsService(queryConfig, metricId);
    //print("_getNotificationConfig: metricId="+metricId+" dims="+__prettyPrintJSON(dims));
    if (keyDims.length > 0) {
        dims.forEach(function(dim) {
            if (keyDims.indexOf(dim) == -1) {
                keyDims.push(dim);
            }
        });
    }
    else {
        keyDims = dims;
    }
});
config["key-dimensions"] = keyDims;
return config;
]]>
        </CodeText>
      </Service>
      <Service name="getNotificationMetric" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["notification-model"];
var SELECT = Context.getLocalResource("NOTIFICATION_METRIC_SELECT_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["NotificationMetric", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getNotificationSeverity" args="metricIdList" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

if (typeof metricIdList == "string") {
    metricIdList = JSON.parse(metricIdList);
}
if (metricIdList.length == 0) return [];

var DATASOURCE = queryConfig["data-source"]["notification-model"];
var SELECT = Context.getLocalResource("NOTIFICATION_SEVERITY_SELECT_SQL");
var map = {
    "metric_id_list" : "'"+metricIdList.join("','")+"'",
};
SELECT = this._doValueSubstitution(SELECT, map);
var result = this.executeSQLQuery(queryConfig, [], ["NotificationSeverity", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    result.items.forEach(function(item1) {
        var action_id_list = item1["action"];
        if (action_id_list != null && action_id_list != "") {
            action_id_list = action_id_list.split("|").join(",");
            SELECT = Context.getLocalResource("NOTIFICATION_ACTION_SELECT_SQL");
            var map = {
                "action_id_list" : action_id_list,
            };
            SELECT = this._doValueSubstitution(SELECT, map);
            var action = this.executeSQLQuery(queryConfig, [], ["NotificationAction", "Select"], DATASOURCE, SELECT, null);
            if (action != null && action.items != null) {
                item1["action_names"] = [];
                action.items.forEach(function(item2) {
                    (item1["action_names"]).push(item2["action_name"])
                });
                (item1["action_names"]).sort();
                item1["action_names"] = (item1["action_names"]).join(", ");
            }
            else {
                item1["action_names"] = "";
            }
        }
        else {
            item1["action_names"] = "";
        }
    });
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getParseModel" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();
var sourceConfig  = this.getSourceConfig();
var queryConfig   = this.getQueryConfig();

function addRecord(result, svc, comp, app, metric, mergedDimValues, metricDimValues)
{
    var record = {
        svcName    : this._getItemName(svc),
        compName   : comp != null ? this._getItemName(comp) : "*",
        appName    : app != null ? this._getItemName(app) : "*",
        metricName : this._getItemName(metric),
    };
    record["metricId"] = this._getMetricID(svc, comp, app, metric);
    // look for explicit app and metricname in metricDimValues
    // if NOT defined, then add appName and metricName to QDC
    var qdcAppName = false;
    var qdcMetricName = false;
    if (metricDimValues != null) {
        metricDimValues.forEach(function(dimValue) {
            if (dimValue.name == "app") {
                qdcAppName = true;
            }
            else if (dimValue.name == "metricname") {
                qdcMetricName = true;
            }
        });
    }
    var queryParams = this._getQueryParams(queryConfig, record) || {};
    if (!qdcAppName) {
        mergedDimValues.unshift({
            name  : queryParams["app-name"] || queryConfig["default-column-names"]["app-name"] || "app",
            value : record["appName"],
        });
    }
    if (!qdcMetricName) {
        mergedDimValues.unshift({
            name  : queryParams["metric-name"] || queryConfig["default-column-names"]["metric-name"] || "metricname",
            value : record["metricName"],
        });
    }
    record["sqlQDC"] = this._convertDimensionValuesToWhereClause(queryConfig, null, mergedDimValues, null);
    if (mergedDimValues.length > 1) {
        record["jsonQDC"] = [{
            "and" : mergedDimValues
        }];
    }
    else {
        record["jsonQDC"] = mergedDimValues;
    }
    result.push(record);
}

function hasName(list, name)
{
    return list.indexOf(name) != -1;
}

function getMetricMeta(sourceConfig, record)
{
    return this._findRule(record, function(key) {
        var appMeta = sourceConfig[key];
        if (appMeta != null && appMeta["metric-list"] != null) {
            var metricMeta = appMeta["metric-list"][record["metricName"]];
            if (metricMeta != null) {
                var sourceName = metricMeta["name"];
                if (Array.isArray(sourceName)) {
                    sourceName = sourceName.join(',');
                }
                metricMeta = Object.create(metricMeta);
                metricMeta.name = sourceName;
                return metricMeta;
            }
        }
        return null;
    });
}

function enrichSourceConfig(result)
{
    for (var i=0; i<result.length; i++) {
        var record = result[i];
        var metricMeta = getMetricMeta(sourceConfig, record);
        if (metricMeta != null) {
            record["parseSourceName"]   = metricMeta["name"];
            record["parseAggrFunc"]     = metricMeta["aggr"];
            record["parseSourceGroup"]  = metricMeta["source-group"] || this._getSourceGroup(sourceConfig, record);
            record["parseTargetApp"]    = record["appName"];
            record["parseTargetMetric"] = record["metricName"];
            record["parseTargetGroup"]  = metricMeta["target-group"] || this._getTargetGroup(sourceConfig, record);
        }
    }
    return result;
}

function isQuickAccess(obj)
{
    return obj["meta"] && obj["meta"]["quick-access"] == true;
}

function isSyntheticMetric(obj)
{
    return obj["meta"] && obj["meta"]["synthetic-metric"] == true;
}

function postProcessResult(result)
{
    result = enrichSourceConfig(result);
    var uniqs = {};
    for (var i=0; i<result.length; i++) {
        var record = result[i];
        // mark dups
        var key = (record["parseSourceGroup"] || "") + "|" + record["sqlQDC"];
        if (uniqs[key] == null) {
            uniqs[key] = record;
        }
        else {
            uniqs[key]["_dup_"] = "true";
            record["_dup_"] = "true";
        }
        // strip svcName, compName, appName and metricName
        delete record["svcName"];
        delete record["compName"];
        delete record["appName"];
        delete record["metricName"];
    }
    return result;
}

var result = [];
serviceConfig.groups.forEach(function(svc) {
    var svcDimVals = this._getDimValues("svc", svc);
    if (svc.items != null) {
        svc.items.forEach(function(metric) {
            if (!isQuickAccess(metric) && !isSyntheticMetric(metric)) {
                var metricDimVals = this._getDimValues("metric", metric);
                var dimVals = this._mergeDimValues(svcDimVals, null, null, metricDimVals);
                addRecord(result, svc, null, null, metric, dimVals, metricDimVals);
            }
        });
    }
    if (svc.groups != null) {
        svc.groups.forEach(function(comp) {
            var compDimVals = this._getDimValues("comp", comp);
            if (comp.items != null) {
                comp.items.forEach(function(metric) {
                    if (!isQuickAccess(metric) && !isSyntheticMetric(metric)) {
                        var metricDimVals = this._getDimValues("metric", metric);
                        var dimVals = this._mergeDimValues(svcDimVals, compDimVals, null, metricDimVals);
                        addRecord(result, svc, comp, null, metric, dimVals, metricDimVals);
                    }
                });
            }
            if (comp.groups != null) {
                comp.groups.forEach(function(app) {
                    var appDimVals = this._getDimValues("app", app);
                    if (app.items != null) {
                        app.items.forEach(function(metric) {
                            if (!isQuickAccess(metric) && !isSyntheticMetric(metric)) {
                                var metricDimVals = this._getDimValues("metric", metric);
                                var dimVals = this._mergeDimValues(svcDimVals, compDimVals, appDimVals, metricDimVals);
                                addRecord(result, svc, comp, app, metric, dimVals, metricDimVals);
                            }
                        });
                    }
                });
            }
        });
    }
});
result = postProcessResult(result);
return result;
]]>
        </CodeText>
      </Service>
      <Service name="getServiceConfigAsRecords" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();

function isQuickAccess(obj)
{
    return obj["meta"] != null && obj["meta"]["quick-access"] == true;
}

function isSyntheticMetric(obj)
{
    return obj["meta"] != null && obj["meta"]["synthetic-metric"] == true;
}

function getDimValues(context, obj)
{
    var dimVals = obj["meta"] && obj["meta"]["dimension-values"];
    if (dimVals != null) {
        dimVals.forEach(function(dimVal) {
            dimVal["context"] = context;
        });
    }
    return dimVals;
}

function mergeDimValues(svcDimVals, compDimVals, appDimVals, metricDimVals)
{
    var dimVals = [];
    if (svcDimVals != null) {
        dimVals = dimVals.concat(svcDimVals);
    }
    if (compDimVals != null) {
        dimVals = dimVals.concat(compDimVals);
    }
    if (appDimVals != null) {
        dimVals = dimVals.concat(appDimVals);
    }
    if (metricDimVals != null) {
        dimVals = dimVals.concat(metricDimVals);
    }
    return dimVals;
}

function addRecord(result, svc, comp, app, metric, dimensionValues)
{
    result.push({
        svcName       : this._getItemName(svc),
        svcLabel      : svc.label,
        compName      : comp != null ? this._getItemName(comp) : "*",
        compLabel     : comp != null ? comp.label : "*",
        appName       : app != null ? this._getItemName(app) : "*",
        appLabel      : app != null ? app.label : "*",
        metricName    : this._getItemName(metric),
        metricUoM     : metric.uom,
        metricAggr    : metric.aggr,
        isQuickAccess : isQuickAccess(metric),
        isSynthetic   : isSyntheticMetric(metric),
        
        dimValuesJSON : JSON.stringify(dimensionValues),
        dimValuesSQL  : this._convertDimensionValuesToWhereClause(null, null, dimensionValues, null),
    });
}

var result = [];
serviceConfig.groups.forEach(function(svc) {
    var svcDimVals = getDimValues("svc", svc);
    if (svc.items != null) {
        svc.items.forEach(function(metric) {
            var metricDimVals = getDimValues("metric", metric);
            var dimVals = mergeDimValues(svcDimVals, null, null, metricDimVals);
            addRecord(result, svc, null, null, metric, dimVals);
        });
    }
    if (svc.groups != null) {
        svc.groups.forEach(function(comp) {
            var compDimVals = getDimValues("comp", comp);
            if (comp.items != null) {
                comp.items.forEach(function(metric) {
                    var metricDimVals = getDimValues("metric", metric);
                    var dimVals = mergeDimValues(svcDimVals, compDimVals, null, metricDimVals);
                    addRecord(result, svc, comp, null, metric, dimVals);
                });
            }
            if (comp.groups != null) {
                comp.groups.forEach(function(app) {
                    var appDimVals = getDimValues("app", app);
                    if (app.items != null) {
                        app.items.forEach(function(metric) {
                            var metricDimVals = getDimValues("metric", metric);
                            var dimVals = mergeDimValues(svcDimVals, compDimVals, appDimVals, metricDimVals);
                            addRecord(result, svc, comp, app, metric, dimVals);
                        });
                    }
                });
            }
        });
    }
});
return result;
]]>
        </CodeText>
      </Service>
      <Service name="loadNotificationActionRuleFromJSON" args="model" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

// _loadNotificationActionRuleFromJSON
var DATASOURCE = queryConfig["data-source"]["notification-model"];
var ACTION_TABLE = "action_dim_ek";
var RULE_TABLE = "rule_dim_ek";

function loadNotificationActionFromJSON(actions)
{
    var DELETE = "DELETE FROM " + ACTION_TABLE;
    this.executeSQLUpdate(queryConfig, [], ["NotificationActionTableFromJSON", "Delete"], DATASOURCE, DELETE, null);
    
    var ATTR_LIST = ["action_id","action_category","action_name","effective_sev","target_type","target_addr1","target_addr2","target_attr1","target_attr2","target_attr3","target_attr4","act_on_test","include_screenshot"];
    var INSERT = "INSERT INTO " + ACTION_TABLE + " (" + ATTR_LIST.join(",") + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
    var args = [];
    actions.forEach(function(action) {
        var arg = [];
        ATTR_LIST.forEach(function(attr) {
            arg.push(action[attr]);
        });
        args.push(arg);
    });
    return this.executeSQLUpdate(queryConfig, [], ["NotificationActionTableFromJSON", "Insert"], DATASOURCE, INSERT, args);
}

function loadNotificationRuleFromJSON(rules)
{
    var DELETE = "DELETE FROM " + RULE_TABLE;
    this.executeSQLUpdate(queryConfig, [], ["NotificationRuleTableFromJSON", "Delete"], DATASOURCE, DELETE, null);
    
    var ATTR_LIST = ["rule_id","action_id","rule_desc","measured_attr","value1","value2","value3","value4","value5","qualif_attr","qualif_value"];
    var INSERT = "INSERT INTO " + RULE_TABLE + " (" + ATTR_LIST.join(",") + ") VALUES (?,?,?,?,?,?,?,?,?,?,?)";
    var args = [];
    rules.forEach(function(rule) {
        var arg = [];
        ATTR_LIST.forEach(function(attr) {
            arg.push(rule[attr]);
        });
        args.push(arg);
    });
    return this.executeSQLUpdate(queryConfig, [], ["NotificationRuleTableFromJSON", "Insert"], DATASOURCE, INSERT, args);
}

if (model.actions != null && model.rules != null) {
    loadNotificationActionFromJSON(model.actions);
    loadNotificationRuleFromJSON(model.rules)
    return true;
}
return false;

]]>
        </CodeText>
      </Service>
      <Service name="resetNotificationActionRuleValues" args="metricId,vitriaSev" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["notification-model"];

var DELETE = "DELETE FROM action_params WHERE metric_id='" + metricId + "' AND vitria_sev='" + vitriaSev + "'";
this.executeSQLUpdate(queryConfig, [], ["NotificationActionRuleValues", "Delete", "Action"], DATASOURCE, DELETE, null);

var DELETE = "DELETE FROM rule_params WHERE metric_id='" + metricId + "' AND vitria_sev='" + vitriaSev + "'";
this.executeSQLUpdate(queryConfig, [], ["NotificationActionRuleValues", "Delete", "Rule"], DATASOURCE, DELETE, null);

return true;

]]>
        </CodeText>
      </Service>
      <Service name="setCorrelationTime" args="record" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_setCorrelationTime: record="+__prettyPrintJSON(record));
if (record["correlation_time"] == "") {
    record["correlation_time"] = "NULL";
}
var DATASOURCE = queryConfig["data-source"]["incident-group"];
var UPDATE = Context.getLocalResource("CORRELATION_TIME_UPDATE_SQL");
var sql = this._doValueSubstitution(UPDATE, record);
this.executeSQLUpdate(queryConfig, [record["service"], record["sub_service"]], ["CorrelationTime", "Update"], DATASOURCE, sql, null);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="updateAnomalyModel" args="selected" private="false">
        <CodeText>
          <![CDATA[var anomalyConfig = this.getAnomalyConfig();
var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["anomaly-model"];

selected["adm_name"] = this._getAdmName(anomalyConfig, queryConfig, selected);

var sql = Context.getLocalResource("ANOMALY_MODEL_UPDATE_SQL");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["AnomalyModel", "Update"], DATASOURCE, sql, null);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="updateBaselineModel" args="selected" private="false">
        <CodeText>
          <![CDATA[var anomalyConfig = this.getAnomalyConfig();
var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["baseline-model"];

selected["adm_name"] = this._getAdmName(anomalyConfig, queryConfig, selected);

var sql = Context.getLocalResource("BASELINE_MODEL_UPDATE_SQL");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [selected["service"], selected["sub_service"]], ["BaselineModel", "Update"], DATASOURCE, sql, null);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="updateIncidentGroupContextualMetrics" args="group,selection" private="false">
        <CodeText>
          <![CDATA[//print("updateIncidentGroupContextualMetrics: group="+__prettyPrintJSON(group));
//print("updateIncidentGroupContextualMetrics: selection="+__prettyPrintJSON(selection));

var queryConfig = this.getQueryConfig();
var DATASOURCE = queryConfig["data-source"]["incident-group"];


var sql = Context.getLocalResource("INCIDENT_GROUP_CONTEXTUAL_UPDATE_SQL");
var args = [];
var audit = [];

for (var i=0; i<selection.length; i++) {
    var display_options = selection[i]["display_options"];
    if (typeof display_options != "string") {
        display_options = JSON.stringify(display_options);
    }
    args.push([display_options, group.group_rule_name, selection[i]["metric_id"]]);
    audit.push([group.group_rule_name, selection[i]["metric_id"], display_options]);
}

if (args.length > 0) {
    this.executeSQLUpdate(queryConfig, [], ["IncidentGroup", "ContextualMetric", "Update"], DATASOURCE, sql, args);
    this.incidentGroupContextualAudit(audit, "modify");
}
]]>
        </CodeText>
      </Service>
      <Service name="updateIncidentGroupModel" args="selected" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_addIncidentGroupModel: selected="+__prettyPrintJSON(selected));
var DATASOURCE = queryConfig["data-source"]["incident-group"];

if (isNaN(selected["max_lookback"])) {
    selected["max_lookback"] = "NULL";
}
if (isNaN(selected["expire_after"])) {
    selected["expire_after"] = "NULL";
}

var sql = Context.getLocalResource("INCIDENT_GROUP_UPDATE_SQL");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentGroup", "Update"], DATASOURCE, sql, null);
this.incidentGroupAudit([[selected["group_rule_name"], selected["max_lookback"], selected["expire_after"]]], "mofidy");


var correlationAuditUpdate = [];
if (selected["correlation_changed"] == true) {
    // if changed, we simply delete all existing group correlation and re-create
    
    var sql = Context.getLocalResource("INCIDENT_GROUP_CORRELATION_DELETE_SQL");
    sql = this._doValueSubstitution(sql, selected);
    this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentGroup", "Update", "Delete", "Correlation"], DATASOURCE, sql, null);

    var correlation_template = Context.getLocalResource("INCIDENT_GROUP_CORRELATION_INSERT_SQL");
    var correlation_rules = selected["correlation_rules"];
    for (var i=0; i<correlation_rules.length; i++) {
        var correlation_rule = correlation_rules[i];
        var toks = correlation_rule.split("|");
        var map = {
            group_rule_name  : selected["group_rule_name"],
            service_name     : toks[0],
            sub_service_name : toks[1],
            group_start      : correlation_rule == selected["start_group"] ? "y" : "n",
        };
        var sql = this._doValueSubstitution(correlation_template, map);
        this.executeSQLUpdate(queryConfig, [selected["group_rule_name"], correlation_rule], ["IncidentGroupCorrelation", "Add", "Insert", "Correlation"], DATASOURCE, sql, null);
        correlationAuditUpdate.push([map.group_rule_name, map.service_name, map.sub_service_name, map.group_start]);
        if (!this._hasCorrelationRule(queryConfig, map)) {
            var sql = Context.getLocalResource("CORRELATION_TIME_INSERT_SQL");
            sql = this._doValueSubstitution(sql, {
                service_name     : toks[0],
                sub_service_name : toks[1],
            });
            this.executeSQLUpdate(queryConfig, [selected["group_rule_name"]], ["IncidentCorrelation", "Update", "Insert"], DATASOURCE, sql, null);
        }
    };
    this.incidentGroupCorrelationAudit(correlationAuditUpdate, "modify");
}

return true;
]]>
        </CodeText>
      </Service>
      <Service name="updateIncidentModel" args="selected,version" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

switch (version) {
    case "V1":
        return this._updateIncidentModelV1(queryConfig, selected);
    case "V2":
        return this._updateIncidentModelV2(queryConfig, selected);
}
]]>
        </CodeText>
      </Service>
      <Service name="updateMetricInfoTable" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();
var queryConfig = this.getQueryConfig();

function isQuickAccess(obj) {
    return obj["meta"] && obj["meta"]["quick-access"] == true;
}

function isSyntheticMetric(obj) {
    return obj["meta"] && obj["meta"]["synthetic-metric"] == true;
}

function isChanged(existing, metric) {
    if (existing.service_label != metric.service_label) return true;
    if (existing.sub_service_label != metric.sub_service_label) return true;
    if (existing.app_label != metric.app_label) return true;
    if (existing.metric_label != metric.metric_label) return true
    return false;
}

var DS = queryConfig["data-source"]["metric-info"];
var TABLE = "viaops_metric_info";

var METRIC_SELECT = "SELECT * FROM " + TABLE;
var SERVICE_SELECT = "SELECT "

var UPDATE_METRIC = "UPDATE " + TABLE + " " +
    "SET service_label=?, sub_service_label=?, app_label=?, metric_label=?, modified_ts=current_timestamp() " +
    "WHERE metric_id=?";
var INSERT_METRIC = "INSERT INTO " + TABLE + " ( " +
    "metric_id, base_metric_id, " +
    "service_name, service_label, sub_service_name, sub_service_label, " +
    "app_name, app_label, metric_name, metric_label, " +
    "dim_keys, dim_values " +
    ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

var metricUpdates = [];
var metricInserts = [];
var metricAudit = [];
var metricAuditMap = {};

var metricMap = {};
var svcMap = {};
var compMap = {};

var result = this.executeSQLQuery(queryConfig, ["UpdateMetricInfoTable"], ["MetricInfo", "Select"], DS, METRIC_SELECT, null);
if (result != null && result.items != null) {
    result.items.forEach(function(item) {
        metricMap[item.metric_id] = item;
    });
}

var self = this;
serviceConfig.groups.forEach(function(svc) {
    var svcName = self._getItemName(svc);
    var svcLabel = svc.label || svcName;
    if (svc.items != null) {
        svc.items.forEach(function(metric) {
            if (isQuickAccess(metric) || isSyntheticMetric(metric)) return;
            var compName = "*";
            var compLabel = "*";
            var appName = "*";
            var appLabel = "*";
            var metricName = self._getItemName(metric);
            var metricLabel = metric.label || metricName;
            var metricId = self._createMetricID(svcName, compName, appName, metricName, null, null);
            if (metricMap[metricId] != null) {
                if (isChanged(metricMap[metricId], {
                        service_label: svcLabel,
                        sub_service_label: compLabel,
                        app_label: appLabel,
                        metric_label: metricLabel
                    })) {
                    metricUpdates.push([svcLabel, compLabel, appLabel, metricLabel, metricId]);
                    
                    var existing = metricMap[metricId];
                    var svcLabelAudit = existing.service_label == svcLabel ? null : svcLabel;
                    var compLabelAudit = existing.sub_service_label == compLabel ? null : compLabel;
                    var appLabelAudit = existing.app_label == appLabel ? null : appLabel;
                    var metricLabelAudit = existing.metric_label == metricLabel ? null : metricLabel;
                    var metricAuditValue = ["modify", null, null, null, svcLabelAudit, null, compLabelAudit, null, appLabelAudit, null, metricLabelAudit, null, null];
                    if (!metricAuditMap[metricAuditValue.join("-")]) {
                        metricAudit.push(metricAuditValue);
                        metricAuditMap[metricAuditValue.join("-")] = true;
                    }
                }
            } else {
                // add base metric
                metricInserts.push([metricId, metricId, svcName, svcLabel, compName, compLabel, appName, appLabel, metricName, metricLabel, "[]", "[]"]);
                metricAudit.push(["add", metricId, metricId, svcName, svcLabel, compName, compLabel, appName, appLabel, metricName, metricLabel, "[]", "[]"]);
            }
        });
    }
    if (svc.groups != null) {
        svc.groups.forEach(function(comp) {
            var compName = this._getItemName(comp);
            var compLabel = comp.label || compName;
            if (comp.items != null) {
                comp.items.forEach(function(metric) {
                    if (isQuickAccess(metric) || isSyntheticMetric(metric)) return;
                    var appName = "*";
                    var appLabel = "*";
                    var metricName = self._getItemName(metric);
                    var metricLabel = metric.label || metricName;
                    var metricId = self._createMetricID(svcName, compName, appName, metricName, null, null);
                    if (metricMap[metricId] != null) {
                        if (isChanged(metricMap[metricId], {
                                service_label: svcLabel,
                                sub_service_label: compLabel,
                                app_label: appLabel,
                                metric_label: metricLabel
                            })) {
                            metricUpdates.push([svcLabel, compLabel, appLabel, metricLabel, metricId]);
                            
                            var existing = metricMap[metricId];
                            var svcLabelAudit = existing.service_label == svcLabel ? null : svcLabel;
                            var compLabelAudit = existing.sub_service_label == compLabel ? null : compLabel;
                            var appLabelAudit = existing.app_label == appLabel ? null : appLabel;
                            var metricLabelAudit = existing.metric_label == metricLabel ? null : metricLabel;
                            var metricAuditValue = ["modify", null, null, null, svcLabelAudit, null, compLabelAudit, null, appLabelAudit, null, metricLabelAudit, null, null];
                            if (!metricAuditMap[metricAuditValue.join("-")]) {
                                metricAudit.push(metricAuditValue);
                                metricAuditMap[metricAuditValue.join("-")] = true;
                            }
                        }
                    } else {
                        // add base metric
                        metricInserts.push([metricId, metricId, svcName, svcLabel, compName, compLabel, appName, appLabel, metricName, metricLabel, "[]", "[]"]);
                        metricAudit.push(["add", metricId, metricId, svcName, svcLabel, compName, compLabel, appName, appLabel, metricName, metricLabel, "[]", "[]"]);
                    }
                });
            }
            if (comp.groups != null) {
                comp.groups.forEach(function(app) {
                    var appName = this._getItemName(app);
                    var appLabel = app.label || appName;
                    if (app.items != null) {
                        app.items.forEach(function(metric) {
                            if (isQuickAccess(metric) || isSyntheticMetric(metric)) return;
                            var metricName = self._getItemName(metric);
                            var metricLabel = metric.label || metricName;
                            var metricId = self._createMetricID(svcName, compName, appName, metricName, null, null);
                            if (metricMap[metricId] != null) {
                                if (isChanged(metricMap[metricId], {
                                        service_label: svcLabel,
                                        sub_service_label: compLabel,
                                        app_label: appLabel,
                                        metric_label: metricLabel
                                    })) {
                                    metricUpdates.push([svcLabel, compLabel, appLabel, metricLabel, metricId]);
                                    
                                    var existing = metricMap[metricId];
                                    var svcLabelAudit = existing.service_label == svcLabel ? null : svcLabel;
                                    var compLabelAudit = existing.sub_service_label == compLabel ? null : compLabel;
                                    var appLabelAudit = existing.app_label == appLabel ? null : appLabel;
                                    var metricLabelAudit = existing.metric_label == metricLabel ? null : metricLabel;
                                    var metricAuditValue = ["modify", null, null, null, svcLabelAudit, null, compLabelAudit, null, appLabelAudit, null, metricLabelAudit, null, null];
                                    if (!metricAuditMap[metricAuditValue.join("-")]) {
                                        metricAudit.push(metricAuditValue);
                                        metricAuditMap[metricAuditValue.join("-")] = true;
                                    }
                                }
                            } else {
                                // add base metric
                                metricInserts.push([metricId, metricId, svcName, svcLabel, compName, compLabel, appName, appLabel, metricName, metricLabel, "[]", "[]"]);
                                metricAudit.push(["add", metricId, metricId, svcName, svcLabel, compName, compLabel, appName, appLabel, metricName, metricLabel, "[]", "[]"]);
                            }
                        });
                    }
                });
            }
        });
    }
});

if (metricUpdates.length > 0) {
    print("_updateMetricInfoTable: metricUpdates=" + metricUpdates.length);
    //print("_updateMetricInfoTable: metricUpdates="+__prettyPrintJSON(metricUpdates));
    SQL.executeUpdate(DS, UPDATE_METRIC, metricUpdates);
}
if (metricInserts.length > 0) {
    print("_updateMetricInfoTable: metricInserts=" + metricInserts.length);
    //print("_updateMetricInfoTable: metricInserts="+__prettyPrintJSON(metricInserts));
    SQL.executeUpdate(DS, INSERT_METRIC, metricInserts);
}

if (metricAudit.length > 0) {
    this.metricInfoAudit(metricAudit);
}
]]>
        </CodeText>
      </Service>
      <Service name="updateMetricQdcConflicts" args="items" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();
var sourceConfig  = this.getSourceConfig();
var queryConfig   = this.getQueryConfig();

var QDC_DS = queryConfig["data-source"]["metric-qdc"];
var QDC_TABLE = "viaops_qdc_table";

var INFO_DS = queryConfig["data-source"]["metric-info"];
var INFO_TABLE = "viaops_metric_info";
var INFO_SELECT = "SELECT * FROM " + INFO_TABLE + " WHERE dim_keys = '[]'";

var baseMetricInfoMap = {};
var result = this.executeSQLQuery(queryConfig, [], ["MetricInfo", "Select"], INFO_DS, INFO_SELECT, null);
if (result != null && result.items != null) {
    result.items.forEach(function(item) {
        baseMetricInfoMap[item.metric_id] = item;
    });
}

var DELETE_QDC = [];
var INSERT_INFO = [];

items.forEach(function(item) {
    switch (item.action) {
        case "Delete":
            DELETE_QDC.push([item.metric_id]);
            break;
        case "Update":
            var toks = item.metric_id.split("|");
            if (toks.length >= 4) {
                var base_metric_id = toks.slice(0,4).join("|");
                var baseMetricInfo = baseMetricInfoMap[base_metric_id];
                if (baseMetricInfo != null) {
                    var dim_keys = JSON.parse(item.dim_keys || "[]");
                    var dim_values = toks.slice(4);
                    if (dim_keys.length > 0 && dim_keys.length == dim_values.length) {
                        INSERT_INFO.push([item.metric_id, base_metric_id,
                                          baseMetricInfo.service_name, baseMetricInfo.service_label,
                                          baseMetricInfo.sub_service_name, baseMetricInfo.sub_service_label,
                                          baseMetricInfo.app_name, baseMetricInfo.app_label,
                                          baseMetricInfo.metric_name, baseMetricInfo.metric_label,
                                          JSON.stringify(dim_keys), JSON.stringify(dim_values)]);
                    }
                }
            }
            break;
    }
});

var DOIT = true;

print("_updateMetricQdcConflicts: DELETE_QDC="+__prettyPrintJSON(DELETE_QDC));
if (DOIT && DELETE_QDC.length > 0) {
    var sql = "DELETE FROM " + QDC_TABLE + " WHERE metric_id=?";
    SQL.executeUpdate(QDC_DS, sql, DELETE_QDC);
}

print("_updateMetricQdcConflicts: INSERT_INFO="+__prettyPrintJSON(INSERT_INFO));
if (DOIT && INSERT_INFO.length > 0) {
    var sql = "INSERT INTO " + INFO_TABLE + " ( "
            + "metric_id, base_metric_id, "
            + "service_name, service_label, "
            + "sub_service_name, sub_service_label, "
            + "app_name, app_label, "
            + "metric_name, metric_label, "
            + "dim_keys, dim_values "
            + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    SQL.executeUpdate(INFO_DS, sql, INSERT_INFO);
}
]]>
        </CodeText>
      </Service>
      <Service name="updateMetricQdcTable" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();
var sourceConfig  = this.getSourceConfig();
var queryConfig   = this.getQueryConfig();

// 1. construct QDC map for base metrics
// 2. get list of metric_id, dim_keys, dim_values from viaops_metric_info
// 3. for each item in #2, construct effective QDC
// 4. find entry in viaops_qdc_table
//    if NOT FOUND... error
//    else update effective QDC in table

var INFO_DS = queryConfig["data-source"]["metric-info"];
var INFO_TABLE = "viaops_metric_info";
var INFO_SELECT = "SELECT "
                + "metric_id, base_metric_id, dim_keys, dim_values "
                + "FROM " + INFO_TABLE;

var QDC_DS = queryConfig["data-source"]["metric-qdc"];
var QDC_TABLE = "viaops_qdc_table";
var QDC_SELECT = "SELECT "
               + "metric_id, sql_qdc, json_qdc, aggr_func, parse_target_group "
               + "FROM " + QDC_TABLE;

var metricIdMap = {};
this.getMetricIDs(serviceConfig).forEach(function(record) {
    metricIdMap[record["metric_id"]] = true;
});
//print("_updateMetricQdcTable: metricIdMap="+__prettyPrintJSON(metricIdMap));

var qdcMap = this._getQDCMap(serviceConfig, sourceConfig, queryConfig);
//print("_updateMetricQdcTable: qdcMap="+__prettyPrintJSON(qdcMap));

var metricList = [];
var result = this.executeSQLQuery(queryConfig, [], ["MetricInfo", "Select"], INFO_DS, INFO_SELECT, null);
if (result != null && result.items != null) {
    metricList = result.items;
}
//print("_updateMetricQdcTable: metricList="+__prettyPrintJSON(metricList));

var metricQDCMap = {};
var result = this.executeSQLQuery(queryConfig, [], ["MetricQDC", "Select"], QDC_DS, QDC_SELECT, null);
if (result != null && result.items != null) {
    result.items.forEach(function(item) {
        metricQDCMap[item.metric_id] = item;
    });
}
//print("_updateMetricQdcTable: metricQDCMap="+__prettyPrintJSON(metricQDCMap));

var IN_METRIC_INFO_NOT_IN_SERVICE_CONFIG = [];
var IN_METRIC_INFO_NOT_IN_METRIC_QDC     = [];
var IN_METRIC_QDC_BUT_CHANGED            = [];
var IN_METRIC_QDC_BUT_CHANGED_LIST       = [];
var IN_METRIC_QDC_NOT_IN_METRIC_INFO     = [];
var IN_METRIC_QDC_NOT_IN_SERVICE_CONFIG  = [];
var QDC_INFO_SERVICE_CONFIG_IN_SYNC      = [];
var qdcAuditValue = [];

metricList.forEach(function(metric) {
    var qdc = qdcMap[metric["base_metric_id"]];
    if (qdc != null) {
        var jsonQDC = qdc.jsonQDC.slice(0);
        var dim_keys = JSON.parse(metric["dim_keys"] || "[]");
        var dim_values = JSON.parse(metric["dim_values"] || "[]");
        if (dim_keys.length > 0 && dim_keys.length == dim_values.length) {
            for (var i=0; i<dim_keys.length; i++) {
                if (dim_values[i] == "${"+dim_keys[i]+"}") {
                    // wildcard
                    jsonQDC.push({
                        name  : dim_keys[i],
                        not   : true,
                        value : null,
                    });
                    jsonQDC.push({
                        name  : dim_keys[i],
                        not   : true,
                        value : "",
                    });
                }
                else {
                    jsonQDC.push({
                        name  : dim_keys[i],
                        value : dim_values[i],
                    });
                }
            }
        }
        var sqlQDC = this._convertDimensionValuesToWhereClause(queryConfig, null, jsonQDC, null);
        if (jsonQDC.length > 1) {
            jsonQDC = JSON.stringify([{
                "and" : jsonQDC
            }]);
        }
        else {
            jsonQDC = JSON.stringify(jsonQDC);
        }
        var metricQDC = metricQDCMap[metric["metric_id"]];
        if (metricQDC != null) {
            // defined in QDC table... now to check if changed
            var sql_qdc_changed = sqlQDC != metricQDC["sql_qdc"];
            var json_qdc_changed = jsonQDC != metricQDC["json_qdc"];
            var aggr_func_changed = qdc.aggrFunc != metricQDC["aggr_func"];
            var parse_target_group_changed = qdc.parseTargetGroup != metricQDC["parse_target_group"];
            if (sql_qdc_changed || json_qdc_changed || aggr_func_changed || parse_target_group_changed) {
                IN_METRIC_QDC_BUT_CHANGED.push([sqlQDC, jsonQDC, qdc.aggrFunc, qdc.parseTargetGroup, metric["metric_id"]]);
                var changed_item = ['modify', metric["metric_id"]];
                if (sql_qdc_changed) {
                    changed_item.push(sqlQDC);
                } else {
                    changed_item.push(null);
                }
                if (json_qdc_changed) {
                    changed_item.push(jsonQDC);
                } else {
                    changed_item.push(null);
                }
                if (aggr_func_changed) {
                    changed_item.push(qdc.aggrFunc);
                } else {
                    changed_item.push(null);
                }
                if (parse_target_group_changed) {
                    changed_item.push(qdc.parseTargetGroup);
                } else {
                    changed_item.push(null);
                }
                qdcAuditValue.push(changed_item);
                metricQDC._status_ = "changed";
                //if (sql_qdc_changed) {
                //    print("sqlQDC="+sqlQDC);
                //    print("metricQDC[sql_qdc]="+metricQDC["sql_qdc"]);
                //}
            }
            else {
                // same... no need to update
                metricQDC._status_ = "same";
                QDC_INFO_SERVICE_CONFIG_IN_SYNC.push(metric["metric_id"]);
            }
        }
        else {
            // not defined in QDC table... INSERT
            IN_METRIC_INFO_NOT_IN_METRIC_QDC.push([metric["metric_id"], sqlQDC, jsonQDC, qdc.aggrFunc, qdc.parseTargetGroup]);
            qdcAuditValue.push(["add", metric["metric_id"], sqlQDC, jsonQDC, qdc.aggrFunc, qdc.parseTargetGroup]);
        }
    }
    else {
        if (metricIdMap[metric["base_metric_id"]] == null) {
            IN_METRIC_INFO_NOT_IN_SERVICE_CONFIG.push(metric["metric_id"]);
            qdcAuditValue.push(["delete", metric["metric_id"], null, null, null, null]);
        }
    }
});

for (var metricId in metricQDCMap) {
    var metricQDC = metricQDCMap[metricId];
    if (metricQDC._status_ == null) {
        var toks = metricId.split("|");
        var base_metric_id = toks.slice(0, 4).join("|");
        var qdc = qdcMap[base_metric_id];
        if (qdc != null) {
            IN_METRIC_QDC_NOT_IN_METRIC_INFO.push(metricId);
        }
        else {
            IN_METRIC_QDC_NOT_IN_SERVICE_CONFIG.push(metricId);
        }
    }
}


var DOIT = true;

print("");
print("IN_METRIC_INFO_NOT_IN_SERVICE_CONFIG="+IN_METRIC_INFO_NOT_IN_SERVICE_CONFIG.length);
print("=> obsolete entries in viaops_metric_info");
print("=> TO BE DELETED");
//print(__prettyPrintJSON(IN_METRIC_INFO_NOT_IN_SERVICE_CONFIG));
if (DOIT && IN_METRIC_INFO_NOT_IN_SERVICE_CONFIG.length > 0) {
    var sql = "DELETE FROM " + INFO_TABLE + " WHERE metric_id=?";
    var args = [];
    IN_METRIC_INFO_NOT_IN_SERVICE_CONFIG.forEach(function(metricId) {
        args.push([metricId]);
    });
    SQL.executeUpdate(INFO_DS, sql, args);
}


print("");
print("IN_METRIC_QDC_NOT_IN_SERVICE_CONFIG="+IN_METRIC_QDC_NOT_IN_SERVICE_CONFIG.length);
print("=> obsolete entries in viaops_qdc_table");
print("=> TO BE DELETED");
//print(__prettyPrintJSON(IN_METRIC_QDC_NOT_IN_SERVICE_CONFIG));
if (DOIT && IN_METRIC_QDC_NOT_IN_SERVICE_CONFIG.length > 0) {
    var sql = "DELETE FROM " + QDC_TABLE + " WHERE metric_id=?";
    var args = [];
    IN_METRIC_QDC_NOT_IN_SERVICE_CONFIG.forEach(function(metricId) {
        args.push([metricId]);
    });
    SQL.executeUpdate(QDC_DS, sql, args);
}


print("");
print("IN_METRIC_QDC_NOT_IN_METRIC_INFO="+IN_METRIC_QDC_NOT_IN_METRIC_INFO.length);
print("=> assume these were manually added to viaops_qdc_table");
print("=> if valid, we need to create corresponding entries in viaops_metric_info");
print("=> there is NOT enough detail in viaops_qdc_table to auto-create in viaops_metric_info");
//print(__prettyPrintJSON(IN_METRIC_QDC_NOT_IN_METRIC_INFO));


print("");
print("IN_METRIC_INFO_NOT_IN_METRIC_QDC="+IN_METRIC_INFO_NOT_IN_METRIC_QDC.length);
print("=> this we can handle");
print("=> create new entries in viaops_qdc_table");
//print(__prettyPrintJSON(IN_METRIC_INFO_NOT_IN_METRIC_QDC));
if (DOIT && IN_METRIC_INFO_NOT_IN_METRIC_QDC.length > 0) {
    var sql = "INSERT INTO " + QDC_TABLE + " (metric_id, sql_qdc, json_qdc, aggr_func, parse_target_group) VALUES (?, ?, ?, ?, ?)";
    var args = [];
    IN_METRIC_INFO_NOT_IN_METRIC_QDC.forEach(function(values) {
        args.push(values);
    });
    SQL.executeUpdate(QDC_DS, sql, args);
}


print("");
print("IN_METRIC_QDC_BUT_CHANGED="+IN_METRIC_QDC_BUT_CHANGED.length);
print("=> this we can handle");
print("=> update entries in viaops_qdc_table");
//print(__prettyPrintJSON(IN_METRIC_QDC_BUT_CHANGED_LIST));
//print(__prettyPrintJSON(IN_METRIC_QDC_BUT_CHANGED));
if (DOIT && IN_METRIC_QDC_BUT_CHANGED.length > 0) {
    var sql = "UPDATE " + QDC_TABLE
            + " SET sql_qdc=?, json_qdc=?, aggr_func=?, parse_target_group=?, modified_ts=current_timestamp() WHERE metric_id=?";
    var args = [];
    IN_METRIC_QDC_BUT_CHANGED.forEach(function(values) {
        args.push(values);
    });
    SQL.executeUpdate(QDC_DS, sql, args);
}


print("");
print("QDC_INFO_SERVICE_CONFIG_IN_SYNC="+QDC_INFO_SERVICE_CONFIG_IN_SYNC.length);
print("=> these are all good");
//print(__prettyPrintJSON(QDC_INFO_SERVICE_CONFIG_IN_SYNC));

print("");

this.metricQDCAudit(qdcAuditValue);
return IN_METRIC_QDC_NOT_IN_METRIC_INFO;
]]>
        </CodeText>
      </Service>
      <Service name="updateNotificationActionRuleValues" args="metricId,vitriaSev,selected" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_updateNotificationActionRuleValues: metricId="+metricId);
print("_updateNotificationActionRuleValues: vitriaSev="+vitriaSev);
print("_updateNotificationActionRuleValues: selected="+__prettyPrintJSON(selected));

var DATASOURCE = queryConfig["data-source"]["notification-model"];
var ACTION_TABLE = "action_params";
var RULE_TABLE = "rule_params";

function DQ(str)
{
    return '"' + str + '"';
}

function upsertActionValue(action, name, value)
{
    var sql = "UPDATE " + ACTION_TABLE
            + " SET " + name + "=" + DQ(value)
            + " WHERE metric_id=" + DQ(metricId)
            + " AND vitria_sev=" + DQ(vitriaSev)
            + " AND action_id=" + action;
    var result = this.executeSQLUpdate(queryConfig, [], ["NotificationActionRuleValues", "Update", "Action"], DATASOURCE, sql, null);
    if (result.status != "OK" || result.value == 0) {
        sql = "INSERT INTO " + ACTION_TABLE
            + " (metric_id, vitria_sev, action_id, " + name + ")"
            + " VALUES (" + DQ(metricId) + "," + DQ(vitriaSev) + "," + action + "," + DQ(value) + ")";
        this.executeSQLUpdate(queryConfig, [], ["NotificationActionRuleValues", "Insert", "Action"], DATASOURCE, sql, null);
    }
}

function upsertRuleValue(action, rule, phase, name, value)
{
    var sql = "UPDATE " + RULE_TABLE
            + " SET " + name + "=" + DQ(value)
            + " WHERE metric_id=" + DQ(metricId)
            + " AND vitria_sev=" + DQ(vitriaSev)
            + " AND action_id=" + action
            + " AND rule_id=" + rule
            + " AND phase=" + DQ(phase);
    var result = this.executeSQLUpdate(queryConfig, [], ["NotificationActionRuleValues", "Update", "Rule"], DATASOURCE, sql, null);
    if (result.status != "OK" || result.value == 0) {
        sql = "INSERT INTO " + RULE_TABLE
            + " (metric_id, vitria_sev, action_id, rule_id, phase, " + name + ")"
            + " VALUES (" + DQ(metricId) + "," + DQ(vitriaSev) + "," + action + "," + rule + "," + DQ(phase) + "," + DQ(value) + ")";
        this.executeSQLUpdate(queryConfig, [], ["NotificationActionRuleValues", "Insert", "Rule"], DATASOURCE, sql, null);
    }
}

for (var key in selected) {
    var toks = key.split("|");
    var value = selected[key];
    if (Array.isArray(value)) {
        value = value.join("|");
    }
    else if (typeof value == "Number") {
        value = String(value);
    }
    if (toks.length == 2) {
        // action value
        upsertActionValue(toks[0], toks[1], value);
    }
    else if (toks.length == 4) {
        // rule value
        upsertRuleValue(toks[0], toks[1], toks[2], toks[3], value);
    }
}
]]>
        </CodeText>
      </Service>
      <Service name="updateNotificationMetricModel" args="selected" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_updateNotificationMetricModel: selected="+__prettyPrintJSON(selected));
var DATASOURCE = queryConfig["data-source"]["notification-model"];

var sql = Context.getLocalResource("NOTIFICATION_METRIC_UPDATE_SQL");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [], ["NotificationMetric", "Update"], DATASOURCE, sql, null);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="updateNotificationSeverityModel" args="selected" private="false">
        <CodeText>
          <![CDATA[var queryConfig   = this.getQueryConfig();

print("_updateNotificationSeverityModel: selected="+__prettyPrintJSON(selected));
var DATASOURCE = queryConfig["data-source"]["notification-model"];

var sql = Context.getLocalResource("NOTIFICATION_SEVERITY_UPDATE_SQL");
sql = this._doValueSubstitution(sql, selected);
this.executeSQLUpdate(queryConfig, [], ["NotificationSeverity", "Update"], DATASOURCE, sql, null);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="updateParseModelTable" args="" private="false">
        <CodeText>
          <![CDATA[var serviceConfig = this.getServiceConfig();
var sourceConfig  = this.getSourceConfig();
var queryConfig   = this.getQueryConfig();

var DATASOURCE = queryConfig["data-source"]["parse-model"];

function isValid(metric)
{
    if (metric["parseSourceGroup"] == null) return false;
    if (metric["parseSourceName"] == null) return false;
    if (metric["parseAggrFunc"] == null) return false;
    if (metric["parseTargetGroup"] == null) return false;
    if (metric["parseTargetApp"] == null) return false;
    if (metric["parseTargetMetric"] == null) return false;
    return true;
}

function isChanged(existing, metric)
{
    if (existing["parse_source_group"] != metric["parseSourceGroup"]) return true;
    if (existing["parse_source_name"] != metric["parseSourceName"]) return true;
    if (existing["aggr_func"] != metric["parseAggrFunc"]) return true;
    if (existing["parse_target_group"] != metric["parseTargetGroup"]) return true;
    if (existing["parse_target_app"] != metric["parseTargetApp"]) return true;
    if (existing["parse_target_metric"] != metric["parseTargetMetric"]) return true;
    return false;
}

var parseModel = this.getParseModel(serviceConfig, sourceConfig, queryConfig);

var existingMetrics = {};
var SELECT = Context.getLocalResource("PARSE_MODEL_SELECT_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["ParseModel", "Select"], DATASOURCE, SELECT, null);
if (result != null && result.items != null) {
    result.items.forEach(function(record) {
        existingMetrics[record["metric_id"]] = record;
    });
}

var inserts = [];
var updates = [];
var deletes = [];
var auditValue = [];

parseModel.forEach(function(metric) {
    if (isValid(metric)) {
        var existing = existingMetrics[metric["metricId"]];
        if (existing == null) {
            // new
            inserts.push([
                metric["metricId"],
                metric["parseAggrFunc"],
                metric["parseSourceGroup"],
                metric["parseSourceName"],
                metric["parseTargetGroup"],
                metric["parseTargetApp"],
                metric["parseTargetMetric"],
            ]);
            
            auditValue.push([
                "add",
                metric["metricId"],
                metric["parseAggrFunc"],
                metric["parseSourceGroup"],
                metric["parseSourceName"],
                metric["parseTargetGroup"],
                metric["parseTargetApp"],
                metric["parseTargetMetric"]
            ]);
        }
        else {
            existing._keep_ = true;
            if (isChanged(existing, metric)) {
                // update
                updates.push([
                    metric["parseSourceGroup"],
                    metric["parseSourceName"],
                    metric["parseAggrFunc"],
                    metric["parseTargetGroup"],
                    metric["parseTargetApp"],
                    metric["parseTargetMetric"],
                    metric["metricId"],
                ]);
                
                var auditItem = ["modify", metric["metricId"]];
                if (existing["aggr_func"] != metric["parseAggrFunc"]) {
                    auditItem.push(metric["parseAggrFunc"]);
                } else {
                    auditItem.push(null);
                }
                
                if (existing["parse_source_group"] != metric["parseSourceGroup"]) {
                    auditItem.push(metric["parseSourceGroup"]);
                } else {
                    auditItem.push(null);
                }
                
                if (existing["parse_target_group"] != metric["parseTargetGroup"]) {
                    auditItem.push(metric["parseTargetGroup"]);
                } else {
                    auditItem.push(null);
                }
                
                if (existing["parse_target_app"] != metric["parseTargetApp"]) {
                    auditItem.push(metric["parseTargetApp"]);
                } else {
                    auditItem.push(null);
                }
                
                if (existing["parse_target_metric"] != metric["parseTargetMetric"]) {
                    auditItem.push(metric["parseTargetMetric"]);
                } else {
                    auditItem.push(null);
                }
                
                auditValue.push(auditItem);
            }
        }
    }
});
for (var key in existingMetrics) {
    var existing = existingMetrics[key];
    if (existing._keep_ == null) {
        // delete
        deletes.push([key]);
        auditValue.push(["delete", key, null, null, null, null, null, null]);
    }
}

if (inserts.length > 0) {
    var INSERT = Context.getLocalResource("PARSE_MODEL_INSERT_SQL");
    SQL.executeUpdate(DATASOURCE, INSERT, inserts);
}
if (updates.length > 0) {
    var UPDATE = Context.getLocalResource("PARSE_MODEL_UPDATE_SQL");
    SQL.executeUpdate(DATASOURCE, UPDATE, updates);
}
if (deletes.length > 0) {
    var DELETE = Context.getLocalResource("PARSE_MODEL_DELETE_SQL");
    SQL.executeUpdate(DATASOURCE, DELETE, deletes);
}

this.parseModelAudit(auditValue);
]]>
        </CodeText>
      </Service>
    </Services>
    <Resources>
      <Resource uuid="baffcafa-87a0-48d3-8988-a6c9c690a031" name="ALGORITHM_MODEL_SELECT_SQL" type="application/sql" size="1617" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="73071233-1955-4a75-8a4d-e580e5aba8ad" name="ANOMALY_MODEL_DELETE_SQL" type="application/sql" size="85" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="ba9d491b-1736-4554-8628-1c17eebc06bf" name="ANOMALY_MODEL_EXISTS_SQL" type="application/sql" size="124" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="b4b15369-8f5e-4ab9-8993-e5e4bcd9a3f4" name="ANOMALY_MODEL_INSERT_SQL" type="application/sql" size="383" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="9c654cbd-a9f8-4c85-83c5-be4ca48e623d" name="ANOMALY_MODEL_SELECT_SQL" type="application/sql" size="331" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="801d9cc4-b954-4a75-83f0-66d5767c5f39" name="ANOMALY_MODEL_UPDATE_SQL" type="application/sql" size="363" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="180f5236-d14f-4bdd-89ad-91a15cc03528" name="ANOMALY_WINDOW_INSERT_SQL" type="application/sql" size="294" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="3280ec91-c142-4ee5-8bfb-1db02b451383" name="ANOMALY_WINDOW_SELECT_SQL" type="application/sql" size="64" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="5fda0747-2b82-43dc-86bd-aac505cd2a71" name="ANOMALY_WINDOW_UPDATE_SQL" type="application/sql" size="95" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="3f333352-665e-4e3f-8428-805ad5b5df8f" name="BASELINE_MODEL_DELETE_SQL" type="application/sql" size="80" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="74012404-690e-4e51-8a94-ee6f324556e3" name="BASELINE_MODEL_EXISTS_SQL" type="application/sql" size="119" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="cc380b05-b431-4e84-8178-0f12a67333c6" name="BASELINE_MODEL_INSERT_SQL" type="application/sql" size="366" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="1d907117-a45b-4db4-8196-a090686ef27b" name="BASELINE_MODEL_SELECT_SQL" type="application/sql" size="350" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="9ed29abc-bb66-4f44-8a13-d83fb8473472" name="BASELINE_MODEL_UPDATE_SQL" type="application/sql" size="346" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="9b77d9ab-f252-451f-8d38-3b2880a31b1f" name="CORRELATION_TIME_DELETE_SQL" type="application/sql" size="140" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="5f70c6b1-564a-4a8e-8785-937db927d0b1" name="CORRELATION_TIME_EXISTS_SQL" type="application/sql" size="140" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="90bf0c0d-a332-458d-8112-7ec5ce3dd478" name="CORRELATION_TIME_INSERT_SQL" type="application/sql" size="275" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="645bdbc4-6ab0-44e4-837f-a25b259ac0d8" name="CORRELATION_TIME_UPDATE_SQL" type="application/sql" size="195" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="0a841b56-721b-4262-875a-9dff8cd14ef3" name="CORRELATION_TIMES_SELECT_SQL" type="application/sql" size="206" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="218fcd48-d7b4-4eff-832d-8d2a94e44040" name="INCIDENT_GROUP_CONTEXTUAL_DELETE_SQL" type="application/sql" size="87" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="20b96c1b-7376-44a1-839c-438042118f45" name="INCIDENT_GROUP_CONTEXTUAL_INSERT_SQL" type="application/sql" size="128" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="c258f332-a941-4c9e-82d7-57edeb227ba1" name="INCIDENT_GROUP_CONTEXTUAL_SELECT_SQL" type="application/sql" size="118" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="0b6b9898-da9d-46aa-84df-d46ace2d2be0" name="INCIDENT_GROUP_CONTEXTUAL_UPDATE_SQL" type="application/sql" size="105" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="7c7ef044-378e-4188-84e3-44fea58d154d" name="INCIDENT_GROUP_CORRELATION_DELETE_SQL" type="application/sql" size="93" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="caa52b9a-c58d-4aae-8ee1-c9837dac3ced" name="INCIDENT_GROUP_CORRELATION_INSERT_SQL" type="application/sql" size="235" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="98dbb224-6320-4c42-8cc6-878ece7e9523" name="INCIDENT_GROUP_DELETE_SQL" type="application/sql" size="176" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="6052371f-15d8-4b6d-8323-9aed61aef2ee" name="INCIDENT_GROUP_EXISTS_SQL" type="application/sql" size="95" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="f58f4154-8695-4e52-8f05-165834ffddda" name="INCIDENT_GROUP_INSERT_SQL" type="application/sql" size="215" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="8fbb4061-de60-4510-857c-86a90e384daa" name="INCIDENT_GROUP_SELECT_SQL" type="application/sql" size="577" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="c7d60670-e939-4016-84fe-13143671d0f7" name="INCIDENT_GROUP_UPDATE_SQL" type="application/sql" size="184" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="6d1db6dd-e067-42c4-8923-9c8884a4395b" name="INCIDENT_MODEL_DELETE_SQL_1" type="application/sql" size="122" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="06b98639-0304-4764-882a-a93010c1a49f" name="INCIDENT_MODEL_DELETE_SQL_2" type="application/sql" size="120" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="05143ee9-0244-4528-8f1b-c4d08b3581cc" name="INCIDENT_MODEL_EXISTS_SQL_1" type="application/sql" size="194" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="c0839546-05f2-417e-8f99-765507f3b3db" name="INCIDENT_MODEL_EXISTS_SQL_2" type="application/sql" size="198" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="b2f83d34-c173-48e8-8b06-ac11bca98a0d" name="INCIDENT_MODEL_INSERT_SQL_1" type="application/sql" size="1506" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="f0277c9d-231e-4a2b-828e-e883134e3345" name="INCIDENT_MODEL_INSERT_SQL_2" type="application/sql" size="1483" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="b13b2f6a-b7b3-47d0-8cc9-abb4097542c4" name="INCIDENT_MODEL_SELECT_SQL_1" type="application/sql" size="739" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="f045d4c4-32de-4f4c-8aa6-b7505bba9407" name="INCIDENT_MODEL_SELECT_SQL_2" type="application/sql" size="1102" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="57deef73-800d-4237-842e-1f47a56a20a2" name="INCIDENT_MODEL_UPDATE_SQL_1" type="application/sql" size="1269" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="a49ad330-7d0b-4c71-829c-46f613d74398" name="INCIDENT_MODEL_UPDATE_SQL_2" type="application/sql" size="1559" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="16c446b6-4cb6-4fab-841c-d3dca6d80abc" name="NOTIFICATION_ACTION_LIST_SQL" type="application/sql" size="187" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="20d35784-8279-489b-8671-0ca954c54441" name="NOTIFICATION_ACTION_RULE_PARAM_SQL" type="application/sql" size="0" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="8e3b091a-ce42-4067-85d3-6bcb2dd6e48c" name="NOTIFICATION_ACTION_RULE_SQL" type="application/sql" size="417" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="97219134-14b8-43bc-8571-89edbfbb25bc" name="NOTIFICATION_ACTION_RULE_VALUE_SQL" type="application/sql" size="568" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="ff221fe2-b05c-419f-8aed-aef11c37619e" name="NOTIFICATION_ACTION_SELECT_SQL" type="application/sql" size="333" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="d2e60188-517a-43fd-82dc-8ba2d9c08fb4" name="NOTIFICATION_METRIC_DELETE_SQL" type="application/sql" size="48" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="3c861f22-7048-42af-8263-a9fdc70ca60a" name="NOTIFICATION_METRIC_INSERT_SQL" type="application/sql" size="651" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="8f343e5d-668e-45ea-878f-e7bcc9f2a931" name="NOTIFICATION_METRIC_SELECT_SQL" type="application/sql" size="436" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="8ea2678c-7d2f-4913-8cb7-677ebc87791a" name="NOTIFICATION_METRIC_UPDATE_SQL" type="application/sql" size="769" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="14d90d59-ffc1-477b-8c3f-694e523e21c3" name="NOTIFICATION_MODEL_EXISTS_SQL" type="application/sql" size="75" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="0f2d1c6c-e2bb-4c1a-8c57-0563902da45d" name="NOTIFICATION_SEVERITY_DELETE_SQL" type="application/sql" size="122" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="8b706964-a683-450f-8213-305f0c38b551" name="NOTIFICATION_SEVERITY_INSERT_SQL" type="application/sql" size="351" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="f5984009-68d9-417c-8959-6fa812dffa66" name="NOTIFICATION_SEVERITY_SELECT_SQL" type="application/sql" size="363" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="eda9a42a-8247-49c4-8a79-aceb89fc8c23" name="NOTIFICATION_SEVERITY_UPDATE_SQL" type="application/sql" size="385" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="29bf6c4a-3d63-4671-8c82-5030a57bc129" name="PARSE_MODEL_DELETE_SQL" type="application/sql" size="49" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="71ad3b95-c14c-4362-8aa7-83343c20edaf" name="PARSE_MODEL_INSERT_SQL" type="application/sql" size="227" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="13296cd2-d0f1-4e1d-806a-fd0719f23512" name="PARSE_MODEL_INSERT_SQL_OLD" type="application/sql" size="227" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="d2009ed6-91af-46dc-8ce2-0efe9c6a6262" name="PARSE_MODEL_SELECT_SQL" type="application/sql" size="33" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="4b4e1174-a208-4b31-824e-74d6c903d1d2" name="PARSE_MODEL_UPDATE_SQL" type="application/sql" size="242" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="acab73e3-ca58-4383-8ff8-5532543290c3" name="PARSE_MODEL_UPDATE_SQL_OLD" type="application/sql" size="242" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="cddc624e-4b6d-4f7e-8b40-2f1b0235e084" name="QDC_SELECT_ANOMALY_SQL" type="application/sql" size="62" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="66c19ce6-b2bd-456f-8472-948015461467" name="QDC_SELECT_BASELINE_SQL" type="application/sql" size="56" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="fa95a5a7-bd07-47c3-8bea-5fd8f3e3cbca" name="QDC_SELECT_INCIDENT_SQL" type="application/sql" size="136" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="5af707ee-8fac-42f6-88f2-765bb6d4b983" name="SQL Scripts" type="application/sql" size="11163" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins>
      <Plugin uri="/app/dbp/space/another/dbpm/VIAOps - Base Service"/>
      <Plugin uri="/app/dbp/space/another/dbpm/VIAOps - Config Audit Service"/>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>
