<DashboardPluginModel description="" name="Charter - Incident Analysis Service v8" is_init="false">
  <ModelInfo validated="true">
    <Properties/>
    <Widgets/>
    <Functions>
      <Function name="addDimensionWhereClause" args="filters,selected" private="false">
        <CodeText>
          <![CDATA[var dim_keys   = selected["dim_keys"];
var dim_values = selected["dim_values"];
if (dim_keys != null && dim_values != null) {
    if (dim_keys.charAt(0) == "[" && dim_values.charAt(0) == "[") {
        // new JSON string
        dim_keys = JSON.parse(dim_keys);
        dim_values = JSON.parse(dim_values);
    }
    else {
        // *** HACK *** HACK *** HACK *** HACK *** HACK *** HACK *** HACK
        // to handle additional dimensions appended to dim_values -engkee
        // OLD '|' separated strings
        dim_keys = dim_keys.split("|");
        dim_keys = dim_keys.slice(2, dim_keys.length);
        dim_values = dim_values.split("|");
        dim_values = dim_values.slice(2, dim_values.length);
    }
}
if (dim_keys != null && dim_values != null) {
    if (dim_keys.length > 0 && dim_keys.length == dim_values.length) {
        var dims = {};
        for (var i=0; i<dim_keys.length; i++) {
            dims[dim_keys[i]] = dim_values[i];
        }
        filters.push({
            name  : "$.dimensionWhereClause",
            value : dims,
        });
    }
}
]]>
        </CodeText>
      </Function>
      <Function name="cacheAnalysisResult" args="context" private="false">
        <CodeText>
          <![CDATA[var CACHE_ANALYSIS_RESULT = {
    "dimension-analysis" : true,
    "trend-analysis" : true,
};
return CACHE_ANALYSIS_RESULT[context] == true;

]]>
        </CodeText>
      </Function>
      <Function name="formatDetectStartEnd" args="detectStartEnd" private="false">
        <CodeText>
          <![CDATA[if (detectStartEnd == null || detectStartEnd == "") return "";

var toks = detectStartEnd.split("/");
var start = toks.length > 0 ? Number(toks[0]) : 0;
var end = toks.length > 1 ? Number(toks[1]) : 0;

var detect = "";
if (start > 0) {
    detect += this.parseShortDate(new Date(start * 1000));
    detect += " - ";
    if (end > 0) {
        detect += this.parseShortDate(new Date(end * 1000));
    }
    else {
        detect += "OPEN"; 
    }
}
return detect;
]]>
        </CodeText>
      </Function>
      <Function name="parseShortDate" args="dObj" private="false">
        <CodeText>
          <![CDATA[if (dObj != null) {
    var year    =   dObj.getFullYear();
    var month   = ((dObj.getMonth()+1 ) < 10) ? "0"+(dObj.getMonth()+1) : (dObj.getMonth()+1);
    var day     =  (dObj.getDate() < 10)      ? "0"+dObj.getDate()      :  dObj.getDate();
    var hours   =  (dObj.getHours() < 10)     ? "0"+dObj.getHours()     :  dObj.getHours();
    var minutes =  (dObj.getMinutes() < 10)   ? "0"+dObj.getMinutes()   :  dObj.getMinutes();
    return month + "/" + day + " " + hours + ":" + minutes;
}
return "";
]]>
        </CodeText>
      </Function>
    </Functions>
    <Services>
      <Service name="_addLabelAttributes" args="serviceConfig,record" private="true">
        <CodeText>
          <![CDATA[var service = record["service"];
var sub_service = record["sub_service"];
var app_metric = (record["dim_values"]).split("|");
var names = [service, sub_service, app_metric[0], app_metric[1]];
var labels = this._getGroupItemLabels(serviceConfig, names);
//print("_addLabelAttributes: names="+JSON.stringify(names)+" labels="+JSON.stringify(labels));
if (labels != null && labels.length == 4) {
    record["service_label"]     = labels[0];
    record["sub_service_label"] = labels[1];
    record["component_label"]   = labels[2];
    record["metric_label"]      = labels[3];
    if (app_metric.length > 2) {
        app_metric.splice(0, 2);
        record["dim_labels"] = labels[2] + "|" + labels[3] + "|" + app_metric.join("|");
    }
    else {
        record["dim_labels"] = labels[2] + "|" + labels[3];
    }
}
else {
    // if something goes wrong, put value in as service so that we don't have ""
    record["service_label"]     = service;
    record["sub_service_label"] = sub_service;
    record["component_label"]   = app_metric[0];
    record["metric_label"]      = app_metric[1];
    record["dim_labels"]        = record["dim_values"];
}
]]>
        </CodeText>
      </Service>
      <Service name="_enrichIncidentsWithMetrics" args="incidents" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var debug = false;
var jndiName = queryConfig["data-source"]["metric-info"];
if (jndiName == null) return [];

if( debug ) print('_enrichIncidentsWithMetrics()');

if( incidents && incidents.length > 0  ){
    
    var demoProfile = this.getDemoProfile != null ? this.getDemoProfile() : null;
    var serviceConfig = this.getServiceConfig();
    
    var allowedBaseMetricIDs = null;
    var accessControlList = this.getAccessControlList();
    if (accessControlList != null) {
        allowedBaseMetricIDs = this._createAllowedBaseMetrics(serviceConfig, 4, accessControlList);
    }
    
    var metricIds = [];
    if( debug ) print( '_enrichIncidentsWithMetrics');
    
    for( var i=0, len=incidents.length; i < len; i++ ){
        var id = incidents[i]['config_metric_id'];
        if( metricIds.length == 0 || metricIds.indexOf(id) < 0 ) {
            metricIds.push(id);   
        }
    }

    var metricList = this._formatArrayForInClause(metricIds);
    var sql = "SELECT"; 
        sql += "*";
        sql += "from viaops_metric_info "; 
        sql += "WHERE metric_id IN ("+metricList+")";

    if( debug ) print('_enrichIncidentsWithMetrics(): SQL: ' + sql); 
    
    var result = SQL.executeQuery(jndiName, sql);
    if (result != null) {
        result = JSON.parse(result);
        if( result.items ){
            var items = {};
            var self = this;
            result.items.forEach(function(item) {
                if (demoProfile != null && serviceConfig != null) {
                    var names = [item['service_name'], item['sub_service_name'], item['app_name'], item['metric_name']];
                    var labels = self._getGroupItemLabels(serviceConfig, names);
                    if (labels != null && labels.length == 4) {
                        item['service_label'] = labels[0];
                        item['sub_service_label'] = labels[1];
                        item['app_label'] = labels[2];
                        item['metric_label'] = labels[3];
                    }
                }
                items[item['metric_id']] = item;
            });
            //print("_enrichIncidentsWithMetrics: response = " + __prettyPrintJSON(items));
        }
        
        for( var i=0, len=incidents.length; i < len; i++ ){
            var item = items[incidents[i]['config_metric_id']];
            if( item != null ){
                if( debug ) print("_enrichIncidentsWithMetrics: incidents["+i+"]: before = " + __prettyPrintJSON(incidents[i]));
                incidents[i]['service']             = item['service_name'];
                incidents[i]['service_label']       = item['service_label'];
                incidents[i]['sub_service']         = item['sub_service_name'];
                incidents[i]['sub_service_label']   = item['sub_service_label'];
                incidents[i]['component']           = item['app_name'];
                incidents[i]['component_label']     = item['app_label'];
                incidents[i]['metric']              = item['metric_name'];
                incidents[i]['metric_label']        = item['metric_label'];
                incidents[i]['dim_labels']          = item['metric_label'];
                incidents[i]['dim_keys']            = item['dim_keys'];
                incidents[i]['dim_values']          = item['dim_values'];
                incidents[i]['base_metric_id']      = item['base_metric_id'];
                if( debug ) print("_enrichIncidentsWithMetrics: incidents["+i+"]: after = " + __prettyPrintJSON(incidents[i]));
            }
        }

        if (allowedBaseMetricIDs != null) {
            var allowed_incidents = [];
            for( var i=0, len=incidents.length; i < len; i++ ){
                var base_metric_id = incidents[i]["base_metric_id"];
                if (allowedBaseMetricIDs[base_metric_id] == true) {
                    if( debug ) print("_enrichIncidentsWithMetrics: ALLOW="+incidents[i]["metric_id"]);
                    allowed_incidents.push(incidents[i]);
                }
                else {
                    if( debug ) print("_enrichIncidentsWithMetrics: DENY="+incidents[i]["metric_id"]);
                }
            }
            if( debug ) print("_enrichIncidentsWithMetrics: total incidents count="+incidents.length);
            if( debug ) print("_enrichIncidentsWithMetrics: allowed incidents count="+allowed_incidents.length);
            incidents = allowed_incidents;
        }
    }
    
    for( var i=0, len=incidents.length; i < len; i++ ){
        if( debug ) print("_enrichIncidentsWithMetrics: incidents["+i+"]: before = " + __prettyPrintJSON(incidents[i]));
        if (incidents[i]['dim_values'] != null && incidents[i]['dim_values'] != "" && incidents[i]['dim_values'] != "[]") {
            var tmp = JSON.parse(incidents[i]['dim_values']).join("|");
            incidents[i]['dim_labels'] = incidents[i]['dim_labels'] + "|" + tmp;
        }
        if( debug ) print("_enrichIncidentsWithMetrics: incidents["+i+"]: after = " + __prettyPrintJSON(incidents[i]));
    }

    return incidents;
    
} else {
    return [] ;   
}

]]>
        </CodeText>
      </Service>
      <Service name="_enrichIncidentsWithNotificationsAndCalls" args="incidents,notifications,calls" private="false">
        <CodeText>
          <![CDATA[var debug = false;
if( debug ) print( "_enrichIncidentsWithNotificationsAndCalls()" );
if( debug ) print( "incidents: " + incidents.length );
if( debug ) print( "notifications: " + notifications.length );


for (var i=0; i<incidents.length; i++) {
    var incident = incidents[i];

    var value = Number(incident["metric_measure"]);
    var baseline = Number(incident["metric_baseline"]);
    
    if (!isNaN(value) && !isNaN(baseline) && baseline != 0) {
        incident["metric_value_bl"] = (value.toFixed(0) - baseline.toFixed(0))
                                    + " ( " + (((value.toFixed(0) - baseline.toFixed(0)) / baseline) * 100).toFixed(0) + "%) ";
    }
    
    var value = Number(incident["cust_call_count"]);
    var baseline = Number(incident["cust_call_baseline"]);
    
    if (!isNaN(value) && !isNaN(baseline) && baseline != 0) {
        incident["call_count_bl"] = (value.toFixed(0) - baseline.toFixed(0))
                                  + " ( " + (((value.toFixed(0) - baseline.toFixed(0)) / baseline) * 100).toFixed(0) + "% ) ";
    }
    
    //var above     = incident["above"];
    //var below     = incident["below"];
    //var min_score = Number(incident["min_score"]);
    var max_score = Number(incident["peak_score"]);
    
    /*
    if (above == "y" && below == "y") {
        var maxDev  = Math.abs(max_score);
        var maxSign = (maxDev < 0) ? -1 : 1;
        var minDev  = Math.abs(min_score);
        var minSign = (minDev < 0) ? -1 : 1;
        
        if (minDev > maxDev) {
            incident["display_max"] = minDev * minSign;
        }
        else {
            incident["display_max"] = maxDev * maxSign;
        }
    }
    else if (above == "y" && below == "n") {
        incident["display_max"] = max_score;
    }
    else if (above == "n" && below == "y") {
        incident["display_max"] = min_score;
    }
    else { 
    */
        
        incident["display_max"] = max_score;
    //}
    
    //if (!isNaN(min_score) && !isNaN(max_score)) {
    //    incident["score_min_max"] = min_score.toFixed(2) + " / " + max_score.toFixed(2);
    //}
    
    var subSvc = incident["sub_service"];
    incident["sub_service"] = subSvc.trim();
    
    var local_detect = "";
    if (incident['start_epoch'] != null && incident['start_epoch'] > 0) {
        var startEpoch = parseInt(incident['start_epoch']) - 0;
        var endEpoch = parseInt(incident['end_epoch']) + 0;
        local_detect = String(startEpoch) + "/" + String(endEpoch);
    }
	incident['local_detect'] = local_detect;

    var _id = incident["id"];
    var _idSpl = _id.split("#");
    var id_label = _idSpl.length > 1 ? ("#" + parseInt(_idSpl[1])) : _id;
    incident["id_label"] = id_label;

    incident["type"] = "Informational";
	incident["typeVal"] = 1;
    incident['notification'] = "Not Actioned"; 
    if (notifications != null && notifications.length > 0) {
        var nCount = 0;
        for (var n=0, nlen=notifications.length; n < nlen; n++) {
            if (incident["id"] == notifications[n]["id"]) {
                nCount++;  
                if( notifications[n]["target_interface"].toLowerCase() == "snmp"){
                    incident["type"] = "Outage"; 
                    incident["severity"] = "Outage";
                    incident["derived_severity"] = "Outage";
                    incident["typeVal"] = 2;
                }
            //    var isTest = ( notifications[n]["output_data"].indexOf("-TEST") > 0 );    
            //    if( isTest ){
            //        incident["type"] = "TEST";
            //        incident["typeVal"] = 0;
            //    }
            }
        }
        if (nCount > 0) {
            if (nCount > 1) {
                incident['notification'] = nCount + " notifications";
            } else {
                incident['notification'] = nCount + " notification";
            }
        }
    }
}

for (var i=0, len=incidents.length; i < len; i++) {
    var local_call_detect = "---";
    var _cList = [];
    incidents[i]['call_start_epoch'] = 0;
    incidents[i]['call_end_epoch']   = 0;
    for (var c=0, clen=calls.length; c < clen; c++) {
        var call    = calls[c];
        var svcCall = call["service"];
        var svcInci = incidents[i]['service']
        var _curr   = new Date().getTime();
        
        var _stEpoch_calls = parseInt( call["start_epoch"] );
        var _edEpoch_calls = parseInt( call["end_epoch"] );
        if( _edEpoch_calls == 0 ) _edEpoch_calls = ( _curr / 1000 );
       
        var _stTM_inci = parseInt( incidents[i]['start_epoch'] );
        var _edTM_inci = parseInt( incidents[i]['end_epoch'] );
        if( _edTM_inci == 0 ) _edTM_inci = ( _curr / 1000 );
        
        if (_stEpoch_calls <= _edTM_inci && _stEpoch_calls >= (_stTM_inci - 1800) && _edEpoch_calls >= _stTM_inci && svcCall == svcInci) {
            _cList.push(call);
        }
    }
    if (_cList.length > 0) {
        var _cStart = 0;
        var _cEnd   = 0;
        for (var _c=0, _clen=_cList.length; _c < _clen; _c++) {
            if (_cStart == 0 || _cStart > _cList[_c]['start_epoch']) {
                _cStart = parseInt(_cList[_c]['start_epoch']) - 0;    
            }
            if (_cEnd < _cList[_c]['end_epoch']) {
                _cEnd = parseInt(_cList[_c]['end_epoch']) + 0;
            }
        }
        incidents[i]['call_start_epoch'] = _cStart;
        incidents[i]['call_end_epoch']   = _cEnd;
        if (_cStart > 0) {
            local_call_detect = String(_cStart) + "/" + String(_cEnd);
        }
    }
    incidents[i]['local_call_detect'] = local_call_detect;
}
incidents.sort(function(a,b) {
    if (a["typeVal"] > b["typeVal"]) return -1;
    else if (a["typeVal"] < b["typeVal"]) return 1;
    else {
        if (a["start_epoch"] > b["start_epoch"]) return -1;
        else if (a["start_epoch"] < b["start_epoch"]) return 1;
        else {
            if (a["end_epoch"] > b["end_epoch"]) return -1;
            else if (a["end_epoch"] < b["end_epoch"]) return 1;
            else return 0;
        }
    }
});
]]>
        </CodeText>
      </Service>
      <Service name="_getMetricIdWhereClause" args="metricInfo" private="true">
        <CodeText>
          <![CDATA[var debug = false;

var queryConfig = this.getQueryConfig();
var metricIdWhereClause = queryConfig["metric-id-where-clause"] || {};

function getMetricClause(prefix)
{
    var clause = metricIdWhereClause[prefix];
    if (clause != null && typeof clause != "string") {
        // assume array of string that we concat... mainly for ease of construction in QueryConfig
        clause = clause.join(" ");
    }
    return clause || "metric_id like '" + prefix + "%'"
}

function getCommonPrefix(str1, str2)
{
    var result = "";
    var n1 = str1.length, n2 = str2.length; 

    // Compare str1 and str2  
    for (var i=0, j=0; i <= n1 - 1 && j <= n2 - 1; i++, j++) { 
        if (str1.charAt(i) != str2.charAt(j)) { 
            break; 
        } 
        result += str1.charAt(i); 
    } 
    return result; 
} 

if (metricInfo && metricInfo.length > 0) {
    var mids = [];
    for( var mi=0, mlen=metricInfo.length; mi < mlen; mi++ ){
        mids.push( metricInfo[mi]["metric_id"] );   
    }
    mids.sort();
    if( debug ) print("mids[] = " + __prettyPrintJSON(mids) );
    if (mids.length > 1) {
        var whereClause = [];
        var prefix = getCommonPrefix(mids[0], mids[1]);
        for (var i=2, n=mids.length; i<n; i++) {
            var newPrefix = getCommonPrefix(prefix, mids[i]);
            if (newPrefix == "") {
                whereClause.push(getMetricClause(prefix));
                prefix = mids[i];
            }
            else {
                prefix = newPrefix;
            }
        }
        whereClause.push(getMetricClause(prefix));
        if( debug ) print("whereClause[] = " + __prettyPrintJSON(whereClause) );
        if (whereClause.length == 1) {
            return "AND " + whereClause[0] + " ";
        }
        else if (whereClause.length > 1) {
            return "AND (" + whereClause.join(" OR ") + ") ";
        }
    }
    else {
        return "AND metric_id = '" + mids[0] + "' ";
    }
}
return "";
]]>
        </CodeText>
      </Service>
      <Service name="clearAnalysisCache" args="ids" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();
var deleteCount = 0;
if (ids == null) {
    deleteCount = this._cacheClear(queryConfig, null);
    print("clearAnalysisCache: count="+deleteCount);
}
else {
    if (!Array.isArray(ids)) {
        ids = [ids];
    }
    ids.forEach(function(id) {
        var count = this._cacheClear(queryConfig, id);
        print("clearAnalysisCache: id="+id+" count="+count);
        deleteCount += count;
    });
}
return deleteCount;
]]>
        </CodeText>
      </Service>
      <Service name="getAnomalyCount" args="incidentId,dateKey" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var sql = Context.getLocalResource("ANOMALY_COUNT_SQL");
var values = {
    "incidentId" : incidentId,
    "dateKey" : dateKey,
};
sql = this._doValueSubstitution(sql, values);

var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "AnomalyCount"];
var result = this.executeSQLQuery(queryConfig, [], moduleContext, "VT_ODA_QS", sql, null);
if (result != null && result.items.length == 1) {
    return result.items[0]["count"];
}
return 0;
]]>
        </CodeText>
      </Service>
      <Service name="getAnomalyIncidents" args="filters,starttm,endtm,service,subservice,dimvals" private="false">
        <CodeText>
          <![CDATA[var debug = false;
if( debug ) print("Execute Service Call: getAnomalyIncidents");

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];


if (typeof filters == "string") {
    filters = JSON.parse(filters);
}
if( debug ) print("getAnomalyIncidents: filters=" + __prettyPrintJSON(filters));

var svc = this._getFilterValue(filters, "data.svc", [], true);
    svc = this._stripDupAndHashItems(svc);

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var timeRange = this.getTimeRange(filters);
if (timeRange == null) return [];
if( debug ) print("getAnomalyIncidents: timeRange=" + __prettyPrintJSON(timeRange));

var timeRangeWhereClause = "";
if( ( starttm != null && !isNaN(starttm) ) && ( endtm != null && !isNaN(endtm) ) ) {
    timeRangeWhereClause = " AND start_tm BETWEEN " + parseInt(starttm) + " AND " + parseInt(endtm);
} else {
    return [];   
}
var serviceWhereClause = "";
if( service != null && service != "" ){
    serviceWhereClause = " AND service = '" + service + "' ";
}

var subServiceWhereClause = "";
if( subservice != null && subservice != "" ){
    subServiceWhereClause = " AND sub_service = '" + subservice + "' ";   
}

var dimValuesWhereClause = "";
if( dimvals != null && dimvals != "" ){
    dimValuesWhereClause = " AND dim_values = '" + dimvals + "'";   
}

var sql = Context.getLocalResource("ANOMALY_INCIDENTS_SQL");
var values = {
    "dateKeys" : this._getDateKeysFromUnixtimeRange(timeRange.fromUnixTime, timeRange.toUnixTime),
    "timeRangeWhereClause":     timeRangeWhereClause,
    "serviceWhereClause":       serviceWhereClause,
    "subServiceWhereClause":    subServiceWhereClause,
    "dimValuesWhereClause":     dimValuesWhereClause,
    "incidentWhereClause":      ""
}
sql = this._doValueSubstitution(sql, values);
if( debug ) print( sql );

var executeContext = [svc];

var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "AnomalyIncidents"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
if (result != null) {
    var serviceConfig = this.getServiceConfig()
    for (var i=0; i<result.items.length; i++) {
        var record = result.items[i];
    }
    return result.items;
}
return [];]]>
        </CodeText>
      </Service>
      <Service name="getAnomalyIncidentsByID" args="filters,incidentID" private="false">
        <CodeText>
          <![CDATA[var debug = true;
if( debug ) print("Execute Service Call: getAnomalyIncidentsByID: " + incidentID);

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

if (typeof filters == "string") {
    filters = JSON.parse(filters);
}

if( debug ) print("getAnomalyIncidentsByID: filters=" + __prettyPrintJSON(filters));

var svc = this._getFilterValue(filters, "data.svc", [], true);
    svc = this._stripDupAndHashItems(svc);

var timeRange = this.getTimeRange(filters);
if (timeRange == null) return [];
if( debug ) print("getAnomalyIncidentsByID: timeRange=" + __prettyPrintJSON(timeRange));

var incidentWhereClause = "";
if( incidentID != null && incidentID != "" ) {
    incidentWhereClause = " AND id in ('" + incidentID + "')";   
} else {
    return [];   
}

var vtCacheConfig = null;
if (queryConfig["cache-analysis-results"]["anomaly-incidents-by-id"] == true) {
    for (var i=0; i<filters.length; i++) {
        if (filters[i]["name"] == "$.cacheConfig") {
            vtCacheConfig = filters[i]["value"];
            break;
        }
    }
}
if (vtCacheConfig != null) {
    var start = Date.now();
    result = this._cacheLoad(queryConfig, vtCacheConfig);
    if (result != null) {
        print("Load cached anomaly incidents for " + vtCacheConfig.key1 + "/" + vtCacheConfig.key2 + " in " + (Date.now()-start) + "ms");
        return result;
    }
}

var sql = Context.getLocalResource("ANOMALY_INCIDENTS_SQL");
var values = {
    "dateKeys" : this._getDateKeysFromUnixtimeRange(timeRange.fromUnixTime, timeRange.toUnixTime),
    "incidentWhereClause":      incidentWhereClause,
    "timeRangeWhereClause":     " AND start_tm > 0 ",
    "serviceWhereClause":       "",
    "subServiceWhereClause":    "",
    "dimValuesWhereClause":     ""
}
sql = this._doValueSubstitution(sql, values);
if( debug ) print( sql );

var enrichedIncidentsWithMetrics = [];

var executeContext = [svc];
var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "AnomalyIncidentsByID"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
if (result != null) {
    var serviceConfig = this.getServiceConfig()
    for (var i=0; i<result.items.length; i++) {
        var record = result.items[i];
        //this._addLabelAttributes(serviceConfig, record);
    }
    if( debug ) print( "getAnomalyIncidentsByID: unenrichedrecords" );
    if( debug ) print( __prettyPrintJSON( result ) )    

    enrichedIncidentsWithMetrics = this._enrichIncidentsWithMetrics(result.items);
    
    if( debug ) print( "getAnomalyIncidentsByID: metricEnrichedrecords" );
    if( debug ) print( __prettyPrintJSON( enrichedIncidentsWithMetrics ) );
}

if (vtCacheConfig != null) {
    this._cacheSave(queryConfig, vtCacheConfig, enrichedIncidentsWithMetrics);
}

return enrichedIncidentsWithMetrics;
]]>
        </CodeText>
      </Service>
      <Service name="getCausationFactors" args="configMetricId" private="false">
        <CodeText>
          <![CDATA[//print( "Charter - Incident Analysis Service v6: getCausationEnrichment()" );

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var sql = Context.getLocalResource("INCIDENT_CAUSATION_FACTORS_SQL");
var values = {
    "config_metric_id" : configMetricId,
};
sql = this._doValueSubstitution(sql, values);
//print( sql );

var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "CausationFactors"];
var result = this.executeSQLQuery(queryConfig, [], moduleContext, "charter_ref_db", sql, null);
if (result != null) {
    return result.items;
}
return [];]]>
        </CodeText>
      </Service>
      <Service name="getEnrichedAnomalyData" args="filters" private="false">
        <CodeText>
          <![CDATA[var debug = false;
if (typeof filters == "string") {
    filters = JSON.parse(filters);
}

if( debug ) print( "getEnrichedAnomalyData: " );
if( debug ) print( __prettyPrintJSON(filters) )

var metricInfo      = this.getMetricInfo(filters);
if( debug ) print( "getEnrichedAnomalyData: getMetricInfo" );
if( debug ) print( __prettyPrintJSON(metricInfo) );


var notifications = this.getIncidentNotifications(filters, null);

var incidents = this.getIncidentHistoryData(filters, metricInfo);

var enrichedIncidentsWithMetrics = this._enrichIncidentsWithMetrics(incidents);
if( debug ) print("enrichedIncidentsWithMetrics");
if( debug ) print(__prettyPrintJSON(enrichedIncidentsWithMetrics))

var calls = [];
this._enrichIncidentsWithNotificationsAndCalls(enrichedIncidentsWithMetrics, notifications, calls)
return enrichedIncidentsWithMetrics;

]]>
        </CodeText>
      </Service>
      <Service name="getEnrichedIncidentByID" args="incidentId" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

function getIncidentNotifications(id, datekey)
{
    var sql = Context.getLocalResource("INCIDENT_NOTIFICATION_BY_ID_SQL");
    var values = {
        "incidentId" : id,
        "dateKey" : datekey,
    };
    sql = this._doValueSubstitution(sql, values);
    //print("getIncidentNotifications()");
    //print( sql );
    
    var executeContext = [];
    var moduleName = queryConfig["module-name"] || "(IA)";
    var moduleContext = [moduleName, "EnrichedIncidentByID", "IncidentNotifications"];
    var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
    if (result != null) {
        return result.items;
    }
    return [];
}

function getIncidentData(id, datekey)
{
    var sql = Context.getLocalResource("INCIDENT_HISTORY_BY_ID_SQL");
    var values = {
        "incidentId" : id,
        "dateKey" : datekey,
        "startTime" : this._getEpochTimestampSQL("FIRST(start_tm)"),
        "endTime" : this._getEpochTimestampSQL("LAST(end_tm)"),
        "eventTime" : this._getEpochTimestampSQL("LAST(event_tm)"),
        "callTime" : this._getEpochTimestampSQL("LAST(cust_call_end_tm)"),
    };
    sql = this._doValueSubstitution(sql, values);
    
    var executeContext = [];
    var moduleName = queryConfig["module-name"] || "(IA)";
    var moduleContext = [moduleName, "EnrichedIncidentByID", "IncidentData"];
    var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
    if (result != null) {
        //var serviceConfig = this.getServiceConfig()
        //for (var i=0; i<result.items.length; i++) {
        //    var record = result.items[i];
        //    this._addLabelAttributes(serviceConfig, record);
        //}
        return result.items;
    }
    return [];
}

function getCallIncidentFilters(incident)
{
    var now = Math.round(Date.now() / 1000);
    var start = incident["start_epoch"];
    var end = incident["end_epoch"] || now;
    var filters = [];
    filters.push({
        name  : "data.svc",
        value : [incident["service"]],
    });
    filters.push({
        name  : "data.timeRange",
        value : "absolute:" + (start - (60*60)) + "/" + end,
    });
    return filters;
}

var toks = incidentId.split("|");
if (toks.length == 2) {
    // toks[0] = incident-id
    // toks[1] = start_epoch
    incidentId = toks[0];
    if (queryConfig["cache-analysis-results"]["incident-by-id"] == true) {
        // check persistent cache
        var cacheConfig = {
            key1 : incidentId,
            key2 : "IncidentByID:#",
            type : "transient",
        };
        var start = Date.now();
        var result = this._cacheLoad(queryConfig, cacheConfig);
        if (result != null) {
            print("Load cached incident by id for " + cacheConfig.key1 + "/" + cacheConfig.key2 + " in " + (Date.now()-start) + "ms");
            return result;
        }
        else {
            // check transient cache
            cacheConfig = {
                key1 : incidentId,
                key2 : "IncidentByID:#",
                type : "persistent",
            };
            start = Date.now();
            result = this._cacheLoad(queryConfig, cacheConfig);
            if (result != null) {
                print("Load cached incident by id for " + cacheConfig.key1 + "/" + cacheConfig.key2 + " in " + (Date.now()-start) + "ms");
                return result;
            }
        }
    }
    var dateKey = this.__convertUnixtimeToDateKey(Number(toks[1]));
    var incidents = getIncidentData(incidentId, dateKey);
    //print("getEnrichedIncidentByID: incidents="+__prettyPrintJSON(incidents));
    var enrichedIncidentsWithMetrics = this._enrichIncidentsWithMetrics(incidents);
    //print("getEnrichedIncidentByID: enrichedIncidentsWithMetrics="+__prettyPrintJSON(enrichedIncidentsWithMetrics));
    if (enrichedIncidentsWithMetrics.length == 1) {
        var notifications = getIncidentNotifications(incidentId, dateKey);
        var calls = this.getIncidentHistoryCallData(getCallIncidentFilters(enrichedIncidentsWithMetrics[0]));
        this._enrichIncidentsWithNotificationsAndCalls(enrichedIncidentsWithMetrics, notifications, calls)
        if (queryConfig["cache-analysis-results"]["incident-by-id"] == true) {
            var cacheConfig = {
                key1 : enrichedIncidentsWithMetrics[0]["id"],
                key2 : "IncidentByID:#",
                type : enrichedIncidentsWithMetrics[0]["end_epoch"] > 0 ? "persistent" : "transient"
            };
            this._cacheSave(queryConfig, cacheConfig, enrichedIncidentsWithMetrics);
        }
        return enrichedIncidentsWithMetrics;
    }
    //print("getEnrichedIncidentByID: unexpected result, enrichedIncidentsWithMetrics.length="+enrichedIncidentsWithMetrics.length);
    return [];
}
]]>
        </CodeText>
      </Service>
      <Service name="getEnrichedIncidentData" args="filters,timeStamp" private="false">
        <CodeText>
          <![CDATA[var debug = false;
var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

if (timeStamp != null && queryConfig["query-delay-tolerance"] != null && Number(queryConfig["query-delay-tolerance"]) > 0) {
    var queryDelayToleranceInMinutes = Number(queryConfig["query-delay-tolerance"]);
    var timeStampDelay = Date.now() - Number(timeStamp);
    if(timeStampDelay > queryDelayToleranceInMinutes * 60 * 1000) return [];
}
if (typeof filters == "string") {
    filters = JSON.parse(filters);
}

if( debug ) print( "getEnrichedIncidentData: " );
if( debug ) print( __prettyPrintJSON(filters) )

var metricInfo      = this.getMetricInfo(filters);
if( debug ) print( "getEnrichedIncidentData: getMetricInfo" );
if( debug ) print( __prettyPrintJSON(metricInfo) );


var notifications = this.getIncidentNotifications(filters, null);


var incidents = this.getIncidentHistoryData(filters, metricInfo);

var enrichedIncidentsWithMetrics = this._enrichIncidentsWithMetrics(incidents);
if( debug ) print("enrichedIncidentsWithMetrics: " + enrichedIncidentsWithMetrics.length );
//if( debug ) print(__prettyPrintJSON(enrichedIncidentsWithMetrics))

var calls = this.getIncidentHistoryCallData(filters);

this._enrichIncidentsWithNotificationsAndCalls(enrichedIncidentsWithMetrics, notifications, calls)
return enrichedIncidentsWithMetrics;

]]>
        </CodeText>
      </Service>
      <Service name="getIncidentAnomalies" args="filters,startEpoch,endEpoch" private="false">
        <CodeText>
          <![CDATA[if (typeof filters == "string") {
    filters = JSON.parse(filters);
}

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

//print("getIncidentAnomalies: filters=" + __prettyPrintJSON(filters));

var svc = this._getFilterValue(filters, "data.svc", [], true);
svc = this._stripDupAndHashItems(svc);
//print("getIncidentAnomalies: svc=" + __prettyPrintJSON(svc));

var comp = this._getFilterValue(filters, "data.comp", [], true);
comp = this._stripDupAndHashItems(comp);
//print("getIncidentAnomalies: comp=" + __prettyPrintJSON(comp));

var timeRange = this.getTimeRange(filters);
if (timeRange == null) return [];

var serviceWhereClause = "";
if( service != null) {
    serviceWhereClause = " AND service in ('" + service + "')";   
}

var subserviceWhereClause = "";
if (subService != null && subService != "" ) {
    subserviceWhereClause = " and sub_service in ('" + subService + "') ";
}

var metricWhereClauuse = "";
if( metric != null && metric != "" ){
    metricWhereClause = " AND dim_values in ('"+metric+"') ";   
}

var sql = Context.getLocalResource("INCIDENT_ANOMALIES_SQL");
var values = {
    "fromEpoch" : String(startEpoch),
    "toEpoch" : String(endEpoch),
    "serviceWhereClause" : serviceWhereClause,
    "subserviceWhereClause" : subserviceWhereClause,
    "metricWhereClause" : metricWhereClause
};
sql = this._doValueSubstitution(sql, values);
//print( sql );
//print("getIncidentAnomalies: " + sql);

var executeContext = [svc];
if (comp.length > 0) {
    executeContext.push(comp);
}
var moduleName = queryConfig["module-name"] || "(AA)";
var moduleContext = [moduleName, "IncidentAnomalies"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
if (result != null) {
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentDetail" args="selected" private="false">
        <CodeText>
          <![CDATA[//print("getIncidentDetail: selected=" + __prettyPrintJSON(selected));

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var result = null;
var cacheConfig = null;
if (queryConfig["cache-analysis-results"]["incident-detail"] == true) {
    cacheConfig = {
        key1 : selected["id"],
        key2 : "IncidentDetail:#",
        type : selected["end_epoch"] > 0 ? "persistent" : "transient"
    };
}
if (cacheConfig != null) {
    var start = Date.now();
    result = this._cacheLoad(queryConfig, cacheConfig);
    if (result != null) {
        print("Load cached incident detail for " + cacheConfig.key1 + "/" + cacheConfig.key2 + " in " + (Date.now()-start) + "ms");
        return result;
    }
}

result = this.getIncidentDetailData(selected["service"], selected["id"], selected["date_key"]);

if (cacheConfig != null) {
    this._cacheSave(queryConfig, cacheConfig, result);
}

return result;
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentDetailConfig" args="" private="false">
        <CodeText>
          <![CDATA[var URI = "/app/dbp/user/" + Context.getModelOwnerId() + "/" + Context.getModelPath();
return {
    "service" : {
        "method" : "POST",
        "url" : URI + "/getIncidentDetailData"
    },
    "config" : {}
};]]>
        </CodeText>
      </Service>
      <Service name="getIncidentDetailData" args="svc,id,date_key" private="false">
        <CodeText>
          <![CDATA[//print("getIncidentDetailData: id=" + __prettyPrintJSON(id));

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var sql = Context.getLocalResource("INCIDENT_DETAIL_SQL");
var values = {
    "id" : id,
    "dateKeyWhereClause" : date_key != null ? "AND date_key in (" + date_key + ")" : "",
};
sql = this._doValueSubstitution(sql, values);

var executeContext = [svc];
var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "IncidentDetail"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
if (result != null) {
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentHistoryCallData" args="filters" private="false">
        <CodeText>
          <![CDATA[if (typeof filters == "string") {
    filters = JSON.parse(filters);
}
//print("getIncidentHistoryCallData: filters=" + __prettyPrintJSON(filters));

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var svc = this._getFilterValue(filters, "data.svc", [], true);
svc = this._stripDupAndHashItems(svc);
//print("getIncidentHistoryCallData: svc=" + __prettyPrintJSON(svc));
//if (svc.length == 0) return [];

var comp = this._getFilterValue(filters, "data.comp", [], true);
comp = this._stripDupAndHashItems(comp);
//print("getIncidentHistoryCallData: comp=" + __prettyPrintJSON(comp));

//mapServiceAndSubServiceNameToLabel(svc, comp);

var timeRange = this.getTimeRange(filters);
if (timeRange == null) return [];


var serviceWhereClause = "";
if( svc .length > 0) {
    serviceWhereClause = " AND service in ('" + svc + "')";   
}

var subserviceWhereClause = "AND sub_service like '*' AND dim_values like '*|Customer Call Volume' ";


var sql = Context.getLocalResource("INCIDENT_HISTORY_SQL");
var values = {
    "dateKeys" : this._getDateKeysFromUnixtimeRange(timeRange.fromUnixTime, timeRange.toUnixTime),
    "fromEpoch" : String(timeRange.fromUnixTime),
    "toEpoch" : String(timeRange.toUnixTime),
    "svc" : this._formatArrayForInClause(svc),
    "serviceWhereClause" : serviceWhereClause,
    "subserviceWhereClause" : subserviceWhereClause,
    "startTime" : this._getEpochTimestampSQL("FIRST(start_tm)"),
    "endTime" : this._getEpochTimestampSQL("LAST(end_tm)"),
    "eventTime" : this._getEpochTimestampSQL("LAST(event_tm)"),
    "callTime" : this._getEpochTimestampSQL("LAST(cust_call_end_tm)"),
    "metricIdWhereClause" : "",
};
sql = this._doValueSubstitution(sql, values);

var executeContext = [svc];
if (comp.length > 0) {
    executeContext.push(comp);
}
var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "IncidentHistoryCallData"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
if (result != null) {
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentHistoryData" args="filters,metricInfo" private="false">
        <CodeText>
          <![CDATA[var debug = true;
if (typeof filters == "string") {
    filters = JSON.parse(filters);
}
if( debug ) print("getIncidentHistoryData: filters=" + __prettyPrintJSON(filters));
if( debug ) print("getIncidentHistoryData: metricInfo=" + __prettyPrintJSON(metricInfo));

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var svc = this._getFilterValue(filters, "data.svc", [], true);
svc = this._stripDupAndHashItems(svc);
//print("getIncidentHistoryData: svc=" + __prettyPrintJSON(svc));
//if (svc.length == 0) return [];

var comp = this._getFilterValue(filters, "data.comp", [], true);
comp = this._stripDupAndHashItems(comp);
//print("getIncidentHistoryData: comp=" + __prettyPrintJSON(comp));

var timeRange = this.getTimeRange(filters);
if (timeRange == null) return [];
if( debug ) print("getIncidentHistoryData: timeRange=" + __prettyPrintJSON(timeRange));

var metricIdWhereClause = this._getMetricIdWhereClause(metricInfo);

var sql = Context.getLocalResource("INCIDENT_HISTORY_SQL");
if( debug ) print( "INCIDENT_HISTORY3_SQL" );
var values = {
    "dateKeys"              : this._getDateKeysFromUnixtimeRange(timeRange.fromUnixTime, timeRange.toUnixTime),
    "fromEpoch"             : String(timeRange.fromUnixTime),
    "toEpoch"               : String(timeRange.toUnixTime),
    "startTime"             : this._getEpochTimestampSQL("FIRST(start_tm)"),
    "endTime"               : this._getEpochTimestampSQL("LAST(end_tm)"),
    "eventTime"             : this._getEpochTimestampSQL("LAST(event_tm)"),
    "callTime"              : this._getEpochTimestampSQL("LAST(cust_call_end_tm)"),
    "metricIdWhereClause"   : metricIdWhereClause
};

sql = this._doValueSubstitution(sql, values);
if( debug ) print(sql);
var executeContext = [svc];
if (comp.length > 0) {
    executeContext.push(comp);
}
var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "IncidentHistoryData"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
if (result != null) {
    return result.items;
}
return [];
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentNotifications" args="filters,notificationId" private="false">
        <CodeText>
          <![CDATA[var debug = true;

if (typeof filters == "string") {
    filters = JSON.parse(filters);
}
if( debug ) print("getIncidentNotifications: filters=" + __prettyPrintJSON(filters));

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var svc = this._getFilterValue(filters, "data.svc", [], true);
svc = this._stripDupAndHashItems(svc);
//print("getIncidentNotifications: svc=" + __prettyPrintJSON(svc));
//if (svc.length == 0) return [];

var comp = this._getFilterValue(filters, "data.comp", [], true);
comp = this._stripDupAndHashItems(comp);
//print("getIncidentNotifications: comp=" + __prettyPrintJSON(comp));

//mapServiceAndSubServiceNameToLabel(svc, comp);

var timeRange = this.getTimeRange(filters);
if (timeRange == null) return [];

var vtCacheConfig = null;
if (queryConfig["cache-analysis-results"]["incident-notifications"] == true) {
    for (var i=0; i<filters.length; i++) {
        if (filters[i]["name"] == "$.cacheConfig") {
            vtCacheConfig = filters[i]["value"];
            break;
        }
    }
}
if (vtCacheConfig != null) {
    var start = Date.now();
    result = this._cacheLoad(queryConfig, vtCacheConfig);
    if (result != null) {
        print("Load cached incident notifications for " + vtCacheConfig.key1 + "/" + vtCacheConfig.key2 + " in " + (Date.now()-start) + "ms");
        return result;
    }
}

var serviceWhereClause = "";
if( svc.length > 0) {
    
    var svcVal = this._formatArrayForInClause(svc);
   // print("Notification svc");
   // print(svcVal);
    
    serviceWhereClause = " AND service in ('" + this._formatArrayForInClause(svc) + "')";   
}

var subserviceWhereClause = "";
if( comp.length > 0) {
    serviceWhereClause = " AND service in ('" + this._formatArrayForInClause(comp) + "')";   
}

var notificationIdWhereClause = "";
if( notificationId && notificationId != null ){
    notificationIdWhereClause = " AND id in ('"+ notificationId +"')"
}

var sql = Context.getLocalResource("INCIDENT_NOTIFICATION_SQL");
var values = {
    "dateKeys" :                    this._getDateKeysFromUnixtimeRange(timeRange.fromUnixTime, timeRange.toUnixTime),
    "fromEpoch" :                   String(timeRange.fromUnixTime),
    "toEpoch" :                     String(timeRange.toUnixTime),
    "serviceWhereClause" :          serviceWhereClause,
    "subserviceWhereClause" :       subserviceWhereClause,
    "notificationIdWhereClause":    notificationIdWhereClause
};
sql = this._doValueSubstitution(sql, values);
if( debug ) print( sql );

var executeContext = [svc];
if (comp.length > 0) {
    executeContext.push(comp);
}
var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "IncidentNotifications"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
if (result != null) {
    if( debug ) print( "getIncidentNotifications() returned: " + result.items.length + " records" );
    result = result.items;
} else {
    if( debug ) print( "getIncidentNotifications() returned null "  );
    result = [];
}

if (vtCacheConfig != null) {
    this._cacheSave(queryConfig, vtCacheConfig, result);
}

return result;
]]>
        </CodeText>
      </Service>
      <Service name="getIncidentSummaryRollup" args="startEpoch,endEpoch,groupingField,service,subService" private="false">
        <CodeText>
          <![CDATA[//print( "getIncidentSummaryRollup: From: " + startEpoch + " to: " + endEpoch + " :: Grouped By " + groupingField);

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var startTm         = 0;
if( startEpoch > 1000000000000 ){
    startTm = parseFloat( startEpoch ) / 1000;   
} else {
    startTm = parseFloat( startEpoch );
}

var endTm           = 0;
if( endEpoch > 1000000000000 ){
    endTm = parseFloat( endEpoch ) / 1000;   
} else {
    endTm = parseFloat( endEpoch );
}

var timeRangeClause = "";
if( startTm > 0 && endTm > 0 ){
        timeRangeClause = "AND start_tm between " + startTm + " AND " + endTm ;
}

var rollupField     = "";
var groupByClause   = "";
if( groupingField && groupingField != null && groupingField != "") {
    
    rollupField = JSON.parse(groupingField) + ",";
    groupByClause = "GROUP BY " + JSON.parse(groupingField);   

}

var serviceWhereClause = "";
if( service && JSON.parse(service != null) && JSON.parse(service) != ""  ){
    serviceWhereClause = "AND service = " + JSON.parse(service);   
}

var subServiceWhereClause = "";
if( subService && JSON.parse(subService) != null && JSON.parse(subService) != "" ){
    subServiceWhereClause = "AND sub_service = " + JSON.parse(subService) ;   
}



var sql = Context.getLocalResource("INCIDENT_SUMMARY_ROLLUP");
var values = {
    "timeRangeClause"       : timeRangeClause,
    "rollupField"           : rollupField,
    "groupByClause"         : groupByClause,
    "serviceWhereClause"    : serviceWhereClause,
    "subServiceWhereClause" : subServiceWhereClause
};

sql = this._doValueSubstitution( sql, values );
//print( sql );

var executeContext = [];

var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "IncidentSummaryRollup"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);

if( result != null ){
    
    return result.items;
} 

return [];]]>
        </CodeText>
      </Service>
      <Service name="getLatestIncidentRecordById" args="incidentID" private="false">
        <CodeText>
          <![CDATA[var debug = false;
//print("Execute Service Call: getLatestIncidentRecordById");

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

/*
if (typeof filters == "string") {
    filters = JSON.parse(filters);
}
if( debug ) print("getLatestIncidentRecordById: filters=" + __prettyPrintJSON(filters));

var svc = this._getFilterValue(filters, "data.svc", [], true);
    svc = this._stripDupAndHashItems(svc);

var timeRange = this.getTimeRange(filters);
if (timeRange == null) return [];
if( debug ) print("getLatestIncidentRecordById: timeRange=" + __prettyPrintJSON(timeRange));
*/
var incidentWhereClause = "";
if( incidentID != null && incidentID != "" ) {
    incidentWhereClause = " id in ('" + incidentID + "')";   
} else {
    return [];   
}

var sql = Context.getLocalResource("MOST_CURRENT_INCIDENT_RECORD_SQL");
var values = {
    /*"dateKeys" : this._getDateKeysFromUnixtimeRange(timeRange.fromUnixTime, timeRange.toUnixTime),*/
    "incidentWhereClause":      incidentWhereClause,
    "timeRangeWhereClause":     " AND start_tm > 0 ",

}
sql = this._doValueSubstitution(sql, values);
if( debug ) print( sql );

var executeContext = ['*'];

var moduleName = queryConfig["module-name"] || "(IA)";
var moduleContext = [moduleName, "LatestIncidentRecordById"];
var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "VT_ODA_QS", sql, null);
if (result != null) {
    var serviceConfig = this.getServiceConfig()
    for (var i=0; i<result.items.length; i++) {
        var record = result.items[i];
        //this._addLabelAttributes(serviceConfig, record);
    }
    return result.items;
}
return [];]]>
        </CodeText>
      </Service>
      <Service name="getMetricInfo" args="filters" private="false">
        <CodeText>
          <![CDATA[var debug = true;
if (typeof filters == "string") {
    filters = JSON.parse(filters);
}
if( debug ) print("getMetricInfo: filters=" + __prettyPrintJSON(filters));

var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

var svc = this._getFilterValue(filters, "data.svc", [], true);
svc = this._stripDupAndHashItems(svc);
if( debug ) print("getMetricInfo: svc=" + __prettyPrintJSON(svc));
//if (svc.length == 0) return [];

var comp = this._getFilterValue(filters, "data.comp", [], true);
comp = this._stripDupAndHashItems(comp);
if( debug ) print("getMetricInfo: comp=" + __prettyPrintJSON(comp));

var serviceWhereClause = "";
if( svc.length > 0) {
    serviceWhereClause = " WHERE service_name in ('" + svc + "')";   
}

var subserviceWhereClause = "";
if (comp.length > 0) {
    subserviceWhereClause = "and sub_service_name in (" + this._formatArrayForInClause(comp) + ") ";
}

var sql = Context.getLocalResource("METRIC_INFO_SQL");
var values = {
    "serviceWhereClause":       serviceWhereClause,
    "subserviceWhereClause":    subserviceWhereClause
}
sql = this._doValueSubstitution(sql, values);

if( debug ) print("IncidentAnalysisService: getMetricInfo():");
if( debug ) print(sql);

if( serviceWhereClause != "" ){
    var executeContext = [svc];
    var moduleName = queryConfig["module-name"] || "(IA)";
    var moduleContext = [moduleName, "MetricInfo"];
    var result = this.executeSQLQuery(queryConfig, executeContext, moduleContext, "charter_ref_db", sql, null);
    if( result != null ){
        return result.items;
    } else {
        return [];
    }
    
} else {
    return [];   
}]]>
        </CodeText>
      </Service>
      <Service name="getServiceList" args="" private="false">
        <CodeText>
          <![CDATA[var jndiName    = "charter_ref_db";

//print( "getServiceList" );

var sql = "select service_name, service_label from viaops_metric_info group by service_name, service_label";

//print( "getServiceList: " + sql );

var result = SQL.executeQuery(jndiName, sql);

if (result != null) {
    result = JSON.parse(result);
}
return result;




]]>
        </CodeText>
      </Service>
      <Service name="getTimeRange" args="filters" private="false">
        <CodeText>
          <![CDATA[return this._getTimeRange(this.getQueryConfig(), filters);
]]>
        </CodeText>
      </Service>
      <Service name="getTrendAnalysis" args="selected,filters" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();
if (queryConfig == null) return [];

if (typeof filters == "string") {
    filters = JSON.parse(filters);
}
//print("IncidentAnalysis/getTrendData: selected="+__prettyPrintJSON(selected));
//print("IncidentAnalysis/getTrendData: filters="+__prettyPrintJSON(filters));

var enrichedFilters = [];

var svcNames    = [selected["service"]];
var compNames   = [selected["sub_service"]];
var appNames    = [selected["component"]];
var metricNames = [selected["metric"]];

// automatically include customer call IF trending metric
if (metricNames[0] != "Customer Call Volume") {
    metricNames.push("Customer Call Volume");
}

enrichedFilters.push({
    name  : "data.svc",
    value : svcNames,
});
enrichedFilters.push({
    name  : "data.comp",
    value : compNames,
});
enrichedFilters.push({
    name  : "data.app",
    value : appNames,
});
enrichedFilters.push({
    name  : "data.metric",
    value : metricNames,
});
for (var i=0; i<filters.length; i++) {
    var filter = filters[i];
    switch (filter.name) {
        case "data.svc":
        case "data.comp":
        case "data.app":
        case "data.metric":
            break;
        default:
            enrichedFilters.push(filter);
            break;
    }
}

enrichedFilters.push({
    name  : "$.aggregation.interval",
    value : { "seconds": null, "interval": "5*M" }
});

if (queryConfig["cache-analysis-results"]["trend-analysis"] == true) {
    enrichedFilters.push({
        name  : "$.cacheConfig",
        value : {
            key1 : selected["id"],
            key2 : "TA:#",
            type : selected["end_epoch"] > 0 ? "persistent" : "transient",
        }
    });
}

if (selected["algorithm"] != null) {
    switch (selected["algorithm"]) {
        case "score":
            var incidentMetricId = selected["metric_id"];
            if (incidentMetricId != null && incidentMetricId != "") {
                var callMetricId = selected["call_metric_id"];
                if (callMetricId == null || callMetricId == "") {
                    callMetricId = selected["service"] + "|*|*|Customer Call Volume";
                }
                enrichedFilters.push({
                    name  : "$.baselineTrend",
                    value : {
                        incidentMetricId : incidentMetricId,
                        callMetricId     : callMetricId,
                    },
                });
            }
            break;
        case "simple_threshold":
            enrichedFilters.push({
                name  : "$.baselineTrend",
                value : "none",
            });
            break;
    }
}

this._addDimensionWhereClause(enrichedFilters, selected["dim_keys"], selected["dim_values"]);

var start = Date.now();
//print("IncidentAnalysis/getTrendData: enrichedFilters="+__prettyPrintJSON(enrichedFilters));
var result = this._invokeTrendAnalysisService(queryConfig, enrichedFilters);
print("IncidentAnalysis/getTrendData: elapsed="+(Date.now()-start)+"ms");
return result;
]]>
        </CodeText>
      </Service>
      <Service name="getTrendConfig" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();
return queryConfig["trend-config"] || {};
]]>
        </CodeText>
      </Service>
      <Service name="submitIncidentNotification" args="data,subject" private="false">
        <CodeText>
          <![CDATA[var FeedClientLib = com.vitria.feed.api.FeedClientLib;
var FeedEvent = com.vitria.feed.api.Event;
var HashMap = java.util.HashMap;
var JavaString = java.lang.String;

var jsonPayload = null;
if (typeof data == "string") {
    jsonPayload = new JavaString(data);
    data = JSON.parse(data);
}
else {
    jsonPayload = new JavaString(JSON.stringify(data));
}

//print("submitIncidentNotification: subject = " + subject);
//print("submitIncidentNotification: data = " + __prettyPrintJSON(data));

var queryConfig = this.getQueryConfig();
if (queryConfig == null || queryConfig["submit-ticket"] == null) {
    throw new Error("'submit-ticket' endpoint not defined");
    return false;
}

var target = queryConfig["submit-ticket"];
if (target["project"] == null || target["feed"] == null) {
    throw new Error("Incomplete 'submit-ticket' endpoint definition");
    return false;
}

var client = FeedClientLib.getFeedClient();
client.setDefaultProject(target["project"]);

var eventProperties = new HashMap();
var eventPayload = new HashMap();

eventPayload.put("tm", (new Date()).toLocaleString().getBytes("UTF-8"));
eventPayload.put("from", Context.getCurrentUserId().getBytes("UTF-8"));
eventPayload.put("to", "IncidentTicketService".getBytes("UTF-8"));

if( subject && subject != null ){
    eventPayload.put("subject", ("Incident: " + subject).getBytes("UTF-8"));
} else {
    eventPayload.put("subject", ("Incident: " + data.ticket.incident.id).getBytes("UTF-8"));
}

eventPayload.put("payload", jsonPayload.getBytes("UTF-8"));

try{
    var feedEvent = client.createEvent(eventPayload, eventProperties, eventProperties);
    client.publish(target["feed"], [feedEvent]);
    client.close();

    return true;
} catch ( err ){
    return err;   
}]]>
        </CodeText>
      </Service>
      <Service name="submitIncidentTicket" args="data" private="false">
        <CodeText>
          <![CDATA[var FeedClientLib = com.vitria.feed.api.FeedClientLib;
var FeedEvent = com.vitria.feed.api.Event;
var HashMap = java.util.HashMap;
var JavaString = java.lang.String;

var jsonPayload = null;
if (typeof data == "string") {
    jsonPayload = new JavaString(data);
    data = JSON.parse(data);
}
else {
    jsonPayload = new JavaString(JSON.stringify(data));
}
//print("submitIncidentTicket: data=" + __prettyPrintJSON(data));

var queryConfig = this.getQueryConfig();
if (queryConfig == null || queryConfig["submit-ticket"] == null) {
    throw new Error("'submit-ticket' endpoint not defined");
    return false;
}

var target = queryConfig["submit-ticket"];
if (target["project"] == null || target["feed"] == null) {
    throw new Error("Incomplete 'submit-ticket' endpoint definition");
    return false;
}

var client = FeedClientLib.getFeedClient();
client.setDefaultProject(target["project"]);

var eventProperties = new HashMap();
var eventPayload = new HashMap();

eventPayload.put("tm", (new Date()).toLocaleString().getBytes("UTF-8"));
eventPayload.put("from", Context.getCurrentUserId().getBytes("UTF-8"));
eventPayload.put("to", "IncidentTicketService".getBytes("UTF-8"));
eventPayload.put("subject", ("Incident: " + data.ticket.incident.id).getBytes("UTF-8"));
eventPayload.put("payload", jsonPayload.getBytes("UTF-8"));

var feedEvent = client.createEvent(eventPayload, eventProperties, eventProperties);
client.publish(target["feed"], [feedEvent]);
client.close();

return true;
]]>
        </CodeText>
      </Service>
    </Services>
    <Resources>
      <Resource uuid="c4b5fb28-0d33-485b-86e4-30de2db0990c" name="ANOMALY_COUNT_SQL" type="application/sql" size="160" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="c8d1fb4b-3184-44f5-86f7-dbbfdb03a798" name="ANOMALY_INCIDENTS_SQL" type="application/sql" size="2978" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="bc517976-b9ff-4d6f-83c8-dd8cf3bbed13" name="INCIDENT_ANOMALIES_SQL" type="application/sql" size="192" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="cd0f9d7e-c804-460d-8a52-c55efeda5d39" name="INCIDENT_CAUSATION_FACTORS_SQL" type="application/sql" size="80" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="0c18bb07-227b-4d20-87ab-4a73fd027991" name="INCIDENT_DETAIL_SQL" type="application/sql" size="252" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="ec0b87a2-62ad-4ada-8cd7-cae47b3679ca" name="INCIDENT_HISTORY_BY_ID_SQL" type="application/sql" size="4427" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="34959900-cca5-4bc3-8c0d-ed4810019b01" name="INCIDENT_HISTORY_SQL" type="application/sql" size="4636" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="a1caf84d-beba-417a-8fcc-a2816150ef00" name="INCIDENT_NOTIFICATION_BY_ID_SQL" type="application/sql" size="125" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="cdbc72be-8785-4bbd-8fb1-5c2bf817e040" name="INCIDENT_NOTIFICATION_SQL" type="application/sql" size="203" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="5dc83baf-ca94-4f32-886b-8abea5bb6f4e" name="METRIC_INFO_SQL" type="application/sql" size="80" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="3709ab08-5473-4849-82f3-11e3e3293100" name="MOST_CURRENT_INCIDENT_RECORD_SQL" type="application/sql" size="97" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="00505e6f-829e-4ea9-87a2-5a2a51df8489" name="QueryConfig" type="application/json" size="1029" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins>
      <Plugin uri="/app/dbp/user/via_common/dbpm/VIA - File Service"/>
      <Plugin uri="/app/dbp/user/viaops_admin/dbpm/VIAOps - Base Service"/>
      <Plugin uri="/app/dbp/space/VIA Digital Operations/dbpm/VIAOps - Demo Service"/>
      <Plugin uri="/app/dbp/user/charter_admin/dbpm/Charter - Base v2"/>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>
